
HDI_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f4  00800060  00003d2c  00003dc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800154  00800154  00003eb4  2**0
                  ALLOC
  3 .stab         000035d0  00000000  00000000  00003eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011e7  00000000  00000000  00007484  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000866b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000087ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000891b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a564  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b44f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c1fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c35c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c5e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cdb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 1e 12 	jmp	0x243c	; 0x243c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 35       	cpi	r26, 0x54	; 84
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e5       	ldi	r26, 0x54	; 84
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 35       	cpi	r26, 0x58	; 88
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 94 1e 	jmp	0x3d28	; 0x3d28 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e4       	ldi	r26, 0x45	; 69
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 34 1e 	jmp	0x3c68	; 0x3c68 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e4       	ldi	r24, 0x45	; 69
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 34 1e 	jmp	0x3c68	; 0x3c68 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 28 1e 	jmp	0x3c50	; 0x3c50 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

static uint8 count =0;
static uint8 count1 =0;

int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	a8 97       	sbiw	r28, 0x28	; 40
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType uart_config = {BIT_DATA_8, Even_parity, STOP_1, 9600};
     b5a:	ce 01       	movw	r24, r28
     b5c:	4d 96       	adiw	r24, 0x1d	; 29
     b5e:	9d a3       	std	Y+37, r25	; 0x25
     b60:	8c a3       	std	Y+36, r24	; 0x24
     b62:	ed e4       	ldi	r30, 0x4D	; 77
     b64:	f1 e0       	ldi	r31, 0x01	; 1
     b66:	ff a3       	std	Y+39, r31	; 0x27
     b68:	ee a3       	std	Y+38, r30	; 0x26
     b6a:	f7 e0       	ldi	r31, 0x07	; 7
     b6c:	f8 a7       	std	Y+40, r31	; 0x28
     b6e:	ee a1       	ldd	r30, Y+38	; 0x26
     b70:	ff a1       	ldd	r31, Y+39	; 0x27
     b72:	00 80       	ld	r0, Z
     b74:	8e a1       	ldd	r24, Y+38	; 0x26
     b76:	9f a1       	ldd	r25, Y+39	; 0x27
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	9f a3       	std	Y+39, r25	; 0x27
     b7c:	8e a3       	std	Y+38, r24	; 0x26
     b7e:	ec a1       	ldd	r30, Y+36	; 0x24
     b80:	fd a1       	ldd	r31, Y+37	; 0x25
     b82:	00 82       	st	Z, r0
     b84:	8c a1       	ldd	r24, Y+36	; 0x24
     b86:	9d a1       	ldd	r25, Y+37	; 0x25
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	9d a3       	std	Y+37, r25	; 0x25
     b8c:	8c a3       	std	Y+36, r24	; 0x24
     b8e:	98 a5       	ldd	r25, Y+40	; 0x28
     b90:	91 50       	subi	r25, 0x01	; 1
     b92:	98 a7       	std	Y+40, r25	; 0x28
     b94:	e8 a5       	ldd	r30, Y+40	; 0x28
     b96:	ee 23       	and	r30, r30
     b98:	51 f7       	brne	.-44     	; 0xb6e <main+0x28>

	UART_init(&uart_config);
     b9a:	ce 01       	movw	r24, r28
     b9c:	4d 96       	adiw	r24, 0x1d	; 29
     b9e:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <UART_init>
	LCD_init();
     ba2:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <LCD_init>
	while (UART_recieveByte() != UART_Ready);
     ba6:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <UART_recieveByte>
     baa:	86 34       	cpi	r24, 0x46	; 70
     bac:	e1 f7       	brne	.-8      	; 0xba6 <main+0x60>
	Create_password();
     bae:	0e 94 e5 06 	call	0xdca	; 0xdca <Create_password>
	while(1)
    {
		LCD_clearScreen();
     bb2:	0e 94 c6 1c 	call	0x398c	; 0x398c <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "+ : Open Door");
     bb6:	20 e6       	ldi	r18, 0x60	; 96
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	a9 01       	movw	r20, r18
     bc0:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "- : Reset Password");
     bc4:	2e e6       	ldi	r18, 0x6E	; 110
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	a9 01       	movw	r20, r18
     bce:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_displayStringRowColumn>
		/**********************waiting to enter + or -***************************/
		while (KEYPAD_getPressedKey() != '-' && KEYPAD_getPressedKey() != '+'){}
     bd2:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <KEYPAD_getPressedKey>
     bd6:	8d 32       	cpi	r24, 0x2D	; 45
     bd8:	21 f0       	breq	.+8      	; 0xbe2 <main+0x9c>
     bda:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <KEYPAD_getPressedKey>
     bde:	8b 32       	cpi	r24, 0x2B	; 43
     be0:	c1 f7       	brne	.-16     	; 0xbd2 <main+0x8c>
		/***********************************************************************/
		if(KEYPAD_getPressedKey() == '+')
     be2:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <KEYPAD_getPressedKey>
     be6:	8b 32       	cpi	r24, 0x2B	; 43
     be8:	09 f0       	breq	.+2      	; 0xbec <main+0xa6>
     bea:	75 c0       	rjmp	.+234    	; 0xcd6 <main+0x190>
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	aa e7       	ldi	r26, 0x7A	; 122
     bf2:	b4 e4       	ldi	r27, 0x44	; 68
     bf4:	89 8f       	std	Y+25, r24	; 0x19
     bf6:	9a 8f       	std	Y+26, r25	; 0x1a
     bf8:	ab 8f       	std	Y+27, r26	; 0x1b
     bfa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bfc:	69 8d       	ldd	r22, Y+25	; 0x19
     bfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c00:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c02:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	4a ef       	ldi	r20, 0xFA	; 250
     c0a:	54 e4       	ldi	r21, 0x44	; 68
     c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	8d 8b       	std	Y+21, r24	; 0x15
     c16:	9e 8b       	std	Y+22, r25	; 0x16
     c18:	af 8b       	std	Y+23, r26	; 0x17
     c1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c1c:	6d 89       	ldd	r22, Y+21	; 0x15
     c1e:	7e 89       	ldd	r23, Y+22	; 0x16
     c20:	8f 89       	ldd	r24, Y+23	; 0x17
     c22:	98 8d       	ldd	r25, Y+24	; 0x18
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	40 e8       	ldi	r20, 0x80	; 128
     c2a:	5f e3       	ldi	r21, 0x3F	; 63
     c2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c30:	88 23       	and	r24, r24
     c32:	2c f4       	brge	.+10     	; 0xc3e <main+0xf8>
		__ticks = 1;
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	9c 8b       	std	Y+20, r25	; 0x14
     c3a:	8b 8b       	std	Y+19, r24	; 0x13
     c3c:	3f c0       	rjmp	.+126    	; 0xcbc <main+0x176>
	else if (__tmp > 65535)
     c3e:	6d 89       	ldd	r22, Y+21	; 0x15
     c40:	7e 89       	ldd	r23, Y+22	; 0x16
     c42:	8f 89       	ldd	r24, Y+23	; 0x17
     c44:	98 8d       	ldd	r25, Y+24	; 0x18
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	3f ef       	ldi	r19, 0xFF	; 255
     c4a:	4f e7       	ldi	r20, 0x7F	; 127
     c4c:	57 e4       	ldi	r21, 0x47	; 71
     c4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c52:	18 16       	cp	r1, r24
     c54:	4c f5       	brge	.+82     	; 0xca8 <main+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c56:	69 8d       	ldd	r22, Y+25	; 0x19
     c58:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	40 e2       	ldi	r20, 0x20	; 32
     c64:	51 e4       	ldi	r21, 0x41	; 65
     c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c6a:	dc 01       	movw	r26, r24
     c6c:	cb 01       	movw	r24, r22
     c6e:	bc 01       	movw	r22, r24
     c70:	cd 01       	movw	r24, r26
     c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c76:	dc 01       	movw	r26, r24
     c78:	cb 01       	movw	r24, r22
     c7a:	9c 8b       	std	Y+20, r25	; 0x14
     c7c:	8b 8b       	std	Y+19, r24	; 0x13
     c7e:	0f c0       	rjmp	.+30     	; 0xc9e <main+0x158>
     c80:	88 ec       	ldi	r24, 0xC8	; 200
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	9a 8b       	std	Y+18, r25	; 0x12
     c86:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c88:	89 89       	ldd	r24, Y+17	; 0x11
     c8a:	9a 89       	ldd	r25, Y+18	; 0x12
     c8c:	01 97       	sbiw	r24, 0x01	; 1
     c8e:	f1 f7       	brne	.-4      	; 0xc8c <main+0x146>
     c90:	9a 8b       	std	Y+18, r25	; 0x12
     c92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c94:	8b 89       	ldd	r24, Y+19	; 0x13
     c96:	9c 89       	ldd	r25, Y+20	; 0x14
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	9c 8b       	std	Y+20, r25	; 0x14
     c9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c9e:	8b 89       	ldd	r24, Y+19	; 0x13
     ca0:	9c 89       	ldd	r25, Y+20	; 0x14
     ca2:	00 97       	sbiw	r24, 0x00	; 0
     ca4:	69 f7       	brne	.-38     	; 0xc80 <main+0x13a>
     ca6:	14 c0       	rjmp	.+40     	; 0xcd0 <main+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ca8:	6d 89       	ldd	r22, Y+21	; 0x15
     caa:	7e 89       	ldd	r23, Y+22	; 0x16
     cac:	8f 89       	ldd	r24, Y+23	; 0x17
     cae:	98 8d       	ldd	r25, Y+24	; 0x18
     cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cb4:	dc 01       	movw	r26, r24
     cb6:	cb 01       	movw	r24, r22
     cb8:	9c 8b       	std	Y+20, r25	; 0x14
     cba:	8b 8b       	std	Y+19, r24	; 0x13
     cbc:	8b 89       	ldd	r24, Y+19	; 0x13
     cbe:	9c 89       	ldd	r25, Y+20	; 0x14
     cc0:	98 8b       	std	Y+16, r25	; 0x10
     cc2:	8f 87       	std	Y+15, r24	; 0x0f
     cc4:	8f 85       	ldd	r24, Y+15	; 0x0f
     cc6:	98 89       	ldd	r25, Y+16	; 0x10
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	f1 f7       	brne	.-4      	; 0xcc8 <main+0x182>
     ccc:	98 8b       	std	Y+16, r25	; 0x10
     cce:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(1000);
			Open_Door();
     cd0:	0e 94 2b 08 	call	0x1056	; 0x1056 <Open_Door>
     cd4:	6e cf       	rjmp	.-292    	; 0xbb2 <main+0x6c>
			//Send_password(Enter_password);
			/*Open door function*/
		}
		else if(KEYPAD_getPressedKey() == '-')
     cd6:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <KEYPAD_getPressedKey>
     cda:	8d 32       	cpi	r24, 0x2D	; 45
     cdc:	09 f0       	breq	.+2      	; 0xce0 <main+0x19a>
     cde:	69 cf       	rjmp	.-302    	; 0xbb2 <main+0x6c>
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	aa e7       	ldi	r26, 0x7A	; 122
     ce6:	b4 e4       	ldi	r27, 0x44	; 68
     ce8:	8b 87       	std	Y+11, r24	; 0x0b
     cea:	9c 87       	std	Y+12, r25	; 0x0c
     cec:	ad 87       	std	Y+13, r26	; 0x0d
     cee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf0:	6b 85       	ldd	r22, Y+11	; 0x0b
     cf2:	7c 85       	ldd	r23, Y+12	; 0x0c
     cf4:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf6:	9e 85       	ldd	r25, Y+14	; 0x0e
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	4a ef       	ldi	r20, 0xFA	; 250
     cfe:	54 e4       	ldi	r21, 0x44	; 68
     d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	8f 83       	std	Y+7, r24	; 0x07
     d0a:	98 87       	std	Y+8, r25	; 0x08
     d0c:	a9 87       	std	Y+9, r26	; 0x09
     d0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	40 e8       	ldi	r20, 0x80	; 128
     d1e:	5f e3       	ldi	r21, 0x3F	; 63
     d20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d24:	88 23       	and	r24, r24
     d26:	2c f4       	brge	.+10     	; 0xd32 <main+0x1ec>
		__ticks = 1;
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	9e 83       	std	Y+6, r25	; 0x06
     d2e:	8d 83       	std	Y+5, r24	; 0x05
     d30:	3f c0       	rjmp	.+126    	; 0xdb0 <main+0x26a>
	else if (__tmp > 65535)
     d32:	6f 81       	ldd	r22, Y+7	; 0x07
     d34:	78 85       	ldd	r23, Y+8	; 0x08
     d36:	89 85       	ldd	r24, Y+9	; 0x09
     d38:	9a 85       	ldd	r25, Y+10	; 0x0a
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	3f ef       	ldi	r19, 0xFF	; 255
     d3e:	4f e7       	ldi	r20, 0x7F	; 127
     d40:	57 e4       	ldi	r21, 0x47	; 71
     d42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d46:	18 16       	cp	r1, r24
     d48:	4c f5       	brge	.+82     	; 0xd9c <main+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d4a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d4c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d4e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d50:	9e 85       	ldd	r25, Y+14	; 0x0e
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	40 e2       	ldi	r20, 0x20	; 32
     d58:	51 e4       	ldi	r21, 0x41	; 65
     d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	bc 01       	movw	r22, r24
     d64:	cd 01       	movw	r24, r26
     d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d6a:	dc 01       	movw	r26, r24
     d6c:	cb 01       	movw	r24, r22
     d6e:	9e 83       	std	Y+6, r25	; 0x06
     d70:	8d 83       	std	Y+5, r24	; 0x05
     d72:	0f c0       	rjmp	.+30     	; 0xd92 <main+0x24c>
     d74:	88 ec       	ldi	r24, 0xC8	; 200
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	9c 83       	std	Y+4, r25	; 0x04
     d7a:	8b 83       	std	Y+3, r24	; 0x03
     d7c:	8b 81       	ldd	r24, Y+3	; 0x03
     d7e:	9c 81       	ldd	r25, Y+4	; 0x04
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	f1 f7       	brne	.-4      	; 0xd80 <main+0x23a>
     d84:	9c 83       	std	Y+4, r25	; 0x04
     d86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d88:	8d 81       	ldd	r24, Y+5	; 0x05
     d8a:	9e 81       	ldd	r25, Y+6	; 0x06
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	9e 83       	std	Y+6, r25	; 0x06
     d90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d92:	8d 81       	ldd	r24, Y+5	; 0x05
     d94:	9e 81       	ldd	r25, Y+6	; 0x06
     d96:	00 97       	sbiw	r24, 0x00	; 0
     d98:	69 f7       	brne	.-38     	; 0xd74 <main+0x22e>
     d9a:	14 c0       	rjmp	.+40     	; 0xdc4 <main+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d9c:	6f 81       	ldd	r22, Y+7	; 0x07
     d9e:	78 85       	ldd	r23, Y+8	; 0x08
     da0:	89 85       	ldd	r24, Y+9	; 0x09
     da2:	9a 85       	ldd	r25, Y+10	; 0x0a
     da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da8:	dc 01       	movw	r26, r24
     daa:	cb 01       	movw	r24, r22
     dac:	9e 83       	std	Y+6, r25	; 0x06
     dae:	8d 83       	std	Y+5, r24	; 0x05
     db0:	8d 81       	ldd	r24, Y+5	; 0x05
     db2:	9e 81       	ldd	r25, Y+6	; 0x06
     db4:	9a 83       	std	Y+2, r25	; 0x02
     db6:	89 83       	std	Y+1, r24	; 0x01
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	9a 81       	ldd	r25, Y+2	; 0x02
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	f1 f7       	brne	.-4      	; 0xdbc <main+0x276>
     dc0:	9a 83       	std	Y+2, r25	; 0x02
     dc2:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(1000);
			Chanage_Password();
     dc4:	0e 94 09 0c 	call	0x1812	; 0x1812 <Chanage_Password>
     dc8:	f4 ce       	rjmp	.-536    	; 0xbb2 <main+0x6c>

00000dca <Create_password>:

/*Description
 * To Display the password on lcd and check matching
 */
void Create_password(void)
{
     dca:	df 93       	push	r29
     dcc:	cf 93       	push	r28
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	a6 97       	sbiw	r28, 0x26	; 38
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
	uint8 pass[PASSWORD_SIZE];
	uint8 pass_confirm[PASSWORD_SIZE];

	LCD_clearScreen();
     dde:	0e 94 c6 1c 	call	0x398c	; 0x398c <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "plz enter pass");
     de2:	21 e8       	ldi	r18, 0x81	; 129
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	a9 01       	movw	r20, r18
     dec:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	0e 94 48 1c 	call	0x3890	; 0x3890 <LCD_moveCursor>
	Get_Password(pass);
     df8:	ce 01       	movw	r24, r28
     dfa:	4d 96       	adiw	r24, 0x1d	; 29
     dfc:	0e 94 74 10 	call	0x20e8	; 0x20e8 <Get_Password>
	LCD_clearScreen();
     e00:	0e 94 c6 1c 	call	0x398c	; 0x398c <LCD_clearScreen>

	LCD_displayStringRowColumn(0, 0, "plz enter the ");
     e04:	20 e9       	ldi	r18, 0x90	; 144
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	a9 01       	movw	r20, r18
     e0e:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	0e 94 48 1c 	call	0x3890	; 0x3890 <LCD_moveCursor>
	LCD_displayString("same pass:");
     e1a:	8f e9       	ldi	r24, 0x9F	; 159
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_displayString>
	Get_Password(pass_confirm);
     e22:	ce 01       	movw	r24, r28
     e24:	82 96       	adiw	r24, 0x22	; 34
     e26:	0e 94 74 10 	call	0x20e8	; 0x20e8 <Get_Password>
	LCD_clearScreen();
     e2a:	0e 94 c6 1c 	call	0x398c	; 0x398c <LCD_clearScreen>

	/******************************checking************************************/
	if (Check_PassMatching(pass,pass_confirm) == FALSE) {
     e2e:	ce 01       	movw	r24, r28
     e30:	4d 96       	adiw	r24, 0x1d	; 29
     e32:	9e 01       	movw	r18, r28
     e34:	2e 5d       	subi	r18, 0xDE	; 222
     e36:	3f 4f       	sbci	r19, 0xFF	; 255
     e38:	b9 01       	movw	r22, r18
     e3a:	0e 94 17 11 	call	0x222e	; 0x222e <Check_PassMatching>
     e3e:	88 23       	and	r24, r24
     e40:	09 f0       	breq	.+2      	; 0xe44 <Create_password+0x7a>
     e42:	7e c0       	rjmp	.+252    	; 0xf40 <Create_password+0x176>
		LCD_displayStringRowColumn(0, 2, "UnMatched");/*For not matching*/
     e44:	2a ea       	ldi	r18, 0xAA	; 170
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	62 e0       	ldi	r22, 0x02	; 2
     e4c:	a9 01       	movw	r20, r18
     e4e:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_displayStringRowColumn>
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	aa e7       	ldi	r26, 0x7A	; 122
     e58:	b4 e4       	ldi	r27, 0x44	; 68
     e5a:	89 8f       	std	Y+25, r24	; 0x19
     e5c:	9a 8f       	std	Y+26, r25	; 0x1a
     e5e:	ab 8f       	std	Y+27, r26	; 0x1b
     e60:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e62:	69 8d       	ldd	r22, Y+25	; 0x19
     e64:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e66:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e68:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	4a ef       	ldi	r20, 0xFA	; 250
     e70:	54 e4       	ldi	r21, 0x44	; 68
     e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	8d 8b       	std	Y+21, r24	; 0x15
     e7c:	9e 8b       	std	Y+22, r25	; 0x16
     e7e:	af 8b       	std	Y+23, r26	; 0x17
     e80:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e82:	6d 89       	ldd	r22, Y+21	; 0x15
     e84:	7e 89       	ldd	r23, Y+22	; 0x16
     e86:	8f 89       	ldd	r24, Y+23	; 0x17
     e88:	98 8d       	ldd	r25, Y+24	; 0x18
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	40 e8       	ldi	r20, 0x80	; 128
     e90:	5f e3       	ldi	r21, 0x3F	; 63
     e92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e96:	88 23       	and	r24, r24
     e98:	2c f4       	brge	.+10     	; 0xea4 <Create_password+0xda>
		__ticks = 1;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	9c 8b       	std	Y+20, r25	; 0x14
     ea0:	8b 8b       	std	Y+19, r24	; 0x13
     ea2:	3f c0       	rjmp	.+126    	; 0xf22 <Create_password+0x158>
	else if (__tmp > 65535)
     ea4:	6d 89       	ldd	r22, Y+21	; 0x15
     ea6:	7e 89       	ldd	r23, Y+22	; 0x16
     ea8:	8f 89       	ldd	r24, Y+23	; 0x17
     eaa:	98 8d       	ldd	r25, Y+24	; 0x18
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	3f ef       	ldi	r19, 0xFF	; 255
     eb0:	4f e7       	ldi	r20, 0x7F	; 127
     eb2:	57 e4       	ldi	r21, 0x47	; 71
     eb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eb8:	18 16       	cp	r1, r24
     eba:	4c f5       	brge	.+82     	; 0xf0e <Create_password+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ebc:	69 8d       	ldd	r22, Y+25	; 0x19
     ebe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ec0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ec2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e2       	ldi	r20, 0x20	; 32
     eca:	51 e4       	ldi	r21, 0x41	; 65
     ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	bc 01       	movw	r22, r24
     ed6:	cd 01       	movw	r24, r26
     ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	9c 8b       	std	Y+20, r25	; 0x14
     ee2:	8b 8b       	std	Y+19, r24	; 0x13
     ee4:	0f c0       	rjmp	.+30     	; 0xf04 <Create_password+0x13a>
     ee6:	88 ec       	ldi	r24, 0xC8	; 200
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	9a 8b       	std	Y+18, r25	; 0x12
     eec:	89 8b       	std	Y+17, r24	; 0x11
     eee:	89 89       	ldd	r24, Y+17	; 0x11
     ef0:	9a 89       	ldd	r25, Y+18	; 0x12
     ef2:	01 97       	sbiw	r24, 0x01	; 1
     ef4:	f1 f7       	brne	.-4      	; 0xef2 <Create_password+0x128>
     ef6:	9a 8b       	std	Y+18, r25	; 0x12
     ef8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     efa:	8b 89       	ldd	r24, Y+19	; 0x13
     efc:	9c 89       	ldd	r25, Y+20	; 0x14
     efe:	01 97       	sbiw	r24, 0x01	; 1
     f00:	9c 8b       	std	Y+20, r25	; 0x14
     f02:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f04:	8b 89       	ldd	r24, Y+19	; 0x13
     f06:	9c 89       	ldd	r25, Y+20	; 0x14
     f08:	00 97       	sbiw	r24, 0x00	; 0
     f0a:	69 f7       	brne	.-38     	; 0xee6 <Create_password+0x11c>
     f0c:	14 c0       	rjmp	.+40     	; 0xf36 <Create_password+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f0e:	6d 89       	ldd	r22, Y+21	; 0x15
     f10:	7e 89       	ldd	r23, Y+22	; 0x16
     f12:	8f 89       	ldd	r24, Y+23	; 0x17
     f14:	98 8d       	ldd	r25, Y+24	; 0x18
     f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	9c 8b       	std	Y+20, r25	; 0x14
     f20:	8b 8b       	std	Y+19, r24	; 0x13
     f22:	8b 89       	ldd	r24, Y+19	; 0x13
     f24:	9c 89       	ldd	r25, Y+20	; 0x14
     f26:	98 8b       	std	Y+16, r25	; 0x10
     f28:	8f 87       	std	Y+15, r24	; 0x0f
     f2a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f2c:	98 89       	ldd	r25, Y+16	; 0x10
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	f1 f7       	brne	.-4      	; 0xf2e <Create_password+0x164>
     f32:	98 8b       	std	Y+16, r25	; 0x10
     f34:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		LCD_clearScreen();
     f36:	0e 94 c6 1c 	call	0x398c	; 0x398c <LCD_clearScreen>
		Create_password();
     f3a:	0e 94 e5 06 	call	0xdca	; 0xdca <Create_password>
     f3e:	82 c0       	rjmp	.+260    	; 0x1044 <Create_password+0x27a>

	} else {
		LCD_displayStringRowColumn(0, 2, "Confirmed!");/*For matching*/
     f40:	24 eb       	ldi	r18, 0xB4	; 180
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	62 e0       	ldi	r22, 0x02	; 2
     f48:	a9 01       	movw	r20, r18
     f4a:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_displayStringRowColumn>
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	aa e7       	ldi	r26, 0x7A	; 122
     f54:	b4 e4       	ldi	r27, 0x44	; 68
     f56:	8b 87       	std	Y+11, r24	; 0x0b
     f58:	9c 87       	std	Y+12, r25	; 0x0c
     f5a:	ad 87       	std	Y+13, r26	; 0x0d
     f5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f5e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f60:	7c 85       	ldd	r23, Y+12	; 0x0c
     f62:	8d 85       	ldd	r24, Y+13	; 0x0d
     f64:	9e 85       	ldd	r25, Y+14	; 0x0e
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	4a ef       	ldi	r20, 0xFA	; 250
     f6c:	54 e4       	ldi	r21, 0x44	; 68
     f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	8f 83       	std	Y+7, r24	; 0x07
     f78:	98 87       	std	Y+8, r25	; 0x08
     f7a:	a9 87       	std	Y+9, r26	; 0x09
     f7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f7e:	6f 81       	ldd	r22, Y+7	; 0x07
     f80:	78 85       	ldd	r23, Y+8	; 0x08
     f82:	89 85       	ldd	r24, Y+9	; 0x09
     f84:	9a 85       	ldd	r25, Y+10	; 0x0a
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	40 e8       	ldi	r20, 0x80	; 128
     f8c:	5f e3       	ldi	r21, 0x3F	; 63
     f8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f92:	88 23       	and	r24, r24
     f94:	2c f4       	brge	.+10     	; 0xfa0 <Create_password+0x1d6>
		__ticks = 1;
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	9e 83       	std	Y+6, r25	; 0x06
     f9c:	8d 83       	std	Y+5, r24	; 0x05
     f9e:	3f c0       	rjmp	.+126    	; 0x101e <Create_password+0x254>
	else if (__tmp > 65535)
     fa0:	6f 81       	ldd	r22, Y+7	; 0x07
     fa2:	78 85       	ldd	r23, Y+8	; 0x08
     fa4:	89 85       	ldd	r24, Y+9	; 0x09
     fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	3f ef       	ldi	r19, 0xFF	; 255
     fac:	4f e7       	ldi	r20, 0x7F	; 127
     fae:	57 e4       	ldi	r21, 0x47	; 71
     fb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fb4:	18 16       	cp	r1, r24
     fb6:	4c f5       	brge	.+82     	; 0x100a <Create_password+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb8:	6b 85       	ldd	r22, Y+11	; 0x0b
     fba:	7c 85       	ldd	r23, Y+12	; 0x0c
     fbc:	8d 85       	ldd	r24, Y+13	; 0x0d
     fbe:	9e 85       	ldd	r25, Y+14	; 0x0e
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e2       	ldi	r20, 0x20	; 32
     fc6:	51 e4       	ldi	r21, 0x41	; 65
     fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	bc 01       	movw	r22, r24
     fd2:	cd 01       	movw	r24, r26
     fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	9e 83       	std	Y+6, r25	; 0x06
     fde:	8d 83       	std	Y+5, r24	; 0x05
     fe0:	0f c0       	rjmp	.+30     	; 0x1000 <Create_password+0x236>
     fe2:	88 ec       	ldi	r24, 0xC8	; 200
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	9c 83       	std	Y+4, r25	; 0x04
     fe8:	8b 83       	std	Y+3, r24	; 0x03
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	9c 81       	ldd	r25, Y+4	; 0x04
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	f1 f7       	brne	.-4      	; 0xfee <Create_password+0x224>
     ff2:	9c 83       	std	Y+4, r25	; 0x04
     ff4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff6:	8d 81       	ldd	r24, Y+5	; 0x05
     ff8:	9e 81       	ldd	r25, Y+6	; 0x06
     ffa:	01 97       	sbiw	r24, 0x01	; 1
     ffc:	9e 83       	std	Y+6, r25	; 0x06
     ffe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1000:	8d 81       	ldd	r24, Y+5	; 0x05
    1002:	9e 81       	ldd	r25, Y+6	; 0x06
    1004:	00 97       	sbiw	r24, 0x00	; 0
    1006:	69 f7       	brne	.-38     	; 0xfe2 <Create_password+0x218>
    1008:	14 c0       	rjmp	.+40     	; 0x1032 <Create_password+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    100a:	6f 81       	ldd	r22, Y+7	; 0x07
    100c:	78 85       	ldd	r23, Y+8	; 0x08
    100e:	89 85       	ldd	r24, Y+9	; 0x09
    1010:	9a 85       	ldd	r25, Y+10	; 0x0a
    1012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	9e 83       	std	Y+6, r25	; 0x06
    101c:	8d 83       	std	Y+5, r24	; 0x05
    101e:	8d 81       	ldd	r24, Y+5	; 0x05
    1020:	9e 81       	ldd	r25, Y+6	; 0x06
    1022:	9a 83       	std	Y+2, r25	; 0x02
    1024:	89 83       	std	Y+1, r24	; 0x01
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	9a 81       	ldd	r25, Y+2	; 0x02
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	f1 f7       	brne	.-4      	; 0x102a <Create_password+0x260>
    102e:	9a 83       	std	Y+2, r25	; 0x02
    1030:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_clearScreen();
    1032:	0e 94 c6 1c 	call	0x398c	; 0x398c <LCD_clearScreen>
		UART_sendByte(SET_PASSWORD);
    1036:	8a e0       	ldi	r24, 0x0A	; 10
    1038:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <UART_sendByte>
		//send the password by uart to save it in eeprom
		Send_password(pass);
    103c:	ce 01       	movw	r24, r28
    103e:	4d 96       	adiw	r24, 0x1d	; 29
    1040:	0e 94 4c 11 	call	0x2298	; 0x2298 <Send_password>
	}
}
    1044:	a6 96       	adiw	r28, 0x26	; 38
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <Open_Door>:

void Open_Door(void)
{
    1056:	0f 93       	push	r16
    1058:	1f 93       	push	r17
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	c9 55       	subi	r28, 0x59	; 89
    1064:	d0 40       	sbci	r29, 0x00	; 0
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
	uint8 Enter_password[PASSWORD_SIZE];
	count++;
    1070:	80 91 54 01 	lds	r24, 0x0154
    1074:	8f 5f       	subi	r24, 0xFF	; 255
    1076:	80 93 54 01 	sts	0x0154, r24
	if(count == 4)
    107a:	80 91 54 01 	lds	r24, 0x0154
    107e:	84 30       	cpi	r24, 0x04	; 4
    1080:	09 f0       	breq	.+2      	; 0x1084 <Open_Door+0x2e>
    1082:	ea c1       	rjmp	.+980    	; 0x1458 <Open_Door+0x402>
	{
		LCD_clearScreen();
    1084:	0e 94 c6 1c 	call	0x398c	; 0x398c <LCD_clearScreen>
		UART_sendByte(Turn_on_buzzer);
    1088:	80 e5       	ldi	r24, 0x50	; 80
    108a:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <UART_sendByte>
		LCD_displayStringRowColumn(0, 0, "Error");
    108e:	2f eb       	ldi	r18, 0xBF	; 191
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	a9 01       	movw	r20, r18
    1098:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_displayStringRowColumn>
		while (UART_recieveByte() != Turn_off_buzzer){}
    109c:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <UART_recieveByte>
    10a0:	85 35       	cpi	r24, 0x55	; 85
    10a2:	e1 f7       	brne	.-8      	; 0x109c <Open_Door+0x46>
		LCD_displayStringRowColumn(0, 0, "u can pass!");
    10a4:	25 ec       	ldi	r18, 0xC5	; 197
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	60 e0       	ldi	r22, 0x00	; 0
    10ac:	a9 01       	movw	r20, r18
    10ae:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_displayStringRowColumn>
    10b2:	fe 01       	movw	r30, r28
    10b4:	ef 5a       	subi	r30, 0xAF	; 175
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	aa e7       	ldi	r26, 0x7A	; 122
    10be:	b4 e4       	ldi	r27, 0x44	; 68
    10c0:	80 83       	st	Z, r24
    10c2:	91 83       	std	Z+1, r25	; 0x01
    10c4:	a2 83       	std	Z+2, r26	; 0x02
    10c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c8:	8e 01       	movw	r16, r28
    10ca:	03 5b       	subi	r16, 0xB3	; 179
    10cc:	1f 4f       	sbci	r17, 0xFF	; 255
    10ce:	fe 01       	movw	r30, r28
    10d0:	ef 5a       	subi	r30, 0xAF	; 175
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	60 81       	ld	r22, Z
    10d6:	71 81       	ldd	r23, Z+1	; 0x01
    10d8:	82 81       	ldd	r24, Z+2	; 0x02
    10da:	93 81       	ldd	r25, Z+3	; 0x03
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	4a ef       	ldi	r20, 0xFA	; 250
    10e2:	54 e4       	ldi	r21, 0x44	; 68
    10e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	f8 01       	movw	r30, r16
    10ee:	80 83       	st	Z, r24
    10f0:	91 83       	std	Z+1, r25	; 0x01
    10f2:	a2 83       	std	Z+2, r26	; 0x02
    10f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10f6:	fe 01       	movw	r30, r28
    10f8:	e3 5b       	subi	r30, 0xB3	; 179
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	60 81       	ld	r22, Z
    10fe:	71 81       	ldd	r23, Z+1	; 0x01
    1100:	82 81       	ldd	r24, Z+2	; 0x02
    1102:	93 81       	ldd	r25, Z+3	; 0x03
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	40 e8       	ldi	r20, 0x80	; 128
    110a:	5f e3       	ldi	r21, 0x3F	; 63
    110c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1110:	88 23       	and	r24, r24
    1112:	44 f4       	brge	.+16     	; 0x1124 <Open_Door+0xce>
		__ticks = 1;
    1114:	fe 01       	movw	r30, r28
    1116:	e5 5b       	subi	r30, 0xB5	; 181
    1118:	ff 4f       	sbci	r31, 0xFF	; 255
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	91 83       	std	Z+1, r25	; 0x01
    1120:	80 83       	st	Z, r24
    1122:	64 c0       	rjmp	.+200    	; 0x11ec <Open_Door+0x196>
	else if (__tmp > 65535)
    1124:	fe 01       	movw	r30, r28
    1126:	e3 5b       	subi	r30, 0xB3	; 179
    1128:	ff 4f       	sbci	r31, 0xFF	; 255
    112a:	60 81       	ld	r22, Z
    112c:	71 81       	ldd	r23, Z+1	; 0x01
    112e:	82 81       	ldd	r24, Z+2	; 0x02
    1130:	93 81       	ldd	r25, Z+3	; 0x03
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	3f ef       	ldi	r19, 0xFF	; 255
    1136:	4f e7       	ldi	r20, 0x7F	; 127
    1138:	57 e4       	ldi	r21, 0x47	; 71
    113a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    113e:	18 16       	cp	r1, r24
    1140:	0c f0       	brlt	.+2      	; 0x1144 <Open_Door+0xee>
    1142:	43 c0       	rjmp	.+134    	; 0x11ca <Open_Door+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1144:	fe 01       	movw	r30, r28
    1146:	ef 5a       	subi	r30, 0xAF	; 175
    1148:	ff 4f       	sbci	r31, 0xFF	; 255
    114a:	60 81       	ld	r22, Z
    114c:	71 81       	ldd	r23, Z+1	; 0x01
    114e:	82 81       	ldd	r24, Z+2	; 0x02
    1150:	93 81       	ldd	r25, Z+3	; 0x03
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e2       	ldi	r20, 0x20	; 32
    1158:	51 e4       	ldi	r21, 0x41	; 65
    115a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	8e 01       	movw	r16, r28
    1164:	05 5b       	subi	r16, 0xB5	; 181
    1166:	1f 4f       	sbci	r17, 0xFF	; 255
    1168:	bc 01       	movw	r22, r24
    116a:	cd 01       	movw	r24, r26
    116c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	f8 01       	movw	r30, r16
    1176:	91 83       	std	Z+1, r25	; 0x01
    1178:	80 83       	st	Z, r24
    117a:	1f c0       	rjmp	.+62     	; 0x11ba <Open_Door+0x164>
    117c:	fe 01       	movw	r30, r28
    117e:	e7 5b       	subi	r30, 0xB7	; 183
    1180:	ff 4f       	sbci	r31, 0xFF	; 255
    1182:	88 ec       	ldi	r24, 0xC8	; 200
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	91 83       	std	Z+1, r25	; 0x01
    1188:	80 83       	st	Z, r24
    118a:	fe 01       	movw	r30, r28
    118c:	e7 5b       	subi	r30, 0xB7	; 183
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	80 81       	ld	r24, Z
    1192:	91 81       	ldd	r25, Z+1	; 0x01
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	f1 f7       	brne	.-4      	; 0x1194 <Open_Door+0x13e>
    1198:	fe 01       	movw	r30, r28
    119a:	e7 5b       	subi	r30, 0xB7	; 183
    119c:	ff 4f       	sbci	r31, 0xFF	; 255
    119e:	91 83       	std	Z+1, r25	; 0x01
    11a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a2:	de 01       	movw	r26, r28
    11a4:	a5 5b       	subi	r26, 0xB5	; 181
    11a6:	bf 4f       	sbci	r27, 0xFF	; 255
    11a8:	fe 01       	movw	r30, r28
    11aa:	e5 5b       	subi	r30, 0xB5	; 181
    11ac:	ff 4f       	sbci	r31, 0xFF	; 255
    11ae:	80 81       	ld	r24, Z
    11b0:	91 81       	ldd	r25, Z+1	; 0x01
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	11 96       	adiw	r26, 0x01	; 1
    11b6:	9c 93       	st	X, r25
    11b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ba:	fe 01       	movw	r30, r28
    11bc:	e5 5b       	subi	r30, 0xB5	; 181
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	80 81       	ld	r24, Z
    11c2:	91 81       	ldd	r25, Z+1	; 0x01
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	d1 f6       	brne	.-76     	; 0x117c <Open_Door+0x126>
    11c8:	27 c0       	rjmp	.+78     	; 0x1218 <Open_Door+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ca:	8e 01       	movw	r16, r28
    11cc:	05 5b       	subi	r16, 0xB5	; 181
    11ce:	1f 4f       	sbci	r17, 0xFF	; 255
    11d0:	fe 01       	movw	r30, r28
    11d2:	e3 5b       	subi	r30, 0xB3	; 179
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	60 81       	ld	r22, Z
    11d8:	71 81       	ldd	r23, Z+1	; 0x01
    11da:	82 81       	ldd	r24, Z+2	; 0x02
    11dc:	93 81       	ldd	r25, Z+3	; 0x03
    11de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	f8 01       	movw	r30, r16
    11e8:	91 83       	std	Z+1, r25	; 0x01
    11ea:	80 83       	st	Z, r24
    11ec:	de 01       	movw	r26, r28
    11ee:	a9 5b       	subi	r26, 0xB9	; 185
    11f0:	bf 4f       	sbci	r27, 0xFF	; 255
    11f2:	fe 01       	movw	r30, r28
    11f4:	e5 5b       	subi	r30, 0xB5	; 181
    11f6:	ff 4f       	sbci	r31, 0xFF	; 255
    11f8:	80 81       	ld	r24, Z
    11fa:	91 81       	ldd	r25, Z+1	; 0x01
    11fc:	8d 93       	st	X+, r24
    11fe:	9c 93       	st	X, r25
    1200:	fe 01       	movw	r30, r28
    1202:	e9 5b       	subi	r30, 0xB9	; 185
    1204:	ff 4f       	sbci	r31, 0xFF	; 255
    1206:	80 81       	ld	r24, Z
    1208:	91 81       	ldd	r25, Z+1	; 0x01
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	f1 f7       	brne	.-4      	; 0x120a <Open_Door+0x1b4>
    120e:	fe 01       	movw	r30, r28
    1210:	e9 5b       	subi	r30, 0xB9	; 185
    1212:	ff 4f       	sbci	r31, 0xFF	; 255
    1214:	91 83       	std	Z+1, r25	; 0x01
    1216:	80 83       	st	Z, r24
		_delay_ms(1000);
		count = 0;
    1218:	10 92 54 01 	sts	0x0154, r1
		LCD_clearScreen();
    121c:	0e 94 c6 1c 	call	0x398c	; 0x398c <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    1220:	20 e6       	ldi	r18, 0x60	; 96
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	a9 01       	movw	r20, r18
    122a:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "- : Reset Password");
    122e:	2e e6       	ldi	r18, 0x6E	; 110
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	a9 01       	movw	r20, r18
    1238:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_displayStringRowColumn>
		while (KEYPAD_getPressedKey() != '-' && KEYPAD_getPressedKey() != '+'){}
    123c:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <KEYPAD_getPressedKey>
    1240:	8d 32       	cpi	r24, 0x2D	; 45
    1242:	21 f0       	breq	.+8      	; 0x124c <Open_Door+0x1f6>
    1244:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <KEYPAD_getPressedKey>
    1248:	8b 32       	cpi	r24, 0x2B	; 43
    124a:	c1 f7       	brne	.-16     	; 0x123c <Open_Door+0x1e6>
		if(KEYPAD_getPressedKey() == '+')
    124c:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <KEYPAD_getPressedKey>
    1250:	8b 32       	cpi	r24, 0x2B	; 43
    1252:	09 f0       	breq	.+2      	; 0x1256 <Open_Door+0x200>
    1254:	88 c0       	rjmp	.+272    	; 0x1366 <Open_Door+0x310>
    1256:	fe 01       	movw	r30, r28
    1258:	ed 5b       	subi	r30, 0xBD	; 189
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	aa ef       	ldi	r26, 0xFA	; 250
    1262:	b3 e4       	ldi	r27, 0x43	; 67
    1264:	80 83       	st	Z, r24
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	a2 83       	std	Z+2, r26	; 0x02
    126a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    126c:	8e 01       	movw	r16, r28
    126e:	01 5c       	subi	r16, 0xC1	; 193
    1270:	1f 4f       	sbci	r17, 0xFF	; 255
    1272:	fe 01       	movw	r30, r28
    1274:	ed 5b       	subi	r30, 0xBD	; 189
    1276:	ff 4f       	sbci	r31, 0xFF	; 255
    1278:	60 81       	ld	r22, Z
    127a:	71 81       	ldd	r23, Z+1	; 0x01
    127c:	82 81       	ldd	r24, Z+2	; 0x02
    127e:	93 81       	ldd	r25, Z+3	; 0x03
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	4a ef       	ldi	r20, 0xFA	; 250
    1286:	54 e4       	ldi	r21, 0x44	; 68
    1288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	f8 01       	movw	r30, r16
    1292:	80 83       	st	Z, r24
    1294:	91 83       	std	Z+1, r25	; 0x01
    1296:	a2 83       	std	Z+2, r26	; 0x02
    1298:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    129a:	fe 01       	movw	r30, r28
    129c:	ff 96       	adiw	r30, 0x3f	; 63
    129e:	60 81       	ld	r22, Z
    12a0:	71 81       	ldd	r23, Z+1	; 0x01
    12a2:	82 81       	ldd	r24, Z+2	; 0x02
    12a4:	93 81       	ldd	r25, Z+3	; 0x03
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 e8       	ldi	r20, 0x80	; 128
    12ac:	5f e3       	ldi	r21, 0x3F	; 63
    12ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12b2:	88 23       	and	r24, r24
    12b4:	2c f4       	brge	.+10     	; 0x12c0 <Open_Door+0x26a>
		__ticks = 1;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	9e af       	std	Y+62, r25	; 0x3e
    12bc:	8d af       	std	Y+61, r24	; 0x3d
    12be:	46 c0       	rjmp	.+140    	; 0x134c <Open_Door+0x2f6>
	else if (__tmp > 65535)
    12c0:	fe 01       	movw	r30, r28
    12c2:	ff 96       	adiw	r30, 0x3f	; 63
    12c4:	60 81       	ld	r22, Z
    12c6:	71 81       	ldd	r23, Z+1	; 0x01
    12c8:	82 81       	ldd	r24, Z+2	; 0x02
    12ca:	93 81       	ldd	r25, Z+3	; 0x03
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	3f ef       	ldi	r19, 0xFF	; 255
    12d0:	4f e7       	ldi	r20, 0x7F	; 127
    12d2:	57 e4       	ldi	r21, 0x47	; 71
    12d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12d8:	18 16       	cp	r1, r24
    12da:	64 f5       	brge	.+88     	; 0x1334 <Open_Door+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12dc:	fe 01       	movw	r30, r28
    12de:	ed 5b       	subi	r30, 0xBD	; 189
    12e0:	ff 4f       	sbci	r31, 0xFF	; 255
    12e2:	60 81       	ld	r22, Z
    12e4:	71 81       	ldd	r23, Z+1	; 0x01
    12e6:	82 81       	ldd	r24, Z+2	; 0x02
    12e8:	93 81       	ldd	r25, Z+3	; 0x03
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	40 e2       	ldi	r20, 0x20	; 32
    12f0:	51 e4       	ldi	r21, 0x41	; 65
    12f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	bc 01       	movw	r22, r24
    12fc:	cd 01       	movw	r24, r26
    12fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	9e af       	std	Y+62, r25	; 0x3e
    1308:	8d af       	std	Y+61, r24	; 0x3d
    130a:	0f c0       	rjmp	.+30     	; 0x132a <Open_Door+0x2d4>
    130c:	88 ec       	ldi	r24, 0xC8	; 200
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	9c af       	std	Y+60, r25	; 0x3c
    1312:	8b af       	std	Y+59, r24	; 0x3b
    1314:	8b ad       	ldd	r24, Y+59	; 0x3b
    1316:	9c ad       	ldd	r25, Y+60	; 0x3c
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	f1 f7       	brne	.-4      	; 0x1318 <Open_Door+0x2c2>
    131c:	9c af       	std	Y+60, r25	; 0x3c
    131e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1320:	8d ad       	ldd	r24, Y+61	; 0x3d
    1322:	9e ad       	ldd	r25, Y+62	; 0x3e
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	9e af       	std	Y+62, r25	; 0x3e
    1328:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132a:	8d ad       	ldd	r24, Y+61	; 0x3d
    132c:	9e ad       	ldd	r25, Y+62	; 0x3e
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	69 f7       	brne	.-38     	; 0x130c <Open_Door+0x2b6>
    1332:	16 c0       	rjmp	.+44     	; 0x1360 <Open_Door+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1334:	fe 01       	movw	r30, r28
    1336:	ff 96       	adiw	r30, 0x3f	; 63
    1338:	60 81       	ld	r22, Z
    133a:	71 81       	ldd	r23, Z+1	; 0x01
    133c:	82 81       	ldd	r24, Z+2	; 0x02
    133e:	93 81       	ldd	r25, Z+3	; 0x03
    1340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	9e af       	std	Y+62, r25	; 0x3e
    134a:	8d af       	std	Y+61, r24	; 0x3d
    134c:	8d ad       	ldd	r24, Y+61	; 0x3d
    134e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1350:	9a af       	std	Y+58, r25	; 0x3a
    1352:	89 af       	std	Y+57, r24	; 0x39
    1354:	89 ad       	ldd	r24, Y+57	; 0x39
    1356:	9a ad       	ldd	r25, Y+58	; 0x3a
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	f1 f7       	brne	.-4      	; 0x1358 <Open_Door+0x302>
    135c:	9a af       	std	Y+58, r25	; 0x3a
    135e:	89 af       	std	Y+57, r24	; 0x39
		{
			_delay_ms(500);
			Open_Door();
    1360:	0e 94 2b 08 	call	0x1056	; 0x1056 <Open_Door>
    1364:	79 c0       	rjmp	.+242    	; 0x1458 <Open_Door+0x402>

		}
		else if(KEYPAD_getPressedKey() == '-')
    1366:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <KEYPAD_getPressedKey>
    136a:	8d 32       	cpi	r24, 0x2D	; 45
    136c:	09 f0       	breq	.+2      	; 0x1370 <Open_Door+0x31a>
    136e:	74 c0       	rjmp	.+232    	; 0x1458 <Open_Door+0x402>
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	aa ef       	ldi	r26, 0xFA	; 250
    1376:	b3 e4       	ldi	r27, 0x43	; 67
    1378:	8d ab       	std	Y+53, r24	; 0x35
    137a:	9e ab       	std	Y+54, r25	; 0x36
    137c:	af ab       	std	Y+55, r26	; 0x37
    137e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1380:	6d a9       	ldd	r22, Y+53	; 0x35
    1382:	7e a9       	ldd	r23, Y+54	; 0x36
    1384:	8f a9       	ldd	r24, Y+55	; 0x37
    1386:	98 ad       	ldd	r25, Y+56	; 0x38
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	4a ef       	ldi	r20, 0xFA	; 250
    138e:	54 e4       	ldi	r21, 0x44	; 68
    1390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	89 ab       	std	Y+49, r24	; 0x31
    139a:	9a ab       	std	Y+50, r25	; 0x32
    139c:	ab ab       	std	Y+51, r26	; 0x33
    139e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13a0:	69 a9       	ldd	r22, Y+49	; 0x31
    13a2:	7a a9       	ldd	r23, Y+50	; 0x32
    13a4:	8b a9       	ldd	r24, Y+51	; 0x33
    13a6:	9c a9       	ldd	r25, Y+52	; 0x34
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	40 e8       	ldi	r20, 0x80	; 128
    13ae:	5f e3       	ldi	r21, 0x3F	; 63
    13b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13b4:	88 23       	and	r24, r24
    13b6:	2c f4       	brge	.+10     	; 0x13c2 <Open_Door+0x36c>
		__ticks = 1;
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	98 ab       	std	Y+48, r25	; 0x30
    13be:	8f a7       	std	Y+47, r24	; 0x2f
    13c0:	3f c0       	rjmp	.+126    	; 0x1440 <Open_Door+0x3ea>
	else if (__tmp > 65535)
    13c2:	69 a9       	ldd	r22, Y+49	; 0x31
    13c4:	7a a9       	ldd	r23, Y+50	; 0x32
    13c6:	8b a9       	ldd	r24, Y+51	; 0x33
    13c8:	9c a9       	ldd	r25, Y+52	; 0x34
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	3f ef       	ldi	r19, 0xFF	; 255
    13ce:	4f e7       	ldi	r20, 0x7F	; 127
    13d0:	57 e4       	ldi	r21, 0x47	; 71
    13d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13d6:	18 16       	cp	r1, r24
    13d8:	4c f5       	brge	.+82     	; 0x142c <Open_Door+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13da:	6d a9       	ldd	r22, Y+53	; 0x35
    13dc:	7e a9       	ldd	r23, Y+54	; 0x36
    13de:	8f a9       	ldd	r24, Y+55	; 0x37
    13e0:	98 ad       	ldd	r25, Y+56	; 0x38
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e2       	ldi	r20, 0x20	; 32
    13e8:	51 e4       	ldi	r21, 0x41	; 65
    13ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ee:	dc 01       	movw	r26, r24
    13f0:	cb 01       	movw	r24, r22
    13f2:	bc 01       	movw	r22, r24
    13f4:	cd 01       	movw	r24, r26
    13f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	98 ab       	std	Y+48, r25	; 0x30
    1400:	8f a7       	std	Y+47, r24	; 0x2f
    1402:	0f c0       	rjmp	.+30     	; 0x1422 <Open_Door+0x3cc>
    1404:	88 ec       	ldi	r24, 0xC8	; 200
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	9e a7       	std	Y+46, r25	; 0x2e
    140a:	8d a7       	std	Y+45, r24	; 0x2d
    140c:	8d a5       	ldd	r24, Y+45	; 0x2d
    140e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	f1 f7       	brne	.-4      	; 0x1410 <Open_Door+0x3ba>
    1414:	9e a7       	std	Y+46, r25	; 0x2e
    1416:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1418:	8f a5       	ldd	r24, Y+47	; 0x2f
    141a:	98 a9       	ldd	r25, Y+48	; 0x30
    141c:	01 97       	sbiw	r24, 0x01	; 1
    141e:	98 ab       	std	Y+48, r25	; 0x30
    1420:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1422:	8f a5       	ldd	r24, Y+47	; 0x2f
    1424:	98 a9       	ldd	r25, Y+48	; 0x30
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	69 f7       	brne	.-38     	; 0x1404 <Open_Door+0x3ae>
    142a:	14 c0       	rjmp	.+40     	; 0x1454 <Open_Door+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142c:	69 a9       	ldd	r22, Y+49	; 0x31
    142e:	7a a9       	ldd	r23, Y+50	; 0x32
    1430:	8b a9       	ldd	r24, Y+51	; 0x33
    1432:	9c a9       	ldd	r25, Y+52	; 0x34
    1434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	98 ab       	std	Y+48, r25	; 0x30
    143e:	8f a7       	std	Y+47, r24	; 0x2f
    1440:	8f a5       	ldd	r24, Y+47	; 0x2f
    1442:	98 a9       	ldd	r25, Y+48	; 0x30
    1444:	9c a7       	std	Y+44, r25	; 0x2c
    1446:	8b a7       	std	Y+43, r24	; 0x2b
    1448:	8b a5       	ldd	r24, Y+43	; 0x2b
    144a:	9c a5       	ldd	r25, Y+44	; 0x2c
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	f1 f7       	brne	.-4      	; 0x144c <Open_Door+0x3f6>
    1450:	9c a7       	std	Y+44, r25	; 0x2c
    1452:	8b a7       	std	Y+43, r24	; 0x2b
		{
			_delay_ms(500);
			Chanage_Password();
    1454:	0e 94 09 0c 	call	0x1812	; 0x1812 <Chanage_Password>
		}
	}
	LCD_clearScreen();
    1458:	0e 94 c6 1c 	call	0x398c	; 0x398c <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "plz enter Pass:");
    145c:	21 ed       	ldi	r18, 0xD1	; 209
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	a9 01       	movw	r20, r18
    1466:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	0e 94 48 1c 	call	0x3890	; 0x3890 <LCD_moveCursor>
	Get_Password(Enter_password);
    1472:	ce 01       	movw	r24, r28
    1474:	8b 5a       	subi	r24, 0xAB	; 171
    1476:	9f 4f       	sbci	r25, 0xFF	; 255
    1478:	0e 94 74 10 	call	0x20e8	; 0x20e8 <Get_Password>

	UART_sendByte(Enter_PASSWORD);
    147c:	84 e1       	ldi	r24, 0x14	; 20
    147e:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <UART_sendByte>
	Send_password(Enter_password);
    1482:	ce 01       	movw	r24, r28
    1484:	8b 5a       	subi	r24, 0xAB	; 171
    1486:	9f 4f       	sbci	r25, 0xFF	; 255
    1488:	0e 94 4c 11 	call	0x2298	; 0x2298 <Send_password>
	UART_sendByte(UART_Ready);
    148c:	86 e4       	ldi	r24, 0x46	; 70
    148e:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <UART_sendByte>

	if(UART_recieveByte() == TRUE)//matching password
    1492:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <UART_recieveByte>
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	09 f0       	breq	.+2      	; 0x149c <Open_Door+0x446>
    149a:	35 c1       	rjmp	.+618    	; 0x1706 <Open_Door+0x6b0>
	{
		UART_sendByte(open_door);
    149c:	8f e0       	ldi	r24, 0x0F	; 15
    149e:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <UART_sendByte>
		LCD_clearScreen();
    14a2:	0e 94 c6 1c 	call	0x398c	; 0x398c <LCD_clearScreen>
		LCD_displayString("Door is ");
    14a6:	81 ee       	ldi	r24, 0xE1	; 225
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_displayString>
		LCD_moveCursor(1,0);
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	60 e0       	ldi	r22, 0x00	; 0
    14b2:	0e 94 48 1c 	call	0x3890	; 0x3890 <LCD_moveCursor>
		LCD_displayString("Unlocking");
    14b6:	8a ee       	ldi	r24, 0xEA	; 234
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_displayString>
		while (UART_recieveByte() != open_the_door){}
    14be:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <UART_recieveByte>
    14c2:	8c 33       	cpi	r24, 0x3C	; 60
    14c4:	e1 f7       	brne	.-8      	; 0x14be <Open_Door+0x468>
		LCD_clearScreen();
    14c6:	0e 94 c6 1c 	call	0x398c	; 0x398c <LCD_clearScreen>
		LCD_displayString("Door is");
    14ca:	84 ef       	ldi	r24, 0xF4	; 244
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_displayString>
		LCD_moveCursor(1,0);
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	60 e0       	ldi	r22, 0x00	; 0
    14d6:	0e 94 48 1c 	call	0x3890	; 0x3890 <LCD_moveCursor>
		LCD_displayString("locking");
    14da:	8c ef       	ldi	r24, 0xFC	; 252
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_displayString>
		while (UART_recieveByte() != close_the_door) {}
    14e2:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <UART_recieveByte>
    14e6:	84 36       	cpi	r24, 0x64	; 100
    14e8:	e1 f7       	brne	.-8      	; 0x14e2 <Open_Door+0x48c>
		count = 0;
    14ea:	10 92 54 01 	sts	0x0154, r1
		LCD_clearScreen();
    14ee:	0e 94 c6 1c 	call	0x398c	; 0x398c <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    14f2:	20 e6       	ldi	r18, 0x60	; 96
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	a9 01       	movw	r20, r18
    14fc:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "- : Reset Password");
    1500:	2e e6       	ldi	r18, 0x6E	; 110
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	60 e0       	ldi	r22, 0x00	; 0
    1508:	a9 01       	movw	r20, r18
    150a:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_displayStringRowColumn>
		while (KEYPAD_getPressedKey() != '-' && KEYPAD_getPressedKey() != '+'){}
    150e:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <KEYPAD_getPressedKey>
    1512:	8d 32       	cpi	r24, 0x2D	; 45
    1514:	21 f0       	breq	.+8      	; 0x151e <Open_Door+0x4c8>
    1516:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <KEYPAD_getPressedKey>
    151a:	8b 32       	cpi	r24, 0x2B	; 43
    151c:	c1 f7       	brne	.-16     	; 0x150e <Open_Door+0x4b8>
		if(KEYPAD_getPressedKey() == '+')
    151e:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <KEYPAD_getPressedKey>
    1522:	8b 32       	cpi	r24, 0x2B	; 43
    1524:	09 f0       	breq	.+2      	; 0x1528 <Open_Door+0x4d2>
    1526:	75 c0       	rjmp	.+234    	; 0x1612 <Open_Door+0x5bc>
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	aa ef       	ldi	r26, 0xFA	; 250
    152e:	b3 e4       	ldi	r27, 0x43	; 67
    1530:	8f a3       	std	Y+39, r24	; 0x27
    1532:	98 a7       	std	Y+40, r25	; 0x28
    1534:	a9 a7       	std	Y+41, r26	; 0x29
    1536:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1538:	6f a1       	ldd	r22, Y+39	; 0x27
    153a:	78 a5       	ldd	r23, Y+40	; 0x28
    153c:	89 a5       	ldd	r24, Y+41	; 0x29
    153e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	4a ef       	ldi	r20, 0xFA	; 250
    1546:	54 e4       	ldi	r21, 0x44	; 68
    1548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	8b a3       	std	Y+35, r24	; 0x23
    1552:	9c a3       	std	Y+36, r25	; 0x24
    1554:	ad a3       	std	Y+37, r26	; 0x25
    1556:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1558:	6b a1       	ldd	r22, Y+35	; 0x23
    155a:	7c a1       	ldd	r23, Y+36	; 0x24
    155c:	8d a1       	ldd	r24, Y+37	; 0x25
    155e:	9e a1       	ldd	r25, Y+38	; 0x26
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	40 e8       	ldi	r20, 0x80	; 128
    1566:	5f e3       	ldi	r21, 0x3F	; 63
    1568:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    156c:	88 23       	and	r24, r24
    156e:	2c f4       	brge	.+10     	; 0x157a <Open_Door+0x524>
		__ticks = 1;
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	9a a3       	std	Y+34, r25	; 0x22
    1576:	89 a3       	std	Y+33, r24	; 0x21
    1578:	3f c0       	rjmp	.+126    	; 0x15f8 <Open_Door+0x5a2>
	else if (__tmp > 65535)
    157a:	6b a1       	ldd	r22, Y+35	; 0x23
    157c:	7c a1       	ldd	r23, Y+36	; 0x24
    157e:	8d a1       	ldd	r24, Y+37	; 0x25
    1580:	9e a1       	ldd	r25, Y+38	; 0x26
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	3f ef       	ldi	r19, 0xFF	; 255
    1586:	4f e7       	ldi	r20, 0x7F	; 127
    1588:	57 e4       	ldi	r21, 0x47	; 71
    158a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    158e:	18 16       	cp	r1, r24
    1590:	4c f5       	brge	.+82     	; 0x15e4 <Open_Door+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1592:	6f a1       	ldd	r22, Y+39	; 0x27
    1594:	78 a5       	ldd	r23, Y+40	; 0x28
    1596:	89 a5       	ldd	r24, Y+41	; 0x29
    1598:	9a a5       	ldd	r25, Y+42	; 0x2a
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e2       	ldi	r20, 0x20	; 32
    15a0:	51 e4       	ldi	r21, 0x41	; 65
    15a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	bc 01       	movw	r22, r24
    15ac:	cd 01       	movw	r24, r26
    15ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	9a a3       	std	Y+34, r25	; 0x22
    15b8:	89 a3       	std	Y+33, r24	; 0x21
    15ba:	0f c0       	rjmp	.+30     	; 0x15da <Open_Door+0x584>
    15bc:	88 ec       	ldi	r24, 0xC8	; 200
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	98 a3       	std	Y+32, r25	; 0x20
    15c2:	8f 8f       	std	Y+31, r24	; 0x1f
    15c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15c6:	98 a1       	ldd	r25, Y+32	; 0x20
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	f1 f7       	brne	.-4      	; 0x15c8 <Open_Door+0x572>
    15cc:	98 a3       	std	Y+32, r25	; 0x20
    15ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d0:	89 a1       	ldd	r24, Y+33	; 0x21
    15d2:	9a a1       	ldd	r25, Y+34	; 0x22
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	9a a3       	std	Y+34, r25	; 0x22
    15d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15da:	89 a1       	ldd	r24, Y+33	; 0x21
    15dc:	9a a1       	ldd	r25, Y+34	; 0x22
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	69 f7       	brne	.-38     	; 0x15bc <Open_Door+0x566>
    15e2:	14 c0       	rjmp	.+40     	; 0x160c <Open_Door+0x5b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e4:	6b a1       	ldd	r22, Y+35	; 0x23
    15e6:	7c a1       	ldd	r23, Y+36	; 0x24
    15e8:	8d a1       	ldd	r24, Y+37	; 0x25
    15ea:	9e a1       	ldd	r25, Y+38	; 0x26
    15ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	9a a3       	std	Y+34, r25	; 0x22
    15f6:	89 a3       	std	Y+33, r24	; 0x21
    15f8:	89 a1       	ldd	r24, Y+33	; 0x21
    15fa:	9a a1       	ldd	r25, Y+34	; 0x22
    15fc:	9e 8f       	std	Y+30, r25	; 0x1e
    15fe:	8d 8f       	std	Y+29, r24	; 0x1d
    1600:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1602:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	f1 f7       	brne	.-4      	; 0x1604 <Open_Door+0x5ae>
    1608:	9e 8f       	std	Y+30, r25	; 0x1e
    160a:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(500);
			Open_Door();
    160c:	0e 94 2b 08 	call	0x1056	; 0x1056 <Open_Door>
    1610:	f4 c0       	rjmp	.+488    	; 0x17fa <Open_Door+0x7a4>

		}
		else if(KEYPAD_getPressedKey() == '-')
    1612:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <KEYPAD_getPressedKey>
    1616:	8d 32       	cpi	r24, 0x2D	; 45
    1618:	09 f0       	breq	.+2      	; 0x161c <Open_Door+0x5c6>
    161a:	ef c0       	rjmp	.+478    	; 0x17fa <Open_Door+0x7a4>
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	aa ef       	ldi	r26, 0xFA	; 250
    1622:	b3 e4       	ldi	r27, 0x43	; 67
    1624:	89 8f       	std	Y+25, r24	; 0x19
    1626:	9a 8f       	std	Y+26, r25	; 0x1a
    1628:	ab 8f       	std	Y+27, r26	; 0x1b
    162a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162c:	69 8d       	ldd	r22, Y+25	; 0x19
    162e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1630:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1632:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	4a ef       	ldi	r20, 0xFA	; 250
    163a:	54 e4       	ldi	r21, 0x44	; 68
    163c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	8d 8b       	std	Y+21, r24	; 0x15
    1646:	9e 8b       	std	Y+22, r25	; 0x16
    1648:	af 8b       	std	Y+23, r26	; 0x17
    164a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    164c:	6d 89       	ldd	r22, Y+21	; 0x15
    164e:	7e 89       	ldd	r23, Y+22	; 0x16
    1650:	8f 89       	ldd	r24, Y+23	; 0x17
    1652:	98 8d       	ldd	r25, Y+24	; 0x18
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	40 e8       	ldi	r20, 0x80	; 128
    165a:	5f e3       	ldi	r21, 0x3F	; 63
    165c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1660:	88 23       	and	r24, r24
    1662:	2c f4       	brge	.+10     	; 0x166e <Open_Door+0x618>
		__ticks = 1;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	9c 8b       	std	Y+20, r25	; 0x14
    166a:	8b 8b       	std	Y+19, r24	; 0x13
    166c:	3f c0       	rjmp	.+126    	; 0x16ec <Open_Door+0x696>
	else if (__tmp > 65535)
    166e:	6d 89       	ldd	r22, Y+21	; 0x15
    1670:	7e 89       	ldd	r23, Y+22	; 0x16
    1672:	8f 89       	ldd	r24, Y+23	; 0x17
    1674:	98 8d       	ldd	r25, Y+24	; 0x18
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	3f ef       	ldi	r19, 0xFF	; 255
    167a:	4f e7       	ldi	r20, 0x7F	; 127
    167c:	57 e4       	ldi	r21, 0x47	; 71
    167e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1682:	18 16       	cp	r1, r24
    1684:	4c f5       	brge	.+82     	; 0x16d8 <Open_Door+0x682>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1686:	69 8d       	ldd	r22, Y+25	; 0x19
    1688:	7a 8d       	ldd	r23, Y+26	; 0x1a
    168a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    168c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e2       	ldi	r20, 0x20	; 32
    1694:	51 e4       	ldi	r21, 0x41	; 65
    1696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	bc 01       	movw	r22, r24
    16a0:	cd 01       	movw	r24, r26
    16a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	9c 8b       	std	Y+20, r25	; 0x14
    16ac:	8b 8b       	std	Y+19, r24	; 0x13
    16ae:	0f c0       	rjmp	.+30     	; 0x16ce <Open_Door+0x678>
    16b0:	88 ec       	ldi	r24, 0xC8	; 200
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	9a 8b       	std	Y+18, r25	; 0x12
    16b6:	89 8b       	std	Y+17, r24	; 0x11
    16b8:	89 89       	ldd	r24, Y+17	; 0x11
    16ba:	9a 89       	ldd	r25, Y+18	; 0x12
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	f1 f7       	brne	.-4      	; 0x16bc <Open_Door+0x666>
    16c0:	9a 8b       	std	Y+18, r25	; 0x12
    16c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c4:	8b 89       	ldd	r24, Y+19	; 0x13
    16c6:	9c 89       	ldd	r25, Y+20	; 0x14
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	9c 8b       	std	Y+20, r25	; 0x14
    16cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ce:	8b 89       	ldd	r24, Y+19	; 0x13
    16d0:	9c 89       	ldd	r25, Y+20	; 0x14
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	69 f7       	brne	.-38     	; 0x16b0 <Open_Door+0x65a>
    16d6:	14 c0       	rjmp	.+40     	; 0x1700 <Open_Door+0x6aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d8:	6d 89       	ldd	r22, Y+21	; 0x15
    16da:	7e 89       	ldd	r23, Y+22	; 0x16
    16dc:	8f 89       	ldd	r24, Y+23	; 0x17
    16de:	98 8d       	ldd	r25, Y+24	; 0x18
    16e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	9c 8b       	std	Y+20, r25	; 0x14
    16ea:	8b 8b       	std	Y+19, r24	; 0x13
    16ec:	8b 89       	ldd	r24, Y+19	; 0x13
    16ee:	9c 89       	ldd	r25, Y+20	; 0x14
    16f0:	98 8b       	std	Y+16, r25	; 0x10
    16f2:	8f 87       	std	Y+15, r24	; 0x0f
    16f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    16f6:	98 89       	ldd	r25, Y+16	; 0x10
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	f1 f7       	brne	.-4      	; 0x16f8 <Open_Door+0x6a2>
    16fc:	98 8b       	std	Y+16, r25	; 0x10
    16fe:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(500);
			Chanage_Password();
    1700:	0e 94 09 0c 	call	0x1812	; 0x1812 <Chanage_Password>
    1704:	7a c0       	rjmp	.+244    	; 0x17fa <Open_Door+0x7a4>
		}
	}
	else
	{
		LCD_clearScreen();
    1706:	0e 94 c6 1c 	call	0x398c	; 0x398c <LCD_clearScreen>
		LCD_displayString("Wrong Password");
    170a:	84 e0       	ldi	r24, 0x04	; 4
    170c:	91 e0       	ldi	r25, 0x01	; 1
    170e:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_displayString>
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	90 e8       	ldi	r25, 0x80	; 128
    1716:	ab e3       	ldi	r26, 0x3B	; 59
    1718:	b5 e4       	ldi	r27, 0x45	; 69
    171a:	8b 87       	std	Y+11, r24	; 0x0b
    171c:	9c 87       	std	Y+12, r25	; 0x0c
    171e:	ad 87       	std	Y+13, r26	; 0x0d
    1720:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1722:	6b 85       	ldd	r22, Y+11	; 0x0b
    1724:	7c 85       	ldd	r23, Y+12	; 0x0c
    1726:	8d 85       	ldd	r24, Y+13	; 0x0d
    1728:	9e 85       	ldd	r25, Y+14	; 0x0e
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	4a ef       	ldi	r20, 0xFA	; 250
    1730:	54 e4       	ldi	r21, 0x44	; 68
    1732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	8f 83       	std	Y+7, r24	; 0x07
    173c:	98 87       	std	Y+8, r25	; 0x08
    173e:	a9 87       	std	Y+9, r26	; 0x09
    1740:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1742:	6f 81       	ldd	r22, Y+7	; 0x07
    1744:	78 85       	ldd	r23, Y+8	; 0x08
    1746:	89 85       	ldd	r24, Y+9	; 0x09
    1748:	9a 85       	ldd	r25, Y+10	; 0x0a
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	40 e8       	ldi	r20, 0x80	; 128
    1750:	5f e3       	ldi	r21, 0x3F	; 63
    1752:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1756:	88 23       	and	r24, r24
    1758:	2c f4       	brge	.+10     	; 0x1764 <Open_Door+0x70e>
		__ticks = 1;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	9e 83       	std	Y+6, r25	; 0x06
    1760:	8d 83       	std	Y+5, r24	; 0x05
    1762:	3f c0       	rjmp	.+126    	; 0x17e2 <Open_Door+0x78c>
	else if (__tmp > 65535)
    1764:	6f 81       	ldd	r22, Y+7	; 0x07
    1766:	78 85       	ldd	r23, Y+8	; 0x08
    1768:	89 85       	ldd	r24, Y+9	; 0x09
    176a:	9a 85       	ldd	r25, Y+10	; 0x0a
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	3f ef       	ldi	r19, 0xFF	; 255
    1770:	4f e7       	ldi	r20, 0x7F	; 127
    1772:	57 e4       	ldi	r21, 0x47	; 71
    1774:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1778:	18 16       	cp	r1, r24
    177a:	4c f5       	brge	.+82     	; 0x17ce <Open_Door+0x778>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177c:	6b 85       	ldd	r22, Y+11	; 0x0b
    177e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1780:	8d 85       	ldd	r24, Y+13	; 0x0d
    1782:	9e 85       	ldd	r25, Y+14	; 0x0e
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	40 e2       	ldi	r20, 0x20	; 32
    178a:	51 e4       	ldi	r21, 0x41	; 65
    178c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	bc 01       	movw	r22, r24
    1796:	cd 01       	movw	r24, r26
    1798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	9e 83       	std	Y+6, r25	; 0x06
    17a2:	8d 83       	std	Y+5, r24	; 0x05
    17a4:	0f c0       	rjmp	.+30     	; 0x17c4 <Open_Door+0x76e>
    17a6:	88 ec       	ldi	r24, 0xC8	; 200
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	9c 83       	std	Y+4, r25	; 0x04
    17ac:	8b 83       	std	Y+3, r24	; 0x03
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	9c 81       	ldd	r25, Y+4	; 0x04
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <Open_Door+0x75c>
    17b6:	9c 83       	std	Y+4, r25	; 0x04
    17b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ba:	8d 81       	ldd	r24, Y+5	; 0x05
    17bc:	9e 81       	ldd	r25, Y+6	; 0x06
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	9e 83       	std	Y+6, r25	; 0x06
    17c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c4:	8d 81       	ldd	r24, Y+5	; 0x05
    17c6:	9e 81       	ldd	r25, Y+6	; 0x06
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	69 f7       	brne	.-38     	; 0x17a6 <Open_Door+0x750>
    17cc:	14 c0       	rjmp	.+40     	; 0x17f6 <Open_Door+0x7a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ce:	6f 81       	ldd	r22, Y+7	; 0x07
    17d0:	78 85       	ldd	r23, Y+8	; 0x08
    17d2:	89 85       	ldd	r24, Y+9	; 0x09
    17d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	9e 83       	std	Y+6, r25	; 0x06
    17e0:	8d 83       	std	Y+5, r24	; 0x05
    17e2:	8d 81       	ldd	r24, Y+5	; 0x05
    17e4:	9e 81       	ldd	r25, Y+6	; 0x06
    17e6:	9a 83       	std	Y+2, r25	; 0x02
    17e8:	89 83       	std	Y+1, r24	; 0x01
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	9a 81       	ldd	r25, Y+2	; 0x02
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	f1 f7       	brne	.-4      	; 0x17ee <Open_Door+0x798>
    17f2:	9a 83       	std	Y+2, r25	; 0x02
    17f4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3000);
		Open_Door();
    17f6:	0e 94 2b 08 	call	0x1056	; 0x1056 <Open_Door>

	}

}
    17fa:	c7 5a       	subi	r28, 0xA7	; 167
    17fc:	df 4f       	sbci	r29, 0xFF	; 255
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	cd bf       	out	0x3d, r28	; 61
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	1f 91       	pop	r17
    180e:	0f 91       	pop	r16
    1810:	08 95       	ret

00001812 <Chanage_Password>:



void Chanage_Password(void)
{
    1812:	0f 93       	push	r16
    1814:	1f 93       	push	r17
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	c7 56       	subi	r28, 0x67	; 103
    1820:	d0 40       	sbci	r29, 0x00	; 0
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
	uint8 Enter_password[PASSWORD_SIZE];
	count1++;
    182c:	80 91 55 01 	lds	r24, 0x0155
    1830:	8f 5f       	subi	r24, 0xFF	; 255
    1832:	80 93 55 01 	sts	0x0155, r24
	if (count1 == 4) {
    1836:	80 91 55 01 	lds	r24, 0x0155
    183a:	84 30       	cpi	r24, 0x04	; 4
    183c:	09 f0       	breq	.+2      	; 0x1840 <Chanage_Password+0x2e>
    183e:	24 c2       	rjmp	.+1096   	; 0x1c88 <Chanage_Password+0x476>
		LCD_clearScreen();
    1840:	0e 94 c6 1c 	call	0x398c	; 0x398c <LCD_clearScreen>
		UART_sendByte(Turn_on_buzzer);
    1844:	80 e5       	ldi	r24, 0x50	; 80
    1846:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <UART_sendByte>
		LCD_displayStringRowColumn(0, 0, "Unsafe Condition");
    184a:	23 e1       	ldi	r18, 0x13	; 19
    184c:	31 e0       	ldi	r19, 0x01	; 1
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	a9 01       	movw	r20, r18
    1854:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_displayStringRowColumn>
    1858:	fe 01       	movw	r30, r28
    185a:	e1 5a       	subi	r30, 0xA1	; 161
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	aa ef       	ldi	r26, 0xFA	; 250
    1864:	b3 e4       	ldi	r27, 0x43	; 67
    1866:	80 83       	st	Z, r24
    1868:	91 83       	std	Z+1, r25	; 0x01
    186a:	a2 83       	std	Z+2, r26	; 0x02
    186c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    186e:	8e 01       	movw	r16, r28
    1870:	05 5a       	subi	r16, 0xA5	; 165
    1872:	1f 4f       	sbci	r17, 0xFF	; 255
    1874:	fe 01       	movw	r30, r28
    1876:	e1 5a       	subi	r30, 0xA1	; 161
    1878:	ff 4f       	sbci	r31, 0xFF	; 255
    187a:	60 81       	ld	r22, Z
    187c:	71 81       	ldd	r23, Z+1	; 0x01
    187e:	82 81       	ldd	r24, Z+2	; 0x02
    1880:	93 81       	ldd	r25, Z+3	; 0x03
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	4a ef       	ldi	r20, 0xFA	; 250
    1888:	54 e4       	ldi	r21, 0x44	; 68
    188a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	f8 01       	movw	r30, r16
    1894:	80 83       	st	Z, r24
    1896:	91 83       	std	Z+1, r25	; 0x01
    1898:	a2 83       	std	Z+2, r26	; 0x02
    189a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    189c:	fe 01       	movw	r30, r28
    189e:	e5 5a       	subi	r30, 0xA5	; 165
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	60 81       	ld	r22, Z
    18a4:	71 81       	ldd	r23, Z+1	; 0x01
    18a6:	82 81       	ldd	r24, Z+2	; 0x02
    18a8:	93 81       	ldd	r25, Z+3	; 0x03
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	40 e8       	ldi	r20, 0x80	; 128
    18b0:	5f e3       	ldi	r21, 0x3F	; 63
    18b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18b6:	88 23       	and	r24, r24
    18b8:	44 f4       	brge	.+16     	; 0x18ca <Chanage_Password+0xb8>
		__ticks = 1;
    18ba:	fe 01       	movw	r30, r28
    18bc:	e7 5a       	subi	r30, 0xA7	; 167
    18be:	ff 4f       	sbci	r31, 0xFF	; 255
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	91 83       	std	Z+1, r25	; 0x01
    18c6:	80 83       	st	Z, r24
    18c8:	64 c0       	rjmp	.+200    	; 0x1992 <Chanage_Password+0x180>
	else if (__tmp > 65535)
    18ca:	fe 01       	movw	r30, r28
    18cc:	e5 5a       	subi	r30, 0xA5	; 165
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	60 81       	ld	r22, Z
    18d2:	71 81       	ldd	r23, Z+1	; 0x01
    18d4:	82 81       	ldd	r24, Z+2	; 0x02
    18d6:	93 81       	ldd	r25, Z+3	; 0x03
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	3f ef       	ldi	r19, 0xFF	; 255
    18dc:	4f e7       	ldi	r20, 0x7F	; 127
    18de:	57 e4       	ldi	r21, 0x47	; 71
    18e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e4:	18 16       	cp	r1, r24
    18e6:	0c f0       	brlt	.+2      	; 0x18ea <Chanage_Password+0xd8>
    18e8:	43 c0       	rjmp	.+134    	; 0x1970 <Chanage_Password+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ea:	fe 01       	movw	r30, r28
    18ec:	e1 5a       	subi	r30, 0xA1	; 161
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	60 81       	ld	r22, Z
    18f2:	71 81       	ldd	r23, Z+1	; 0x01
    18f4:	82 81       	ldd	r24, Z+2	; 0x02
    18f6:	93 81       	ldd	r25, Z+3	; 0x03
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e2       	ldi	r20, 0x20	; 32
    18fe:	51 e4       	ldi	r21, 0x41	; 65
    1900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	8e 01       	movw	r16, r28
    190a:	07 5a       	subi	r16, 0xA7	; 167
    190c:	1f 4f       	sbci	r17, 0xFF	; 255
    190e:	bc 01       	movw	r22, r24
    1910:	cd 01       	movw	r24, r26
    1912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	f8 01       	movw	r30, r16
    191c:	91 83       	std	Z+1, r25	; 0x01
    191e:	80 83       	st	Z, r24
    1920:	1f c0       	rjmp	.+62     	; 0x1960 <Chanage_Password+0x14e>
    1922:	fe 01       	movw	r30, r28
    1924:	e9 5a       	subi	r30, 0xA9	; 169
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	88 ec       	ldi	r24, 0xC8	; 200
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	91 83       	std	Z+1, r25	; 0x01
    192e:	80 83       	st	Z, r24
    1930:	fe 01       	movw	r30, r28
    1932:	e9 5a       	subi	r30, 0xA9	; 169
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	80 81       	ld	r24, Z
    1938:	91 81       	ldd	r25, Z+1	; 0x01
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	f1 f7       	brne	.-4      	; 0x193a <Chanage_Password+0x128>
    193e:	fe 01       	movw	r30, r28
    1940:	e9 5a       	subi	r30, 0xA9	; 169
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	91 83       	std	Z+1, r25	; 0x01
    1946:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1948:	de 01       	movw	r26, r28
    194a:	a7 5a       	subi	r26, 0xA7	; 167
    194c:	bf 4f       	sbci	r27, 0xFF	; 255
    194e:	fe 01       	movw	r30, r28
    1950:	e7 5a       	subi	r30, 0xA7	; 167
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	80 81       	ld	r24, Z
    1956:	91 81       	ldd	r25, Z+1	; 0x01
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	11 96       	adiw	r26, 0x01	; 1
    195c:	9c 93       	st	X, r25
    195e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1960:	fe 01       	movw	r30, r28
    1962:	e7 5a       	subi	r30, 0xA7	; 167
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	80 81       	ld	r24, Z
    1968:	91 81       	ldd	r25, Z+1	; 0x01
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	d1 f6       	brne	.-76     	; 0x1922 <Chanage_Password+0x110>
    196e:	27 c0       	rjmp	.+78     	; 0x19be <Chanage_Password+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1970:	8e 01       	movw	r16, r28
    1972:	07 5a       	subi	r16, 0xA7	; 167
    1974:	1f 4f       	sbci	r17, 0xFF	; 255
    1976:	fe 01       	movw	r30, r28
    1978:	e5 5a       	subi	r30, 0xA5	; 165
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	60 81       	ld	r22, Z
    197e:	71 81       	ldd	r23, Z+1	; 0x01
    1980:	82 81       	ldd	r24, Z+2	; 0x02
    1982:	93 81       	ldd	r25, Z+3	; 0x03
    1984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	f8 01       	movw	r30, r16
    198e:	91 83       	std	Z+1, r25	; 0x01
    1990:	80 83       	st	Z, r24
    1992:	de 01       	movw	r26, r28
    1994:	ab 5a       	subi	r26, 0xAB	; 171
    1996:	bf 4f       	sbci	r27, 0xFF	; 255
    1998:	fe 01       	movw	r30, r28
    199a:	e7 5a       	subi	r30, 0xA7	; 167
    199c:	ff 4f       	sbci	r31, 0xFF	; 255
    199e:	80 81       	ld	r24, Z
    19a0:	91 81       	ldd	r25, Z+1	; 0x01
    19a2:	8d 93       	st	X+, r24
    19a4:	9c 93       	st	X, r25
    19a6:	fe 01       	movw	r30, r28
    19a8:	eb 5a       	subi	r30, 0xAB	; 171
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	80 81       	ld	r24, Z
    19ae:	91 81       	ldd	r25, Z+1	; 0x01
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	f1 f7       	brne	.-4      	; 0x19b0 <Chanage_Password+0x19e>
    19b4:	fe 01       	movw	r30, r28
    19b6:	eb 5a       	subi	r30, 0xAB	; 171
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	91 83       	std	Z+1, r25	; 0x01
    19bc:	80 83       	st	Z, r24
		_delay_ms(500);
		while (UART_recieveByte() != Turn_off_buzzer){}
    19be:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <UART_recieveByte>
    19c2:	85 35       	cpi	r24, 0x55	; 85
    19c4:	e1 f7       	brne	.-8      	; 0x19be <Chanage_Password+0x1ac>
		count1 = 0;
    19c6:	10 92 55 01 	sts	0x0155, r1
		LCD_clearScreen();
    19ca:	0e 94 c6 1c 	call	0x398c	; 0x398c <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    19ce:	20 e6       	ldi	r18, 0x60	; 96
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	60 e0       	ldi	r22, 0x00	; 0
    19d6:	a9 01       	movw	r20, r18
    19d8:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "- : Reset Password");
    19dc:	2e e6       	ldi	r18, 0x6E	; 110
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	60 e0       	ldi	r22, 0x00	; 0
    19e4:	a9 01       	movw	r20, r18
    19e6:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_displayStringRowColumn>
		while (KEYPAD_getPressedKey() != '-' && KEYPAD_getPressedKey() != '+'){}
    19ea:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <KEYPAD_getPressedKey>
    19ee:	8d 32       	cpi	r24, 0x2D	; 45
    19f0:	21 f0       	breq	.+8      	; 0x19fa <Chanage_Password+0x1e8>
    19f2:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <KEYPAD_getPressedKey>
    19f6:	8b 32       	cpi	r24, 0x2B	; 43
    19f8:	c1 f7       	brne	.-16     	; 0x19ea <Chanage_Password+0x1d8>
		if(KEYPAD_getPressedKey() == '+')
    19fa:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <KEYPAD_getPressedKey>
    19fe:	8b 32       	cpi	r24, 0x2B	; 43
    1a00:	09 f0       	breq	.+2      	; 0x1a04 <Chanage_Password+0x1f2>
    1a02:	b6 c0       	rjmp	.+364    	; 0x1b70 <Chanage_Password+0x35e>
    1a04:	fe 01       	movw	r30, r28
    1a06:	ef 5a       	subi	r30, 0xAF	; 175
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	aa ef       	ldi	r26, 0xFA	; 250
    1a10:	b3 e4       	ldi	r27, 0x43	; 67
    1a12:	80 83       	st	Z, r24
    1a14:	91 83       	std	Z+1, r25	; 0x01
    1a16:	a2 83       	std	Z+2, r26	; 0x02
    1a18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1a:	8e 01       	movw	r16, r28
    1a1c:	03 5b       	subi	r16, 0xB3	; 179
    1a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a20:	fe 01       	movw	r30, r28
    1a22:	ef 5a       	subi	r30, 0xAF	; 175
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	60 81       	ld	r22, Z
    1a28:	71 81       	ldd	r23, Z+1	; 0x01
    1a2a:	82 81       	ldd	r24, Z+2	; 0x02
    1a2c:	93 81       	ldd	r25, Z+3	; 0x03
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	4a ef       	ldi	r20, 0xFA	; 250
    1a34:	54 e4       	ldi	r21, 0x44	; 68
    1a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	f8 01       	movw	r30, r16
    1a40:	80 83       	st	Z, r24
    1a42:	91 83       	std	Z+1, r25	; 0x01
    1a44:	a2 83       	std	Z+2, r26	; 0x02
    1a46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a48:	fe 01       	movw	r30, r28
    1a4a:	e3 5b       	subi	r30, 0xB3	; 179
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	60 81       	ld	r22, Z
    1a50:	71 81       	ldd	r23, Z+1	; 0x01
    1a52:	82 81       	ldd	r24, Z+2	; 0x02
    1a54:	93 81       	ldd	r25, Z+3	; 0x03
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e8       	ldi	r20, 0x80	; 128
    1a5c:	5f e3       	ldi	r21, 0x3F	; 63
    1a5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a62:	88 23       	and	r24, r24
    1a64:	44 f4       	brge	.+16     	; 0x1a76 <Chanage_Password+0x264>
		__ticks = 1;
    1a66:	fe 01       	movw	r30, r28
    1a68:	e5 5b       	subi	r30, 0xB5	; 181
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	91 83       	std	Z+1, r25	; 0x01
    1a72:	80 83       	st	Z, r24
    1a74:	64 c0       	rjmp	.+200    	; 0x1b3e <Chanage_Password+0x32c>
	else if (__tmp > 65535)
    1a76:	fe 01       	movw	r30, r28
    1a78:	e3 5b       	subi	r30, 0xB3	; 179
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	60 81       	ld	r22, Z
    1a7e:	71 81       	ldd	r23, Z+1	; 0x01
    1a80:	82 81       	ldd	r24, Z+2	; 0x02
    1a82:	93 81       	ldd	r25, Z+3	; 0x03
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	3f ef       	ldi	r19, 0xFF	; 255
    1a88:	4f e7       	ldi	r20, 0x7F	; 127
    1a8a:	57 e4       	ldi	r21, 0x47	; 71
    1a8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a90:	18 16       	cp	r1, r24
    1a92:	0c f0       	brlt	.+2      	; 0x1a96 <Chanage_Password+0x284>
    1a94:	43 c0       	rjmp	.+134    	; 0x1b1c <Chanage_Password+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a96:	fe 01       	movw	r30, r28
    1a98:	ef 5a       	subi	r30, 0xAF	; 175
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	60 81       	ld	r22, Z
    1a9e:	71 81       	ldd	r23, Z+1	; 0x01
    1aa0:	82 81       	ldd	r24, Z+2	; 0x02
    1aa2:	93 81       	ldd	r25, Z+3	; 0x03
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e2       	ldi	r20, 0x20	; 32
    1aaa:	51 e4       	ldi	r21, 0x41	; 65
    1aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	8e 01       	movw	r16, r28
    1ab6:	05 5b       	subi	r16, 0xB5	; 181
    1ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aba:	bc 01       	movw	r22, r24
    1abc:	cd 01       	movw	r24, r26
    1abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	f8 01       	movw	r30, r16
    1ac8:	91 83       	std	Z+1, r25	; 0x01
    1aca:	80 83       	st	Z, r24
    1acc:	1f c0       	rjmp	.+62     	; 0x1b0c <Chanage_Password+0x2fa>
    1ace:	fe 01       	movw	r30, r28
    1ad0:	e7 5b       	subi	r30, 0xB7	; 183
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	88 ec       	ldi	r24, 0xC8	; 200
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	91 83       	std	Z+1, r25	; 0x01
    1ada:	80 83       	st	Z, r24
    1adc:	fe 01       	movw	r30, r28
    1ade:	e7 5b       	subi	r30, 0xB7	; 183
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	80 81       	ld	r24, Z
    1ae4:	91 81       	ldd	r25, Z+1	; 0x01
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	f1 f7       	brne	.-4      	; 0x1ae6 <Chanage_Password+0x2d4>
    1aea:	fe 01       	movw	r30, r28
    1aec:	e7 5b       	subi	r30, 0xB7	; 183
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	91 83       	std	Z+1, r25	; 0x01
    1af2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af4:	de 01       	movw	r26, r28
    1af6:	a5 5b       	subi	r26, 0xB5	; 181
    1af8:	bf 4f       	sbci	r27, 0xFF	; 255
    1afa:	fe 01       	movw	r30, r28
    1afc:	e5 5b       	subi	r30, 0xB5	; 181
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	80 81       	ld	r24, Z
    1b02:	91 81       	ldd	r25, Z+1	; 0x01
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	11 96       	adiw	r26, 0x01	; 1
    1b08:	9c 93       	st	X, r25
    1b0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	e5 5b       	subi	r30, 0xB5	; 181
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	80 81       	ld	r24, Z
    1b14:	91 81       	ldd	r25, Z+1	; 0x01
    1b16:	00 97       	sbiw	r24, 0x00	; 0
    1b18:	d1 f6       	brne	.-76     	; 0x1ace <Chanage_Password+0x2bc>
    1b1a:	27 c0       	rjmp	.+78     	; 0x1b6a <Chanage_Password+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1c:	8e 01       	movw	r16, r28
    1b1e:	05 5b       	subi	r16, 0xB5	; 181
    1b20:	1f 4f       	sbci	r17, 0xFF	; 255
    1b22:	fe 01       	movw	r30, r28
    1b24:	e3 5b       	subi	r30, 0xB3	; 179
    1b26:	ff 4f       	sbci	r31, 0xFF	; 255
    1b28:	60 81       	ld	r22, Z
    1b2a:	71 81       	ldd	r23, Z+1	; 0x01
    1b2c:	82 81       	ldd	r24, Z+2	; 0x02
    1b2e:	93 81       	ldd	r25, Z+3	; 0x03
    1b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	f8 01       	movw	r30, r16
    1b3a:	91 83       	std	Z+1, r25	; 0x01
    1b3c:	80 83       	st	Z, r24
    1b3e:	de 01       	movw	r26, r28
    1b40:	a9 5b       	subi	r26, 0xB9	; 185
    1b42:	bf 4f       	sbci	r27, 0xFF	; 255
    1b44:	fe 01       	movw	r30, r28
    1b46:	e5 5b       	subi	r30, 0xB5	; 181
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	80 81       	ld	r24, Z
    1b4c:	91 81       	ldd	r25, Z+1	; 0x01
    1b4e:	8d 93       	st	X+, r24
    1b50:	9c 93       	st	X, r25
    1b52:	fe 01       	movw	r30, r28
    1b54:	e9 5b       	subi	r30, 0xB9	; 185
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	80 81       	ld	r24, Z
    1b5a:	91 81       	ldd	r25, Z+1	; 0x01
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	f1 f7       	brne	.-4      	; 0x1b5c <Chanage_Password+0x34a>
    1b60:	fe 01       	movw	r30, r28
    1b62:	e9 5b       	subi	r30, 0xB9	; 185
    1b64:	ff 4f       	sbci	r31, 0xFF	; 255
    1b66:	91 83       	std	Z+1, r25	; 0x01
    1b68:	80 83       	st	Z, r24
		{
			_delay_ms(500);
			Open_Door();
    1b6a:	0e 94 2b 08 	call	0x1056	; 0x1056 <Open_Door>
    1b6e:	8c c0       	rjmp	.+280    	; 0x1c88 <Chanage_Password+0x476>

		}
		else if(KEYPAD_getPressedKey() == '-')
    1b70:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <KEYPAD_getPressedKey>
    1b74:	8d 32       	cpi	r24, 0x2D	; 45
    1b76:	09 f0       	breq	.+2      	; 0x1b7a <Chanage_Password+0x368>
    1b78:	87 c0       	rjmp	.+270    	; 0x1c88 <Chanage_Password+0x476>
    1b7a:	fe 01       	movw	r30, r28
    1b7c:	ed 5b       	subi	r30, 0xBD	; 189
    1b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	aa ef       	ldi	r26, 0xFA	; 250
    1b86:	b3 e4       	ldi	r27, 0x43	; 67
    1b88:	80 83       	st	Z, r24
    1b8a:	91 83       	std	Z+1, r25	; 0x01
    1b8c:	a2 83       	std	Z+2, r26	; 0x02
    1b8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b90:	8e 01       	movw	r16, r28
    1b92:	01 5c       	subi	r16, 0xC1	; 193
    1b94:	1f 4f       	sbci	r17, 0xFF	; 255
    1b96:	fe 01       	movw	r30, r28
    1b98:	ed 5b       	subi	r30, 0xBD	; 189
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	60 81       	ld	r22, Z
    1b9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ba0:	82 81       	ldd	r24, Z+2	; 0x02
    1ba2:	93 81       	ldd	r25, Z+3	; 0x03
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	4a ef       	ldi	r20, 0xFA	; 250
    1baa:	54 e4       	ldi	r21, 0x44	; 68
    1bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	f8 01       	movw	r30, r16
    1bb6:	80 83       	st	Z, r24
    1bb8:	91 83       	std	Z+1, r25	; 0x01
    1bba:	a2 83       	std	Z+2, r26	; 0x02
    1bbc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	ff 96       	adiw	r30, 0x3f	; 63
    1bc2:	60 81       	ld	r22, Z
    1bc4:	71 81       	ldd	r23, Z+1	; 0x01
    1bc6:	82 81       	ldd	r24, Z+2	; 0x02
    1bc8:	93 81       	ldd	r25, Z+3	; 0x03
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	40 e8       	ldi	r20, 0x80	; 128
    1bd0:	5f e3       	ldi	r21, 0x3F	; 63
    1bd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bd6:	88 23       	and	r24, r24
    1bd8:	2c f4       	brge	.+10     	; 0x1be4 <Chanage_Password+0x3d2>
		__ticks = 1;
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	9e af       	std	Y+62, r25	; 0x3e
    1be0:	8d af       	std	Y+61, r24	; 0x3d
    1be2:	46 c0       	rjmp	.+140    	; 0x1c70 <Chanage_Password+0x45e>
	else if (__tmp > 65535)
    1be4:	fe 01       	movw	r30, r28
    1be6:	ff 96       	adiw	r30, 0x3f	; 63
    1be8:	60 81       	ld	r22, Z
    1bea:	71 81       	ldd	r23, Z+1	; 0x01
    1bec:	82 81       	ldd	r24, Z+2	; 0x02
    1bee:	93 81       	ldd	r25, Z+3	; 0x03
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	3f ef       	ldi	r19, 0xFF	; 255
    1bf4:	4f e7       	ldi	r20, 0x7F	; 127
    1bf6:	57 e4       	ldi	r21, 0x47	; 71
    1bf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bfc:	18 16       	cp	r1, r24
    1bfe:	64 f5       	brge	.+88     	; 0x1c58 <Chanage_Password+0x446>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c00:	fe 01       	movw	r30, r28
    1c02:	ed 5b       	subi	r30, 0xBD	; 189
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	60 81       	ld	r22, Z
    1c08:	71 81       	ldd	r23, Z+1	; 0x01
    1c0a:	82 81       	ldd	r24, Z+2	; 0x02
    1c0c:	93 81       	ldd	r25, Z+3	; 0x03
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e2       	ldi	r20, 0x20	; 32
    1c14:	51 e4       	ldi	r21, 0x41	; 65
    1c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	bc 01       	movw	r22, r24
    1c20:	cd 01       	movw	r24, r26
    1c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	9e af       	std	Y+62, r25	; 0x3e
    1c2c:	8d af       	std	Y+61, r24	; 0x3d
    1c2e:	0f c0       	rjmp	.+30     	; 0x1c4e <Chanage_Password+0x43c>
    1c30:	88 ec       	ldi	r24, 0xC8	; 200
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	9c af       	std	Y+60, r25	; 0x3c
    1c36:	8b af       	std	Y+59, r24	; 0x3b
    1c38:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c3a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <Chanage_Password+0x42a>
    1c40:	9c af       	std	Y+60, r25	; 0x3c
    1c42:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c44:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c46:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	9e af       	std	Y+62, r25	; 0x3e
    1c4c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c50:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	69 f7       	brne	.-38     	; 0x1c30 <Chanage_Password+0x41e>
    1c56:	16 c0       	rjmp	.+44     	; 0x1c84 <Chanage_Password+0x472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c58:	fe 01       	movw	r30, r28
    1c5a:	ff 96       	adiw	r30, 0x3f	; 63
    1c5c:	60 81       	ld	r22, Z
    1c5e:	71 81       	ldd	r23, Z+1	; 0x01
    1c60:	82 81       	ldd	r24, Z+2	; 0x02
    1c62:	93 81       	ldd	r25, Z+3	; 0x03
    1c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	9e af       	std	Y+62, r25	; 0x3e
    1c6e:	8d af       	std	Y+61, r24	; 0x3d
    1c70:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c72:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c74:	9a af       	std	Y+58, r25	; 0x3a
    1c76:	89 af       	std	Y+57, r24	; 0x39
    1c78:	89 ad       	ldd	r24, Y+57	; 0x39
    1c7a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <Chanage_Password+0x46a>
    1c80:	9a af       	std	Y+58, r25	; 0x3a
    1c82:	89 af       	std	Y+57, r24	; 0x39
		{
			_delay_ms(500);
			Chanage_Password();
    1c84:	0e 94 09 0c 	call	0x1812	; 0x1812 <Chanage_Password>
		}
	}
	LCD_clearScreen();
    1c88:	0e 94 c6 1c 	call	0x398c	; 0x398c <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Enter Password");
    1c8c:	24 e2       	ldi	r18, 0x24	; 36
    1c8e:	31 e0       	ldi	r19, 0x01	; 1
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	60 e0       	ldi	r22, 0x00	; 0
    1c94:	a9 01       	movw	r20, r18
    1c96:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	60 e0       	ldi	r22, 0x00	; 0
    1c9e:	0e 94 48 1c 	call	0x3890	; 0x3890 <LCD_moveCursor>
	Get_Password(Enter_password);
    1ca2:	ce 01       	movw	r24, r28
    1ca4:	8d 59       	subi	r24, 0x9D	; 157
    1ca6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca8:	0e 94 74 10 	call	0x20e8	; 0x20e8 <Get_Password>

	UART_sendByte(Enter_PASSWORD);
    1cac:	84 e1       	ldi	r24, 0x14	; 20
    1cae:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <UART_sendByte>
	Send_password(Enter_password);
    1cb2:	ce 01       	movw	r24, r28
    1cb4:	8d 59       	subi	r24, 0x9D	; 157
    1cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb8:	0e 94 4c 11 	call	0x2298	; 0x2298 <Send_password>
	UART_sendByte(UART_Ready);
    1cbc:	86 e4       	ldi	r24, 0x46	; 70
    1cbe:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <UART_sendByte>

	if(UART_recieveByte() == TRUE)//matching password
    1cc2:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <UART_recieveByte>
    1cc6:	81 30       	cpi	r24, 0x01	; 1
    1cc8:	09 f0       	breq	.+2      	; 0x1ccc <Chanage_Password+0x4ba>
    1cca:	88 c1       	rjmp	.+784    	; 0x1fdc <Chanage_Password+0x7ca>
	{
		Create_password();
    1ccc:	0e 94 e5 06 	call	0xdca	; 0xdca <Create_password>
		LCD_clearScreen();
    1cd0:	0e 94 c6 1c 	call	0x398c	; 0x398c <LCD_clearScreen>
		LCD_displayString("Password changed!");
    1cd4:	83 e3       	ldi	r24, 0x33	; 51
    1cd6:	91 e0       	ldi	r25, 0x01	; 1
    1cd8:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_displayString>
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	aa ef       	ldi	r26, 0xFA	; 250
    1ce2:	b3 e4       	ldi	r27, 0x43	; 67
    1ce4:	8d ab       	std	Y+53, r24	; 0x35
    1ce6:	9e ab       	std	Y+54, r25	; 0x36
    1ce8:	af ab       	std	Y+55, r26	; 0x37
    1cea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cec:	6d a9       	ldd	r22, Y+53	; 0x35
    1cee:	7e a9       	ldd	r23, Y+54	; 0x36
    1cf0:	8f a9       	ldd	r24, Y+55	; 0x37
    1cf2:	98 ad       	ldd	r25, Y+56	; 0x38
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	4a ef       	ldi	r20, 0xFA	; 250
    1cfa:	54 e4       	ldi	r21, 0x44	; 68
    1cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	89 ab       	std	Y+49, r24	; 0x31
    1d06:	9a ab       	std	Y+50, r25	; 0x32
    1d08:	ab ab       	std	Y+51, r26	; 0x33
    1d0a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d0c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d0e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d10:	8b a9       	ldd	r24, Y+51	; 0x33
    1d12:	9c a9       	ldd	r25, Y+52	; 0x34
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	40 e8       	ldi	r20, 0x80	; 128
    1d1a:	5f e3       	ldi	r21, 0x3F	; 63
    1d1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d20:	88 23       	and	r24, r24
    1d22:	2c f4       	brge	.+10     	; 0x1d2e <Chanage_Password+0x51c>
		__ticks = 1;
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	98 ab       	std	Y+48, r25	; 0x30
    1d2a:	8f a7       	std	Y+47, r24	; 0x2f
    1d2c:	3f c0       	rjmp	.+126    	; 0x1dac <Chanage_Password+0x59a>
	else if (__tmp > 65535)
    1d2e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d30:	7a a9       	ldd	r23, Y+50	; 0x32
    1d32:	8b a9       	ldd	r24, Y+51	; 0x33
    1d34:	9c a9       	ldd	r25, Y+52	; 0x34
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	3f ef       	ldi	r19, 0xFF	; 255
    1d3a:	4f e7       	ldi	r20, 0x7F	; 127
    1d3c:	57 e4       	ldi	r21, 0x47	; 71
    1d3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d42:	18 16       	cp	r1, r24
    1d44:	4c f5       	brge	.+82     	; 0x1d98 <Chanage_Password+0x586>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d46:	6d a9       	ldd	r22, Y+53	; 0x35
    1d48:	7e a9       	ldd	r23, Y+54	; 0x36
    1d4a:	8f a9       	ldd	r24, Y+55	; 0x37
    1d4c:	98 ad       	ldd	r25, Y+56	; 0x38
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e2       	ldi	r20, 0x20	; 32
    1d54:	51 e4       	ldi	r21, 0x41	; 65
    1d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	bc 01       	movw	r22, r24
    1d60:	cd 01       	movw	r24, r26
    1d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	98 ab       	std	Y+48, r25	; 0x30
    1d6c:	8f a7       	std	Y+47, r24	; 0x2f
    1d6e:	0f c0       	rjmp	.+30     	; 0x1d8e <Chanage_Password+0x57c>
    1d70:	88 ec       	ldi	r24, 0xC8	; 200
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	9e a7       	std	Y+46, r25	; 0x2e
    1d76:	8d a7       	std	Y+45, r24	; 0x2d
    1d78:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d7a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <Chanage_Password+0x56a>
    1d80:	9e a7       	std	Y+46, r25	; 0x2e
    1d82:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d84:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d86:	98 a9       	ldd	r25, Y+48	; 0x30
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	98 ab       	std	Y+48, r25	; 0x30
    1d8c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d90:	98 a9       	ldd	r25, Y+48	; 0x30
    1d92:	00 97       	sbiw	r24, 0x00	; 0
    1d94:	69 f7       	brne	.-38     	; 0x1d70 <Chanage_Password+0x55e>
    1d96:	14 c0       	rjmp	.+40     	; 0x1dc0 <Chanage_Password+0x5ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d98:	69 a9       	ldd	r22, Y+49	; 0x31
    1d9a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d9c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d9e:	9c a9       	ldd	r25, Y+52	; 0x34
    1da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	98 ab       	std	Y+48, r25	; 0x30
    1daa:	8f a7       	std	Y+47, r24	; 0x2f
    1dac:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dae:	98 a9       	ldd	r25, Y+48	; 0x30
    1db0:	9c a7       	std	Y+44, r25	; 0x2c
    1db2:	8b a7       	std	Y+43, r24	; 0x2b
    1db4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1db6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	f1 f7       	brne	.-4      	; 0x1db8 <Chanage_Password+0x5a6>
    1dbc:	9c a7       	std	Y+44, r25	; 0x2c
    1dbe:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(500);
		count1 = 0;
    1dc0:	10 92 55 01 	sts	0x0155, r1
		LCD_clearScreen();
    1dc4:	0e 94 c6 1c 	call	0x398c	; 0x398c <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    1dc8:	20 e6       	ldi	r18, 0x60	; 96
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	60 e0       	ldi	r22, 0x00	; 0
    1dd0:	a9 01       	movw	r20, r18
    1dd2:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "- : Reset Password");
    1dd6:	2e e6       	ldi	r18, 0x6E	; 110
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	60 e0       	ldi	r22, 0x00	; 0
    1dde:	a9 01       	movw	r20, r18
    1de0:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_displayStringRowColumn>
		while (KEYPAD_getPressedKey() != '-' && KEYPAD_getPressedKey() != '+'){}
    1de4:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <KEYPAD_getPressedKey>
    1de8:	8d 32       	cpi	r24, 0x2D	; 45
    1dea:	21 f0       	breq	.+8      	; 0x1df4 <Chanage_Password+0x5e2>
    1dec:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <KEYPAD_getPressedKey>
    1df0:	8b 32       	cpi	r24, 0x2B	; 43
    1df2:	c1 f7       	brne	.-16     	; 0x1de4 <Chanage_Password+0x5d2>
		if(KEYPAD_getPressedKey() == '+')
    1df4:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <KEYPAD_getPressedKey>
    1df8:	8b 32       	cpi	r24, 0x2B	; 43
    1dfa:	09 f0       	breq	.+2      	; 0x1dfe <Chanage_Password+0x5ec>
    1dfc:	75 c0       	rjmp	.+234    	; 0x1ee8 <Chanage_Password+0x6d6>
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	aa ef       	ldi	r26, 0xFA	; 250
    1e04:	b3 e4       	ldi	r27, 0x43	; 67
    1e06:	8f a3       	std	Y+39, r24	; 0x27
    1e08:	98 a7       	std	Y+40, r25	; 0x28
    1e0a:	a9 a7       	std	Y+41, r26	; 0x29
    1e0c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e0e:	6f a1       	ldd	r22, Y+39	; 0x27
    1e10:	78 a5       	ldd	r23, Y+40	; 0x28
    1e12:	89 a5       	ldd	r24, Y+41	; 0x29
    1e14:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	4a ef       	ldi	r20, 0xFA	; 250
    1e1c:	54 e4       	ldi	r21, 0x44	; 68
    1e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	8b a3       	std	Y+35, r24	; 0x23
    1e28:	9c a3       	std	Y+36, r25	; 0x24
    1e2a:	ad a3       	std	Y+37, r26	; 0x25
    1e2c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e2e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e30:	7c a1       	ldd	r23, Y+36	; 0x24
    1e32:	8d a1       	ldd	r24, Y+37	; 0x25
    1e34:	9e a1       	ldd	r25, Y+38	; 0x26
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e8       	ldi	r20, 0x80	; 128
    1e3c:	5f e3       	ldi	r21, 0x3F	; 63
    1e3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e42:	88 23       	and	r24, r24
    1e44:	2c f4       	brge	.+10     	; 0x1e50 <Chanage_Password+0x63e>
		__ticks = 1;
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	9a a3       	std	Y+34, r25	; 0x22
    1e4c:	89 a3       	std	Y+33, r24	; 0x21
    1e4e:	3f c0       	rjmp	.+126    	; 0x1ece <Chanage_Password+0x6bc>
	else if (__tmp > 65535)
    1e50:	6b a1       	ldd	r22, Y+35	; 0x23
    1e52:	7c a1       	ldd	r23, Y+36	; 0x24
    1e54:	8d a1       	ldd	r24, Y+37	; 0x25
    1e56:	9e a1       	ldd	r25, Y+38	; 0x26
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	3f ef       	ldi	r19, 0xFF	; 255
    1e5c:	4f e7       	ldi	r20, 0x7F	; 127
    1e5e:	57 e4       	ldi	r21, 0x47	; 71
    1e60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e64:	18 16       	cp	r1, r24
    1e66:	4c f5       	brge	.+82     	; 0x1eba <Chanage_Password+0x6a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e68:	6f a1       	ldd	r22, Y+39	; 0x27
    1e6a:	78 a5       	ldd	r23, Y+40	; 0x28
    1e6c:	89 a5       	ldd	r24, Y+41	; 0x29
    1e6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	40 e2       	ldi	r20, 0x20	; 32
    1e76:	51 e4       	ldi	r21, 0x41	; 65
    1e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	bc 01       	movw	r22, r24
    1e82:	cd 01       	movw	r24, r26
    1e84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	9a a3       	std	Y+34, r25	; 0x22
    1e8e:	89 a3       	std	Y+33, r24	; 0x21
    1e90:	0f c0       	rjmp	.+30     	; 0x1eb0 <Chanage_Password+0x69e>
    1e92:	88 ec       	ldi	r24, 0xC8	; 200
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	98 a3       	std	Y+32, r25	; 0x20
    1e98:	8f 8f       	std	Y+31, r24	; 0x1f
    1e9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e9c:	98 a1       	ldd	r25, Y+32	; 0x20
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	f1 f7       	brne	.-4      	; 0x1e9e <Chanage_Password+0x68c>
    1ea2:	98 a3       	std	Y+32, r25	; 0x20
    1ea4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ea8:	9a a1       	ldd	r25, Y+34	; 0x22
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	9a a3       	std	Y+34, r25	; 0x22
    1eae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb0:	89 a1       	ldd	r24, Y+33	; 0x21
    1eb2:	9a a1       	ldd	r25, Y+34	; 0x22
    1eb4:	00 97       	sbiw	r24, 0x00	; 0
    1eb6:	69 f7       	brne	.-38     	; 0x1e92 <Chanage_Password+0x680>
    1eb8:	14 c0       	rjmp	.+40     	; 0x1ee2 <Chanage_Password+0x6d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eba:	6b a1       	ldd	r22, Y+35	; 0x23
    1ebc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ebe:	8d a1       	ldd	r24, Y+37	; 0x25
    1ec0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	9a a3       	std	Y+34, r25	; 0x22
    1ecc:	89 a3       	std	Y+33, r24	; 0x21
    1ece:	89 a1       	ldd	r24, Y+33	; 0x21
    1ed0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ed2:	9e 8f       	std	Y+30, r25	; 0x1e
    1ed4:	8d 8f       	std	Y+29, r24	; 0x1d
    1ed6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ed8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	f1 f7       	brne	.-4      	; 0x1eda <Chanage_Password+0x6c8>
    1ede:	9e 8f       	std	Y+30, r25	; 0x1e
    1ee0:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(500);
			Open_Door();
    1ee2:	0e 94 2b 08 	call	0x1056	; 0x1056 <Open_Door>
    1ee6:	f4 c0       	rjmp	.+488    	; 0x20d0 <Chanage_Password+0x8be>

		}
		else if(KEYPAD_getPressedKey() == '-')
    1ee8:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <KEYPAD_getPressedKey>
    1eec:	8d 32       	cpi	r24, 0x2D	; 45
    1eee:	09 f0       	breq	.+2      	; 0x1ef2 <Chanage_Password+0x6e0>
    1ef0:	ef c0       	rjmp	.+478    	; 0x20d0 <Chanage_Password+0x8be>
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	aa ef       	ldi	r26, 0xFA	; 250
    1ef8:	b3 e4       	ldi	r27, 0x43	; 67
    1efa:	89 8f       	std	Y+25, r24	; 0x19
    1efc:	9a 8f       	std	Y+26, r25	; 0x1a
    1efe:	ab 8f       	std	Y+27, r26	; 0x1b
    1f00:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f02:	69 8d       	ldd	r22, Y+25	; 0x19
    1f04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	4a ef       	ldi	r20, 0xFA	; 250
    1f10:	54 e4       	ldi	r21, 0x44	; 68
    1f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	8d 8b       	std	Y+21, r24	; 0x15
    1f1c:	9e 8b       	std	Y+22, r25	; 0x16
    1f1e:	af 8b       	std	Y+23, r26	; 0x17
    1f20:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f22:	6d 89       	ldd	r22, Y+21	; 0x15
    1f24:	7e 89       	ldd	r23, Y+22	; 0x16
    1f26:	8f 89       	ldd	r24, Y+23	; 0x17
    1f28:	98 8d       	ldd	r25, Y+24	; 0x18
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	40 e8       	ldi	r20, 0x80	; 128
    1f30:	5f e3       	ldi	r21, 0x3F	; 63
    1f32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f36:	88 23       	and	r24, r24
    1f38:	2c f4       	brge	.+10     	; 0x1f44 <Chanage_Password+0x732>
		__ticks = 1;
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	9c 8b       	std	Y+20, r25	; 0x14
    1f40:	8b 8b       	std	Y+19, r24	; 0x13
    1f42:	3f c0       	rjmp	.+126    	; 0x1fc2 <Chanage_Password+0x7b0>
	else if (__tmp > 65535)
    1f44:	6d 89       	ldd	r22, Y+21	; 0x15
    1f46:	7e 89       	ldd	r23, Y+22	; 0x16
    1f48:	8f 89       	ldd	r24, Y+23	; 0x17
    1f4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	3f ef       	ldi	r19, 0xFF	; 255
    1f50:	4f e7       	ldi	r20, 0x7F	; 127
    1f52:	57 e4       	ldi	r21, 0x47	; 71
    1f54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f58:	18 16       	cp	r1, r24
    1f5a:	4c f5       	brge	.+82     	; 0x1fae <Chanage_Password+0x79c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	40 e2       	ldi	r20, 0x20	; 32
    1f6a:	51 e4       	ldi	r21, 0x41	; 65
    1f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	bc 01       	movw	r22, r24
    1f76:	cd 01       	movw	r24, r26
    1f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	9c 8b       	std	Y+20, r25	; 0x14
    1f82:	8b 8b       	std	Y+19, r24	; 0x13
    1f84:	0f c0       	rjmp	.+30     	; 0x1fa4 <Chanage_Password+0x792>
    1f86:	88 ec       	ldi	r24, 0xC8	; 200
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	9a 8b       	std	Y+18, r25	; 0x12
    1f8c:	89 8b       	std	Y+17, r24	; 0x11
    1f8e:	89 89       	ldd	r24, Y+17	; 0x11
    1f90:	9a 89       	ldd	r25, Y+18	; 0x12
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	f1 f7       	brne	.-4      	; 0x1f92 <Chanage_Password+0x780>
    1f96:	9a 8b       	std	Y+18, r25	; 0x12
    1f98:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	9c 8b       	std	Y+20, r25	; 0x14
    1fa2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa8:	00 97       	sbiw	r24, 0x00	; 0
    1faa:	69 f7       	brne	.-38     	; 0x1f86 <Chanage_Password+0x774>
    1fac:	14 c0       	rjmp	.+40     	; 0x1fd6 <Chanage_Password+0x7c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fae:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fb2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	9c 8b       	std	Y+20, r25	; 0x14
    1fc0:	8b 8b       	std	Y+19, r24	; 0x13
    1fc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc6:	98 8b       	std	Y+16, r25	; 0x10
    1fc8:	8f 87       	std	Y+15, r24	; 0x0f
    1fca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fcc:	98 89       	ldd	r25, Y+16	; 0x10
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <Chanage_Password+0x7bc>
    1fd2:	98 8b       	std	Y+16, r25	; 0x10
    1fd4:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(500);
			Chanage_Password();
    1fd6:	0e 94 09 0c 	call	0x1812	; 0x1812 <Chanage_Password>
    1fda:	7a c0       	rjmp	.+244    	; 0x20d0 <Chanage_Password+0x8be>
		}
	}
	else {
		LCD_clearScreen();
    1fdc:	0e 94 c6 1c 	call	0x398c	; 0x398c <LCD_clearScreen>
		LCD_displayString("Wrong Password");
    1fe0:	84 e0       	ldi	r24, 0x04	; 4
    1fe2:	91 e0       	ldi	r25, 0x01	; 1
    1fe4:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_displayString>
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	aa ef       	ldi	r26, 0xFA	; 250
    1fee:	b3 e4       	ldi	r27, 0x43	; 67
    1ff0:	8b 87       	std	Y+11, r24	; 0x0b
    1ff2:	9c 87       	std	Y+12, r25	; 0x0c
    1ff4:	ad 87       	std	Y+13, r26	; 0x0d
    1ff6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ffa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ffc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	4a ef       	ldi	r20, 0xFA	; 250
    2006:	54 e4       	ldi	r21, 0x44	; 68
    2008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	8f 83       	std	Y+7, r24	; 0x07
    2012:	98 87       	std	Y+8, r25	; 0x08
    2014:	a9 87       	std	Y+9, r26	; 0x09
    2016:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2018:	6f 81       	ldd	r22, Y+7	; 0x07
    201a:	78 85       	ldd	r23, Y+8	; 0x08
    201c:	89 85       	ldd	r24, Y+9	; 0x09
    201e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e8       	ldi	r20, 0x80	; 128
    2026:	5f e3       	ldi	r21, 0x3F	; 63
    2028:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    202c:	88 23       	and	r24, r24
    202e:	2c f4       	brge	.+10     	; 0x203a <Chanage_Password+0x828>
		__ticks = 1;
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	9e 83       	std	Y+6, r25	; 0x06
    2036:	8d 83       	std	Y+5, r24	; 0x05
    2038:	3f c0       	rjmp	.+126    	; 0x20b8 <Chanage_Password+0x8a6>
	else if (__tmp > 65535)
    203a:	6f 81       	ldd	r22, Y+7	; 0x07
    203c:	78 85       	ldd	r23, Y+8	; 0x08
    203e:	89 85       	ldd	r24, Y+9	; 0x09
    2040:	9a 85       	ldd	r25, Y+10	; 0x0a
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	3f ef       	ldi	r19, 0xFF	; 255
    2046:	4f e7       	ldi	r20, 0x7F	; 127
    2048:	57 e4       	ldi	r21, 0x47	; 71
    204a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    204e:	18 16       	cp	r1, r24
    2050:	4c f5       	brge	.+82     	; 0x20a4 <Chanage_Password+0x892>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2052:	6b 85       	ldd	r22, Y+11	; 0x0b
    2054:	7c 85       	ldd	r23, Y+12	; 0x0c
    2056:	8d 85       	ldd	r24, Y+13	; 0x0d
    2058:	9e 85       	ldd	r25, Y+14	; 0x0e
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e2       	ldi	r20, 0x20	; 32
    2060:	51 e4       	ldi	r21, 0x41	; 65
    2062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	bc 01       	movw	r22, r24
    206c:	cd 01       	movw	r24, r26
    206e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	9e 83       	std	Y+6, r25	; 0x06
    2078:	8d 83       	std	Y+5, r24	; 0x05
    207a:	0f c0       	rjmp	.+30     	; 0x209a <Chanage_Password+0x888>
    207c:	88 ec       	ldi	r24, 0xC8	; 200
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	9c 83       	std	Y+4, r25	; 0x04
    2082:	8b 83       	std	Y+3, r24	; 0x03
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	9c 81       	ldd	r25, Y+4	; 0x04
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	f1 f7       	brne	.-4      	; 0x2088 <Chanage_Password+0x876>
    208c:	9c 83       	std	Y+4, r25	; 0x04
    208e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2090:	8d 81       	ldd	r24, Y+5	; 0x05
    2092:	9e 81       	ldd	r25, Y+6	; 0x06
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	9e 83       	std	Y+6, r25	; 0x06
    2098:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209a:	8d 81       	ldd	r24, Y+5	; 0x05
    209c:	9e 81       	ldd	r25, Y+6	; 0x06
    209e:	00 97       	sbiw	r24, 0x00	; 0
    20a0:	69 f7       	brne	.-38     	; 0x207c <Chanage_Password+0x86a>
    20a2:	14 c0       	rjmp	.+40     	; 0x20cc <Chanage_Password+0x8ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a4:	6f 81       	ldd	r22, Y+7	; 0x07
    20a6:	78 85       	ldd	r23, Y+8	; 0x08
    20a8:	89 85       	ldd	r24, Y+9	; 0x09
    20aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	9e 83       	std	Y+6, r25	; 0x06
    20b6:	8d 83       	std	Y+5, r24	; 0x05
    20b8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ba:	9e 81       	ldd	r25, Y+6	; 0x06
    20bc:	9a 83       	std	Y+2, r25	; 0x02
    20be:	89 83       	std	Y+1, r24	; 0x01
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	9a 81       	ldd	r25, Y+2	; 0x02
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <Chanage_Password+0x8b2>
    20c8:	9a 83       	std	Y+2, r25	; 0x02
    20ca:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		Chanage_Password();
    20cc:	0e 94 09 0c 	call	0x1812	; 0x1812 <Chanage_Password>
	}

}
    20d0:	c9 59       	subi	r28, 0x99	; 153
    20d2:	df 4f       	sbci	r29, 0xFF	; 255
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	1f 91       	pop	r17
    20e4:	0f 91       	pop	r16
    20e6:	08 95       	ret

000020e8 <Get_Password>:

/*Description
 * To get the password and save it in buffer
 */
void Get_Password(uint8 * pass)
{
    20e8:	0f 93       	push	r16
    20ea:	1f 93       	push	r17
    20ec:	df 93       	push	r29
    20ee:	cf 93       	push	r28
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
    20f4:	61 97       	sbiw	r28, 0x11	; 17
    20f6:	0f b6       	in	r0, 0x3f	; 63
    20f8:	f8 94       	cli
    20fa:	de bf       	out	0x3e, r29	; 62
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	cd bf       	out	0x3d, r28	; 61
    2100:	99 8b       	std	Y+17, r25	; 0x11
    2102:	88 8b       	std	Y+16, r24	; 0x10
	for(uint8 i=0 ; i< PASSWORD_SIZE ; i++)
    2104:	1f 86       	std	Y+15, r1	; 0x0f
    2106:	84 c0       	rjmp	.+264    	; 0x2210 <Get_Password+0x128>
	{
		/* Get the pressed button from keypad */
		pass[i] = KEYPAD_getPressedKey();
    2108:	8f 85       	ldd	r24, Y+15	; 0x0f
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	88 89       	ldd	r24, Y+16	; 0x10
    2110:	99 89       	ldd	r25, Y+17	; 0x11
    2112:	8c 01       	movw	r16, r24
    2114:	02 0f       	add	r16, r18
    2116:	13 1f       	adc	r17, r19
    2118:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <KEYPAD_getPressedKey>
    211c:	f8 01       	movw	r30, r16
    211e:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    2120:	8a e2       	ldi	r24, 0x2A	; 42
    2122:	0e 94 30 1a 	call	0x3460	; 0x3460 <LCD_displayCharacter>
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	aa ef       	ldi	r26, 0xFA	; 250
    212c:	b3 e4       	ldi	r27, 0x43	; 67
    212e:	8b 87       	std	Y+11, r24	; 0x0b
    2130:	9c 87       	std	Y+12, r25	; 0x0c
    2132:	ad 87       	std	Y+13, r26	; 0x0d
    2134:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2136:	6b 85       	ldd	r22, Y+11	; 0x0b
    2138:	7c 85       	ldd	r23, Y+12	; 0x0c
    213a:	8d 85       	ldd	r24, Y+13	; 0x0d
    213c:	9e 85       	ldd	r25, Y+14	; 0x0e
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	4a ef       	ldi	r20, 0xFA	; 250
    2144:	54 e4       	ldi	r21, 0x44	; 68
    2146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	8f 83       	std	Y+7, r24	; 0x07
    2150:	98 87       	std	Y+8, r25	; 0x08
    2152:	a9 87       	std	Y+9, r26	; 0x09
    2154:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2156:	6f 81       	ldd	r22, Y+7	; 0x07
    2158:	78 85       	ldd	r23, Y+8	; 0x08
    215a:	89 85       	ldd	r24, Y+9	; 0x09
    215c:	9a 85       	ldd	r25, Y+10	; 0x0a
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	40 e8       	ldi	r20, 0x80	; 128
    2164:	5f e3       	ldi	r21, 0x3F	; 63
    2166:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    216a:	88 23       	and	r24, r24
    216c:	2c f4       	brge	.+10     	; 0x2178 <Get_Password+0x90>
		__ticks = 1;
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	9e 83       	std	Y+6, r25	; 0x06
    2174:	8d 83       	std	Y+5, r24	; 0x05
    2176:	3f c0       	rjmp	.+126    	; 0x21f6 <Get_Password+0x10e>
	else if (__tmp > 65535)
    2178:	6f 81       	ldd	r22, Y+7	; 0x07
    217a:	78 85       	ldd	r23, Y+8	; 0x08
    217c:	89 85       	ldd	r24, Y+9	; 0x09
    217e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	3f ef       	ldi	r19, 0xFF	; 255
    2184:	4f e7       	ldi	r20, 0x7F	; 127
    2186:	57 e4       	ldi	r21, 0x47	; 71
    2188:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    218c:	18 16       	cp	r1, r24
    218e:	4c f5       	brge	.+82     	; 0x21e2 <Get_Password+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2190:	6b 85       	ldd	r22, Y+11	; 0x0b
    2192:	7c 85       	ldd	r23, Y+12	; 0x0c
    2194:	8d 85       	ldd	r24, Y+13	; 0x0d
    2196:	9e 85       	ldd	r25, Y+14	; 0x0e
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e2       	ldi	r20, 0x20	; 32
    219e:	51 e4       	ldi	r21, 0x41	; 65
    21a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	bc 01       	movw	r22, r24
    21aa:	cd 01       	movw	r24, r26
    21ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	9e 83       	std	Y+6, r25	; 0x06
    21b6:	8d 83       	std	Y+5, r24	; 0x05
    21b8:	0f c0       	rjmp	.+30     	; 0x21d8 <Get_Password+0xf0>
    21ba:	88 ec       	ldi	r24, 0xC8	; 200
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	9c 83       	std	Y+4, r25	; 0x04
    21c0:	8b 83       	std	Y+3, r24	; 0x03
    21c2:	8b 81       	ldd	r24, Y+3	; 0x03
    21c4:	9c 81       	ldd	r25, Y+4	; 0x04
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <Get_Password+0xde>
    21ca:	9c 83       	std	Y+4, r25	; 0x04
    21cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ce:	8d 81       	ldd	r24, Y+5	; 0x05
    21d0:	9e 81       	ldd	r25, Y+6	; 0x06
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	9e 83       	std	Y+6, r25	; 0x06
    21d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d8:	8d 81       	ldd	r24, Y+5	; 0x05
    21da:	9e 81       	ldd	r25, Y+6	; 0x06
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	69 f7       	brne	.-38     	; 0x21ba <Get_Password+0xd2>
    21e0:	14 c0       	rjmp	.+40     	; 0x220a <Get_Password+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e2:	6f 81       	ldd	r22, Y+7	; 0x07
    21e4:	78 85       	ldd	r23, Y+8	; 0x08
    21e6:	89 85       	ldd	r24, Y+9	; 0x09
    21e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	9e 83       	std	Y+6, r25	; 0x06
    21f4:	8d 83       	std	Y+5, r24	; 0x05
    21f6:	8d 81       	ldd	r24, Y+5	; 0x05
    21f8:	9e 81       	ldd	r25, Y+6	; 0x06
    21fa:	9a 83       	std	Y+2, r25	; 0x02
    21fc:	89 83       	std	Y+1, r24	; 0x01
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	9a 81       	ldd	r25, Y+2	; 0x02
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	f1 f7       	brne	.-4      	; 0x2202 <Get_Password+0x11a>
    2206:	9a 83       	std	Y+2, r25	; 0x02
    2208:	89 83       	std	Y+1, r24	; 0x01
/*Description
 * To get the password and save it in buffer
 */
void Get_Password(uint8 * pass)
{
	for(uint8 i=0 ; i< PASSWORD_SIZE ; i++)
    220a:	8f 85       	ldd	r24, Y+15	; 0x0f
    220c:	8f 5f       	subi	r24, 0xFF	; 255
    220e:	8f 87       	std	Y+15, r24	; 0x0f
    2210:	8f 85       	ldd	r24, Y+15	; 0x0f
    2212:	85 30       	cpi	r24, 0x05	; 5
    2214:	08 f4       	brcc	.+2      	; 0x2218 <Get_Password+0x130>
    2216:	78 cf       	rjmp	.-272    	; 0x2108 <Get_Password+0x20>
		pass[i] = KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		//LCD_intgerToString(pass_buffer);
		_delay_ms(500);
	}
}
    2218:	61 96       	adiw	r28, 0x11	; 17
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	1f 91       	pop	r17
    222a:	0f 91       	pop	r16
    222c:	08 95       	ret

0000222e <Check_PassMatching>:
/*Description
 * To check if password and confirm are matching or not
 */
uint8 Check_PassMatching(uint8 * pass,uint8 * pass_confirm)
{
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	00 d0       	rcall	.+0      	; 0x2234 <Check_PassMatching+0x6>
    2234:	00 d0       	rcall	.+0      	; 0x2236 <Check_PassMatching+0x8>
    2236:	00 d0       	rcall	.+0      	; 0x2238 <Check_PassMatching+0xa>
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	9b 83       	std	Y+3, r25	; 0x03
    223e:	8a 83       	std	Y+2, r24	; 0x02
    2240:	7d 83       	std	Y+5, r23	; 0x05
    2242:	6c 83       	std	Y+4, r22	; 0x04
	for (uint8 i = 0; i <  PASSWORD_SIZE; i++) {
    2244:	19 82       	std	Y+1, r1	; 0x01
    2246:	19 c0       	rjmp	.+50     	; 0x227a <Check_PassMatching+0x4c>
		if(pass[i]!=pass_confirm[i])
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	28 2f       	mov	r18, r24
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	8a 81       	ldd	r24, Y+2	; 0x02
    2250:	9b 81       	ldd	r25, Y+3	; 0x03
    2252:	fc 01       	movw	r30, r24
    2254:	e2 0f       	add	r30, r18
    2256:	f3 1f       	adc	r31, r19
    2258:	40 81       	ld	r20, Z
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	28 2f       	mov	r18, r24
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	8c 81       	ldd	r24, Y+4	; 0x04
    2262:	9d 81       	ldd	r25, Y+5	; 0x05
    2264:	fc 01       	movw	r30, r24
    2266:	e2 0f       	add	r30, r18
    2268:	f3 1f       	adc	r31, r19
    226a:	80 81       	ld	r24, Z
    226c:	48 17       	cp	r20, r24
    226e:	11 f0       	breq	.+4      	; 0x2274 <Check_PassMatching+0x46>
		{
			return FALSE;
    2270:	1e 82       	std	Y+6, r1	; 0x06
    2272:	08 c0       	rjmp	.+16     	; 0x2284 <Check_PassMatching+0x56>
/*Description
 * To check if password and confirm are matching or not
 */
uint8 Check_PassMatching(uint8 * pass,uint8 * pass_confirm)
{
	for (uint8 i = 0; i <  PASSWORD_SIZE; i++) {
    2274:	89 81       	ldd	r24, Y+1	; 0x01
    2276:	8f 5f       	subi	r24, 0xFF	; 255
    2278:	89 83       	std	Y+1, r24	; 0x01
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	85 30       	cpi	r24, 0x05	; 5
    227e:	20 f3       	brcs	.-56     	; 0x2248 <Check_PassMatching+0x1a>
		if(pass[i]!=pass_confirm[i])
		{
			return FALSE;
		}
	}
	return TRUE;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	8e 83       	std	Y+6, r24	; 0x06
    2284:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2286:	26 96       	adiw	r28, 0x06	; 6
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	cd bf       	out	0x3d, r28	; 61
    2292:	cf 91       	pop	r28
    2294:	df 91       	pop	r29
    2296:	08 95       	ret

00002298 <Send_password>:
/*Description
 * To send the password to 2nd ECU using UART
 */
void Send_password(uint8 *password)
{
    2298:	df 93       	push	r29
    229a:	cf 93       	push	r28
    229c:	cd b7       	in	r28, 0x3d	; 61
    229e:	de b7       	in	r29, 0x3e	; 62
    22a0:	61 97       	sbiw	r28, 0x11	; 17
    22a2:	0f b6       	in	r0, 0x3f	; 63
    22a4:	f8 94       	cli
    22a6:	de bf       	out	0x3e, r29	; 62
    22a8:	0f be       	out	0x3f, r0	; 63
    22aa:	cd bf       	out	0x3d, r28	; 61
    22ac:	99 8b       	std	Y+17, r25	; 0x11
    22ae:	88 8b       	std	Y+16, r24	; 0x10
	 while (UART_recieveByte() != UART_Ready);
    22b0:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <UART_recieveByte>
    22b4:	86 34       	cpi	r24, 0x46	; 70
    22b6:	e1 f7       	brne	.-8      	; 0x22b0 <Send_password+0x18>
    for ( uint8 i = 0; i < PASSWORD_SIZE; i++)
    22b8:	1f 86       	std	Y+15, r1	; 0x0f
    22ba:	80 c0       	rjmp	.+256    	; 0x23bc <Send_password+0x124>
    {
        UART_sendByte(password[i]);
    22bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    22be:	28 2f       	mov	r18, r24
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	88 89       	ldd	r24, Y+16	; 0x10
    22c4:	99 89       	ldd	r25, Y+17	; 0x11
    22c6:	fc 01       	movw	r30, r24
    22c8:	e2 0f       	add	r30, r18
    22ca:	f3 1f       	adc	r31, r19
    22cc:	80 81       	ld	r24, Z
    22ce:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <UART_sendByte>
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	a8 e4       	ldi	r26, 0x48	; 72
    22d8:	b3 e4       	ldi	r27, 0x43	; 67
    22da:	8b 87       	std	Y+11, r24	; 0x0b
    22dc:	9c 87       	std	Y+12, r25	; 0x0c
    22de:	ad 87       	std	Y+13, r26	; 0x0d
    22e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	4a ef       	ldi	r20, 0xFA	; 250
    22f0:	54 e4       	ldi	r21, 0x44	; 68
    22f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	8f 83       	std	Y+7, r24	; 0x07
    22fc:	98 87       	std	Y+8, r25	; 0x08
    22fe:	a9 87       	std	Y+9, r26	; 0x09
    2300:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2302:	6f 81       	ldd	r22, Y+7	; 0x07
    2304:	78 85       	ldd	r23, Y+8	; 0x08
    2306:	89 85       	ldd	r24, Y+9	; 0x09
    2308:	9a 85       	ldd	r25, Y+10	; 0x0a
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e8       	ldi	r20, 0x80	; 128
    2310:	5f e3       	ldi	r21, 0x3F	; 63
    2312:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2316:	88 23       	and	r24, r24
    2318:	2c f4       	brge	.+10     	; 0x2324 <Send_password+0x8c>
		__ticks = 1;
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	9e 83       	std	Y+6, r25	; 0x06
    2320:	8d 83       	std	Y+5, r24	; 0x05
    2322:	3f c0       	rjmp	.+126    	; 0x23a2 <Send_password+0x10a>
	else if (__tmp > 65535)
    2324:	6f 81       	ldd	r22, Y+7	; 0x07
    2326:	78 85       	ldd	r23, Y+8	; 0x08
    2328:	89 85       	ldd	r24, Y+9	; 0x09
    232a:	9a 85       	ldd	r25, Y+10	; 0x0a
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	3f ef       	ldi	r19, 0xFF	; 255
    2330:	4f e7       	ldi	r20, 0x7F	; 127
    2332:	57 e4       	ldi	r21, 0x47	; 71
    2334:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2338:	18 16       	cp	r1, r24
    233a:	4c f5       	brge	.+82     	; 0x238e <Send_password+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    233c:	6b 85       	ldd	r22, Y+11	; 0x0b
    233e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2340:	8d 85       	ldd	r24, Y+13	; 0x0d
    2342:	9e 85       	ldd	r25, Y+14	; 0x0e
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	40 e2       	ldi	r20, 0x20	; 32
    234a:	51 e4       	ldi	r21, 0x41	; 65
    234c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	bc 01       	movw	r22, r24
    2356:	cd 01       	movw	r24, r26
    2358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	9e 83       	std	Y+6, r25	; 0x06
    2362:	8d 83       	std	Y+5, r24	; 0x05
    2364:	0f c0       	rjmp	.+30     	; 0x2384 <Send_password+0xec>
    2366:	88 ec       	ldi	r24, 0xC8	; 200
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	9c 83       	std	Y+4, r25	; 0x04
    236c:	8b 83       	std	Y+3, r24	; 0x03
    236e:	8b 81       	ldd	r24, Y+3	; 0x03
    2370:	9c 81       	ldd	r25, Y+4	; 0x04
    2372:	01 97       	sbiw	r24, 0x01	; 1
    2374:	f1 f7       	brne	.-4      	; 0x2372 <Send_password+0xda>
    2376:	9c 83       	std	Y+4, r25	; 0x04
    2378:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    237a:	8d 81       	ldd	r24, Y+5	; 0x05
    237c:	9e 81       	ldd	r25, Y+6	; 0x06
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	9e 83       	std	Y+6, r25	; 0x06
    2382:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2384:	8d 81       	ldd	r24, Y+5	; 0x05
    2386:	9e 81       	ldd	r25, Y+6	; 0x06
    2388:	00 97       	sbiw	r24, 0x00	; 0
    238a:	69 f7       	brne	.-38     	; 0x2366 <Send_password+0xce>
    238c:	14 c0       	rjmp	.+40     	; 0x23b6 <Send_password+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    238e:	6f 81       	ldd	r22, Y+7	; 0x07
    2390:	78 85       	ldd	r23, Y+8	; 0x08
    2392:	89 85       	ldd	r24, Y+9	; 0x09
    2394:	9a 85       	ldd	r25, Y+10	; 0x0a
    2396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	9e 83       	std	Y+6, r25	; 0x06
    23a0:	8d 83       	std	Y+5, r24	; 0x05
    23a2:	8d 81       	ldd	r24, Y+5	; 0x05
    23a4:	9e 81       	ldd	r25, Y+6	; 0x06
    23a6:	9a 83       	std	Y+2, r25	; 0x02
    23a8:	89 83       	std	Y+1, r24	; 0x01
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	9a 81       	ldd	r25, Y+2	; 0x02
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	f1 f7       	brne	.-4      	; 0x23ae <Send_password+0x116>
    23b2:	9a 83       	std	Y+2, r25	; 0x02
    23b4:	89 83       	std	Y+1, r24	; 0x01
 * To send the password to 2nd ECU using UART
 */
void Send_password(uint8 *password)
{
	 while (UART_recieveByte() != UART_Ready);
    for ( uint8 i = 0; i < PASSWORD_SIZE; i++)
    23b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23b8:	8f 5f       	subi	r24, 0xFF	; 255
    23ba:	8f 87       	std	Y+15, r24	; 0x0f
    23bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    23be:	85 30       	cpi	r24, 0x05	; 5
    23c0:	08 f4       	brcc	.+2      	; 0x23c4 <Send_password+0x12c>
    23c2:	7c cf       	rjmp	.-264    	; 0x22bc <Send_password+0x24>
    {
        UART_sendByte(password[i]);
        _delay_ms(200);
    }
}
    23c4:	61 96       	adiw	r28, 0x11	; 17
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	f8 94       	cli
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	cd bf       	out	0x3d, r28	; 61
    23d0:	cf 91       	pop	r28
    23d2:	df 91       	pop	r29
    23d4:	08 95       	ret

000023d6 <__vector_7>:
#include <avr/interrupt.h>
#include "common_macros.h"

static void (*timer1_callback)(void)= NULL_PTR;

ISR(TIMER1_COMPA_vect) {
    23d6:	1f 92       	push	r1
    23d8:	0f 92       	push	r0
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	0f 92       	push	r0
    23de:	11 24       	eor	r1, r1
    23e0:	2f 93       	push	r18
    23e2:	3f 93       	push	r19
    23e4:	4f 93       	push	r20
    23e6:	5f 93       	push	r21
    23e8:	6f 93       	push	r22
    23ea:	7f 93       	push	r23
    23ec:	8f 93       	push	r24
    23ee:	9f 93       	push	r25
    23f0:	af 93       	push	r26
    23f2:	bf 93       	push	r27
    23f4:	ef 93       	push	r30
    23f6:	ff 93       	push	r31
    23f8:	df 93       	push	r29
    23fa:	cf 93       	push	r28
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
    if (timer1_callback != NULL_PTR) {
    2400:	80 91 56 01 	lds	r24, 0x0156
    2404:	90 91 57 01 	lds	r25, 0x0157
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	29 f0       	breq	.+10     	; 0x2416 <__vector_7+0x40>
        timer1_callback();
    240c:	e0 91 56 01 	lds	r30, 0x0156
    2410:	f0 91 57 01 	lds	r31, 0x0157
    2414:	09 95       	icall
    }
}
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	ff 91       	pop	r31
    241c:	ef 91       	pop	r30
    241e:	bf 91       	pop	r27
    2420:	af 91       	pop	r26
    2422:	9f 91       	pop	r25
    2424:	8f 91       	pop	r24
    2426:	7f 91       	pop	r23
    2428:	6f 91       	pop	r22
    242a:	5f 91       	pop	r21
    242c:	4f 91       	pop	r20
    242e:	3f 91       	pop	r19
    2430:	2f 91       	pop	r18
    2432:	0f 90       	pop	r0
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	0f 90       	pop	r0
    2438:	1f 90       	pop	r1
    243a:	18 95       	reti

0000243c <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    243c:	1f 92       	push	r1
    243e:	0f 92       	push	r0
    2440:	0f b6       	in	r0, 0x3f	; 63
    2442:	0f 92       	push	r0
    2444:	11 24       	eor	r1, r1
    2446:	2f 93       	push	r18
    2448:	3f 93       	push	r19
    244a:	4f 93       	push	r20
    244c:	5f 93       	push	r21
    244e:	6f 93       	push	r22
    2450:	7f 93       	push	r23
    2452:	8f 93       	push	r24
    2454:	9f 93       	push	r25
    2456:	af 93       	push	r26
    2458:	bf 93       	push	r27
    245a:	ef 93       	push	r30
    245c:	ff 93       	push	r31
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callback != NULL_PTR){
    2466:	80 91 56 01 	lds	r24, 0x0156
    246a:	90 91 57 01 	lds	r25, 0x0157
    246e:	00 97       	sbiw	r24, 0x00	; 0
    2470:	29 f0       	breq	.+10     	; 0x247c <__vector_11+0x40>
		(*timer1_callback)();
    2472:	e0 91 56 01 	lds	r30, 0x0156
    2476:	f0 91 57 01 	lds	r31, 0x0157
    247a:	09 95       	icall
	}
}
    247c:	cf 91       	pop	r28
    247e:	df 91       	pop	r29
    2480:	ff 91       	pop	r31
    2482:	ef 91       	pop	r30
    2484:	bf 91       	pop	r27
    2486:	af 91       	pop	r26
    2488:	9f 91       	pop	r25
    248a:	8f 91       	pop	r24
    248c:	7f 91       	pop	r23
    248e:	6f 91       	pop	r22
    2490:	5f 91       	pop	r21
    2492:	4f 91       	pop	r20
    2494:	3f 91       	pop	r19
    2496:	2f 91       	pop	r18
    2498:	0f 90       	pop	r0
    249a:	0f be       	out	0x3f, r0	; 63
    249c:	0f 90       	pop	r0
    249e:	1f 90       	pop	r1
    24a0:	18 95       	reti

000024a2 <Timer1_init>:
void Timer1_init(const Timer1_ConfigType *Config_Ptr) {
    24a2:	df 93       	push	r29
    24a4:	cf 93       	push	r28
    24a6:	00 d0       	rcall	.+0      	; 0x24a8 <Timer1_init+0x6>
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	9a 83       	std	Y+2, r25	; 0x02
    24ae:	89 83       	std	Y+1, r24	; 0x01

	/*
	 * set TCNT1 with the initial value
	 */
	TCNT1 = Config_Ptr->initial_value;
    24b0:	ac e4       	ldi	r26, 0x4C	; 76
    24b2:	b0 e0       	ldi	r27, 0x00	; 0
    24b4:	e9 81       	ldd	r30, Y+1	; 0x01
    24b6:	fa 81       	ldd	r31, Y+2	; 0x02
    24b8:	80 81       	ld	r24, Z
    24ba:	91 81       	ldd	r25, Z+1	; 0x01
    24bc:	11 96       	adiw	r26, 0x01	; 1
    24be:	9c 93       	st	X, r25
    24c0:	8e 93       	st	-X, r24

	TCCR1A = (1 << FOC1A) | (1 << FOC1B) | (Config_Ptr->mode & 0x0003);
    24c2:	af e4       	ldi	r26, 0x4F	; 79
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	e9 81       	ldd	r30, Y+1	; 0x01
    24c8:	fa 81       	ldd	r31, Y+2	; 0x02
    24ca:	85 81       	ldd	r24, Z+5	; 0x05
    24cc:	83 70       	andi	r24, 0x03	; 3
    24ce:	8c 60       	ori	r24, 0x0C	; 12
    24d0:	8c 93       	st	X, r24

	/*
	 * configure timer1 to operate in CTC mode or normal mode and
	 * specify the prescaler
	 */
	TCCR1B = ((Config_Ptr->mode & 0x000C) << 1) | (Config_Ptr->prescaler);
    24d2:	ae e4       	ldi	r26, 0x4E	; 78
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	e9 81       	ldd	r30, Y+1	; 0x01
    24d8:	fa 81       	ldd	r31, Y+2	; 0x02
    24da:	85 81       	ldd	r24, Z+5	; 0x05
    24dc:	88 2f       	mov	r24, r24
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	8c 70       	andi	r24, 0x0C	; 12
    24e2:	90 70       	andi	r25, 0x00	; 0
    24e4:	88 0f       	add	r24, r24
    24e6:	99 1f       	adc	r25, r25
    24e8:	98 2f       	mov	r25, r24
    24ea:	e9 81       	ldd	r30, Y+1	; 0x01
    24ec:	fa 81       	ldd	r31, Y+2	; 0x02
    24ee:	84 81       	ldd	r24, Z+4	; 0x04
    24f0:	89 2b       	or	r24, r25
    24f2:	8c 93       	st	X, r24

	/*
	 * set the compera register if working in CTC mode
	 */
	if (Config_Ptr->mode == CTC_OCR1A) {
    24f4:	e9 81       	ldd	r30, Y+1	; 0x01
    24f6:	fa 81       	ldd	r31, Y+2	; 0x02
    24f8:	85 81       	ldd	r24, Z+5	; 0x05
    24fa:	84 30       	cpi	r24, 0x04	; 4
    24fc:	51 f4       	brne	.+20     	; 0x2512 <Timer1_init+0x70>
		OCR1A = Config_Ptr->compare_value;
    24fe:	ea e4       	ldi	r30, 0x4A	; 74
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	a9 81       	ldd	r26, Y+1	; 0x01
    2504:	ba 81       	ldd	r27, Y+2	; 0x02
    2506:	12 96       	adiw	r26, 0x02	; 2
    2508:	8d 91       	ld	r24, X+
    250a:	9c 91       	ld	r25, X
    250c:	13 97       	sbiw	r26, 0x03	; 3
    250e:	91 83       	std	Z+1, r25	; 0x01
    2510:	80 83       	st	Z, r24
	}

	/*
	 * Enable the interrupt of the specified mode
	 */
	if (Config_Ptr->mode == CTC_OCR1A) {
    2512:	e9 81       	ldd	r30, Y+1	; 0x01
    2514:	fa 81       	ldd	r31, Y+2	; 0x02
    2516:	85 81       	ldd	r24, Z+5	; 0x05
    2518:	84 30       	cpi	r24, 0x04	; 4
    251a:	29 f4       	brne	.+10     	; 0x2526 <Timer1_init+0x84>
		TIMSK = (1 << OCIE1A);
    251c:	e9 e5       	ldi	r30, 0x59	; 89
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 e1       	ldi	r24, 0x10	; 16
    2522:	80 83       	st	Z, r24
    2524:	04 c0       	rjmp	.+8      	; 0x252e <Timer1_init+0x8c>
	} else {
		TIMSK = (1 << TOIE1);
    2526:	e9 e5       	ldi	r30, 0x59	; 89
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	84 e0       	ldi	r24, 0x04	; 4
    252c:	80 83       	st	Z, r24
	}
}
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	cf 91       	pop	r28
    2534:	df 91       	pop	r29
    2536:	08 95       	ret

00002538 <Timer1_setCallBack>:

void Timer1_setCallBack(void (*a_ptr)(void)) {
    2538:	df 93       	push	r29
    253a:	cf 93       	push	r28
    253c:	00 d0       	rcall	.+0      	; 0x253e <Timer1_setCallBack+0x6>
    253e:	cd b7       	in	r28, 0x3d	; 61
    2540:	de b7       	in	r29, 0x3e	; 62
    2542:	9a 83       	std	Y+2, r25	; 0x02
    2544:	89 83       	std	Y+1, r24	; 0x01
    timer1_callback = a_ptr;
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	9a 81       	ldd	r25, Y+2	; 0x02
    254a:	90 93 57 01 	sts	0x0157, r25
    254e:	80 93 56 01 	sts	0x0156, r24
}
    2552:	0f 90       	pop	r0
    2554:	0f 90       	pop	r0
    2556:	cf 91       	pop	r28
    2558:	df 91       	pop	r29
    255a:	08 95       	ret

0000255c <Timer1_deInit>:

void Timer1_deInit(void) {
    255c:	df 93       	push	r29
    255e:	cf 93       	push	r28
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
    // Disable Timer1 and interrupts
	TCCR1A=0;
    2564:	ef e4       	ldi	r30, 0x4F	; 79
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	10 82       	st	Z, r1
	TCCR1B=0;
    256a:	ee e4       	ldi	r30, 0x4E	; 78
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	10 82       	st	Z, r1
	TCNT1=0;
    2570:	ec e4       	ldi	r30, 0x4C	; 76
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	11 82       	std	Z+1, r1	; 0x01
    2576:	10 82       	st	Z, r1
	OCR1A=0;
    2578:	ea e4       	ldi	r30, 0x4A	; 74
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	11 82       	std	Z+1, r1	; 0x01
    257e:	10 82       	st	Z, r1
	OCR1B=0;
    2580:	e8 e4       	ldi	r30, 0x48	; 72
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	11 82       	std	Z+1, r1	; 0x01
    2586:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE1A);
    2588:	a9 e5       	ldi	r26, 0x59	; 89
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	e9 e5       	ldi	r30, 0x59	; 89
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	80 81       	ld	r24, Z
    2592:	8f 7e       	andi	r24, 0xEF	; 239
    2594:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,OCIE1B);
    2596:	a9 e5       	ldi	r26, 0x59	; 89
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	e9 e5       	ldi	r30, 0x59	; 89
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	80 81       	ld	r24, Z
    25a0:	87 7f       	andi	r24, 0xF7	; 247
    25a2:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE1);
    25a4:	a9 e5       	ldi	r26, 0x59	; 89
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	e9 e5       	ldi	r30, 0x59	; 89
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	8b 7f       	andi	r24, 0xFB	; 251
    25b0:	8c 93       	st	X, r24
}
    25b2:	cf 91       	pop	r28
    25b4:	df 91       	pop	r29
    25b6:	08 95       	ret

000025b8 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    25b8:	df 93       	push	r29
    25ba:	cf 93       	push	r28
    25bc:	00 d0       	rcall	.+0      	; 0x25be <GPIO_setupPinDirection+0x6>
    25be:	00 d0       	rcall	.+0      	; 0x25c0 <GPIO_setupPinDirection+0x8>
    25c0:	0f 92       	push	r0
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
    25c6:	89 83       	std	Y+1, r24	; 0x01
    25c8:	6a 83       	std	Y+2, r22	; 0x02
    25ca:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    25cc:	8a 81       	ldd	r24, Y+2	; 0x02
    25ce:	88 30       	cpi	r24, 0x08	; 8
    25d0:	08 f0       	brcs	.+2      	; 0x25d4 <GPIO_setupPinDirection+0x1c>
    25d2:	d5 c0       	rjmp	.+426    	; 0x277e <GPIO_setupPinDirection+0x1c6>
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	84 30       	cpi	r24, 0x04	; 4
    25d8:	08 f0       	brcs	.+2      	; 0x25dc <GPIO_setupPinDirection+0x24>
    25da:	d1 c0       	rjmp	.+418    	; 0x277e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	28 2f       	mov	r18, r24
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	3d 83       	std	Y+5, r19	; 0x05
    25e4:	2c 83       	std	Y+4, r18	; 0x04
    25e6:	8c 81       	ldd	r24, Y+4	; 0x04
    25e8:	9d 81       	ldd	r25, Y+5	; 0x05
    25ea:	81 30       	cpi	r24, 0x01	; 1
    25ec:	91 05       	cpc	r25, r1
    25ee:	09 f4       	brne	.+2      	; 0x25f2 <GPIO_setupPinDirection+0x3a>
    25f0:	43 c0       	rjmp	.+134    	; 0x2678 <GPIO_setupPinDirection+0xc0>
    25f2:	2c 81       	ldd	r18, Y+4	; 0x04
    25f4:	3d 81       	ldd	r19, Y+5	; 0x05
    25f6:	22 30       	cpi	r18, 0x02	; 2
    25f8:	31 05       	cpc	r19, r1
    25fa:	2c f4       	brge	.+10     	; 0x2606 <GPIO_setupPinDirection+0x4e>
    25fc:	8c 81       	ldd	r24, Y+4	; 0x04
    25fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2600:	00 97       	sbiw	r24, 0x00	; 0
    2602:	71 f0       	breq	.+28     	; 0x2620 <GPIO_setupPinDirection+0x68>
    2604:	bc c0       	rjmp	.+376    	; 0x277e <GPIO_setupPinDirection+0x1c6>
    2606:	2c 81       	ldd	r18, Y+4	; 0x04
    2608:	3d 81       	ldd	r19, Y+5	; 0x05
    260a:	22 30       	cpi	r18, 0x02	; 2
    260c:	31 05       	cpc	r19, r1
    260e:	09 f4       	brne	.+2      	; 0x2612 <GPIO_setupPinDirection+0x5a>
    2610:	5f c0       	rjmp	.+190    	; 0x26d0 <GPIO_setupPinDirection+0x118>
    2612:	8c 81       	ldd	r24, Y+4	; 0x04
    2614:	9d 81       	ldd	r25, Y+5	; 0x05
    2616:	83 30       	cpi	r24, 0x03	; 3
    2618:	91 05       	cpc	r25, r1
    261a:	09 f4       	brne	.+2      	; 0x261e <GPIO_setupPinDirection+0x66>
    261c:	85 c0       	rjmp	.+266    	; 0x2728 <GPIO_setupPinDirection+0x170>
    261e:	af c0       	rjmp	.+350    	; 0x277e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2620:	8b 81       	ldd	r24, Y+3	; 0x03
    2622:	81 30       	cpi	r24, 0x01	; 1
    2624:	a1 f4       	brne	.+40     	; 0x264e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2626:	aa e3       	ldi	r26, 0x3A	; 58
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	ea e3       	ldi	r30, 0x3A	; 58
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	48 2f       	mov	r20, r24
    2632:	8a 81       	ldd	r24, Y+2	; 0x02
    2634:	28 2f       	mov	r18, r24
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	02 2e       	mov	r0, r18
    263e:	02 c0       	rjmp	.+4      	; 0x2644 <GPIO_setupPinDirection+0x8c>
    2640:	88 0f       	add	r24, r24
    2642:	99 1f       	adc	r25, r25
    2644:	0a 94       	dec	r0
    2646:	e2 f7       	brpl	.-8      	; 0x2640 <GPIO_setupPinDirection+0x88>
    2648:	84 2b       	or	r24, r20
    264a:	8c 93       	st	X, r24
    264c:	98 c0       	rjmp	.+304    	; 0x277e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    264e:	aa e3       	ldi	r26, 0x3A	; 58
    2650:	b0 e0       	ldi	r27, 0x00	; 0
    2652:	ea e3       	ldi	r30, 0x3A	; 58
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	80 81       	ld	r24, Z
    2658:	48 2f       	mov	r20, r24
    265a:	8a 81       	ldd	r24, Y+2	; 0x02
    265c:	28 2f       	mov	r18, r24
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	02 2e       	mov	r0, r18
    2666:	02 c0       	rjmp	.+4      	; 0x266c <GPIO_setupPinDirection+0xb4>
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	0a 94       	dec	r0
    266e:	e2 f7       	brpl	.-8      	; 0x2668 <GPIO_setupPinDirection+0xb0>
    2670:	80 95       	com	r24
    2672:	84 23       	and	r24, r20
    2674:	8c 93       	st	X, r24
    2676:	83 c0       	rjmp	.+262    	; 0x277e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2678:	8b 81       	ldd	r24, Y+3	; 0x03
    267a:	81 30       	cpi	r24, 0x01	; 1
    267c:	a1 f4       	brne	.+40     	; 0x26a6 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    267e:	a7 e3       	ldi	r26, 0x37	; 55
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	e7 e3       	ldi	r30, 0x37	; 55
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	80 81       	ld	r24, Z
    2688:	48 2f       	mov	r20, r24
    268a:	8a 81       	ldd	r24, Y+2	; 0x02
    268c:	28 2f       	mov	r18, r24
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	02 2e       	mov	r0, r18
    2696:	02 c0       	rjmp	.+4      	; 0x269c <GPIO_setupPinDirection+0xe4>
    2698:	88 0f       	add	r24, r24
    269a:	99 1f       	adc	r25, r25
    269c:	0a 94       	dec	r0
    269e:	e2 f7       	brpl	.-8      	; 0x2698 <GPIO_setupPinDirection+0xe0>
    26a0:	84 2b       	or	r24, r20
    26a2:	8c 93       	st	X, r24
    26a4:	6c c0       	rjmp	.+216    	; 0x277e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    26a6:	a7 e3       	ldi	r26, 0x37	; 55
    26a8:	b0 e0       	ldi	r27, 0x00	; 0
    26aa:	e7 e3       	ldi	r30, 0x37	; 55
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	80 81       	ld	r24, Z
    26b0:	48 2f       	mov	r20, r24
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	28 2f       	mov	r18, r24
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	02 2e       	mov	r0, r18
    26be:	02 c0       	rjmp	.+4      	; 0x26c4 <GPIO_setupPinDirection+0x10c>
    26c0:	88 0f       	add	r24, r24
    26c2:	99 1f       	adc	r25, r25
    26c4:	0a 94       	dec	r0
    26c6:	e2 f7       	brpl	.-8      	; 0x26c0 <GPIO_setupPinDirection+0x108>
    26c8:	80 95       	com	r24
    26ca:	84 23       	and	r24, r20
    26cc:	8c 93       	st	X, r24
    26ce:	57 c0       	rjmp	.+174    	; 0x277e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    26d0:	8b 81       	ldd	r24, Y+3	; 0x03
    26d2:	81 30       	cpi	r24, 0x01	; 1
    26d4:	a1 f4       	brne	.+40     	; 0x26fe <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    26d6:	a4 e3       	ldi	r26, 0x34	; 52
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	e4 e3       	ldi	r30, 0x34	; 52
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 81       	ld	r24, Z
    26e0:	48 2f       	mov	r20, r24
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	28 2f       	mov	r18, r24
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	02 2e       	mov	r0, r18
    26ee:	02 c0       	rjmp	.+4      	; 0x26f4 <GPIO_setupPinDirection+0x13c>
    26f0:	88 0f       	add	r24, r24
    26f2:	99 1f       	adc	r25, r25
    26f4:	0a 94       	dec	r0
    26f6:	e2 f7       	brpl	.-8      	; 0x26f0 <GPIO_setupPinDirection+0x138>
    26f8:	84 2b       	or	r24, r20
    26fa:	8c 93       	st	X, r24
    26fc:	40 c0       	rjmp	.+128    	; 0x277e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    26fe:	a4 e3       	ldi	r26, 0x34	; 52
    2700:	b0 e0       	ldi	r27, 0x00	; 0
    2702:	e4 e3       	ldi	r30, 0x34	; 52
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
    2708:	48 2f       	mov	r20, r24
    270a:	8a 81       	ldd	r24, Y+2	; 0x02
    270c:	28 2f       	mov	r18, r24
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	02 2e       	mov	r0, r18
    2716:	02 c0       	rjmp	.+4      	; 0x271c <GPIO_setupPinDirection+0x164>
    2718:	88 0f       	add	r24, r24
    271a:	99 1f       	adc	r25, r25
    271c:	0a 94       	dec	r0
    271e:	e2 f7       	brpl	.-8      	; 0x2718 <GPIO_setupPinDirection+0x160>
    2720:	80 95       	com	r24
    2722:	84 23       	and	r24, r20
    2724:	8c 93       	st	X, r24
    2726:	2b c0       	rjmp	.+86     	; 0x277e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2728:	8b 81       	ldd	r24, Y+3	; 0x03
    272a:	81 30       	cpi	r24, 0x01	; 1
    272c:	a1 f4       	brne	.+40     	; 0x2756 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    272e:	a1 e3       	ldi	r26, 0x31	; 49
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	e1 e3       	ldi	r30, 0x31	; 49
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	48 2f       	mov	r20, r24
    273a:	8a 81       	ldd	r24, Y+2	; 0x02
    273c:	28 2f       	mov	r18, r24
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	02 2e       	mov	r0, r18
    2746:	02 c0       	rjmp	.+4      	; 0x274c <GPIO_setupPinDirection+0x194>
    2748:	88 0f       	add	r24, r24
    274a:	99 1f       	adc	r25, r25
    274c:	0a 94       	dec	r0
    274e:	e2 f7       	brpl	.-8      	; 0x2748 <GPIO_setupPinDirection+0x190>
    2750:	84 2b       	or	r24, r20
    2752:	8c 93       	st	X, r24
    2754:	14 c0       	rjmp	.+40     	; 0x277e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2756:	a1 e3       	ldi	r26, 0x31	; 49
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e1 e3       	ldi	r30, 0x31	; 49
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	48 2f       	mov	r20, r24
    2762:	8a 81       	ldd	r24, Y+2	; 0x02
    2764:	28 2f       	mov	r18, r24
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	02 2e       	mov	r0, r18
    276e:	02 c0       	rjmp	.+4      	; 0x2774 <GPIO_setupPinDirection+0x1bc>
    2770:	88 0f       	add	r24, r24
    2772:	99 1f       	adc	r25, r25
    2774:	0a 94       	dec	r0
    2776:	e2 f7       	brpl	.-8      	; 0x2770 <GPIO_setupPinDirection+0x1b8>
    2778:	80 95       	com	r24
    277a:	84 23       	and	r24, r20
    277c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	cf 91       	pop	r28
    278a:	df 91       	pop	r29
    278c:	08 95       	ret

0000278e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    278e:	df 93       	push	r29
    2790:	cf 93       	push	r28
    2792:	00 d0       	rcall	.+0      	; 0x2794 <GPIO_writePin+0x6>
    2794:	00 d0       	rcall	.+0      	; 0x2796 <GPIO_writePin+0x8>
    2796:	0f 92       	push	r0
    2798:	cd b7       	in	r28, 0x3d	; 61
    279a:	de b7       	in	r29, 0x3e	; 62
    279c:	89 83       	std	Y+1, r24	; 0x01
    279e:	6a 83       	std	Y+2, r22	; 0x02
    27a0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    27a2:	8a 81       	ldd	r24, Y+2	; 0x02
    27a4:	88 30       	cpi	r24, 0x08	; 8
    27a6:	08 f0       	brcs	.+2      	; 0x27aa <GPIO_writePin+0x1c>
    27a8:	d5 c0       	rjmp	.+426    	; 0x2954 <GPIO_writePin+0x1c6>
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	84 30       	cpi	r24, 0x04	; 4
    27ae:	08 f0       	brcs	.+2      	; 0x27b2 <GPIO_writePin+0x24>
    27b0:	d1 c0       	rjmp	.+418    	; 0x2954 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	28 2f       	mov	r18, r24
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	3d 83       	std	Y+5, r19	; 0x05
    27ba:	2c 83       	std	Y+4, r18	; 0x04
    27bc:	8c 81       	ldd	r24, Y+4	; 0x04
    27be:	9d 81       	ldd	r25, Y+5	; 0x05
    27c0:	81 30       	cpi	r24, 0x01	; 1
    27c2:	91 05       	cpc	r25, r1
    27c4:	09 f4       	brne	.+2      	; 0x27c8 <GPIO_writePin+0x3a>
    27c6:	43 c0       	rjmp	.+134    	; 0x284e <GPIO_writePin+0xc0>
    27c8:	2c 81       	ldd	r18, Y+4	; 0x04
    27ca:	3d 81       	ldd	r19, Y+5	; 0x05
    27cc:	22 30       	cpi	r18, 0x02	; 2
    27ce:	31 05       	cpc	r19, r1
    27d0:	2c f4       	brge	.+10     	; 0x27dc <GPIO_writePin+0x4e>
    27d2:	8c 81       	ldd	r24, Y+4	; 0x04
    27d4:	9d 81       	ldd	r25, Y+5	; 0x05
    27d6:	00 97       	sbiw	r24, 0x00	; 0
    27d8:	71 f0       	breq	.+28     	; 0x27f6 <GPIO_writePin+0x68>
    27da:	bc c0       	rjmp	.+376    	; 0x2954 <GPIO_writePin+0x1c6>
    27dc:	2c 81       	ldd	r18, Y+4	; 0x04
    27de:	3d 81       	ldd	r19, Y+5	; 0x05
    27e0:	22 30       	cpi	r18, 0x02	; 2
    27e2:	31 05       	cpc	r19, r1
    27e4:	09 f4       	brne	.+2      	; 0x27e8 <GPIO_writePin+0x5a>
    27e6:	5f c0       	rjmp	.+190    	; 0x28a6 <GPIO_writePin+0x118>
    27e8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ea:	9d 81       	ldd	r25, Y+5	; 0x05
    27ec:	83 30       	cpi	r24, 0x03	; 3
    27ee:	91 05       	cpc	r25, r1
    27f0:	09 f4       	brne	.+2      	; 0x27f4 <GPIO_writePin+0x66>
    27f2:	85 c0       	rjmp	.+266    	; 0x28fe <GPIO_writePin+0x170>
    27f4:	af c0       	rjmp	.+350    	; 0x2954 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    27f6:	8b 81       	ldd	r24, Y+3	; 0x03
    27f8:	81 30       	cpi	r24, 0x01	; 1
    27fa:	a1 f4       	brne	.+40     	; 0x2824 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    27fc:	ab e3       	ldi	r26, 0x3B	; 59
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	eb e3       	ldi	r30, 0x3B	; 59
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	48 2f       	mov	r20, r24
    2808:	8a 81       	ldd	r24, Y+2	; 0x02
    280a:	28 2f       	mov	r18, r24
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	02 2e       	mov	r0, r18
    2814:	02 c0       	rjmp	.+4      	; 0x281a <GPIO_writePin+0x8c>
    2816:	88 0f       	add	r24, r24
    2818:	99 1f       	adc	r25, r25
    281a:	0a 94       	dec	r0
    281c:	e2 f7       	brpl	.-8      	; 0x2816 <GPIO_writePin+0x88>
    281e:	84 2b       	or	r24, r20
    2820:	8c 93       	st	X, r24
    2822:	98 c0       	rjmp	.+304    	; 0x2954 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2824:	ab e3       	ldi	r26, 0x3B	; 59
    2826:	b0 e0       	ldi	r27, 0x00	; 0
    2828:	eb e3       	ldi	r30, 0x3B	; 59
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	80 81       	ld	r24, Z
    282e:	48 2f       	mov	r20, r24
    2830:	8a 81       	ldd	r24, Y+2	; 0x02
    2832:	28 2f       	mov	r18, r24
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	02 2e       	mov	r0, r18
    283c:	02 c0       	rjmp	.+4      	; 0x2842 <GPIO_writePin+0xb4>
    283e:	88 0f       	add	r24, r24
    2840:	99 1f       	adc	r25, r25
    2842:	0a 94       	dec	r0
    2844:	e2 f7       	brpl	.-8      	; 0x283e <GPIO_writePin+0xb0>
    2846:	80 95       	com	r24
    2848:	84 23       	and	r24, r20
    284a:	8c 93       	st	X, r24
    284c:	83 c0       	rjmp	.+262    	; 0x2954 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    284e:	8b 81       	ldd	r24, Y+3	; 0x03
    2850:	81 30       	cpi	r24, 0x01	; 1
    2852:	a1 f4       	brne	.+40     	; 0x287c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2854:	a8 e3       	ldi	r26, 0x38	; 56
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	e8 e3       	ldi	r30, 0x38	; 56
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	80 81       	ld	r24, Z
    285e:	48 2f       	mov	r20, r24
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	28 2f       	mov	r18, r24
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	02 2e       	mov	r0, r18
    286c:	02 c0       	rjmp	.+4      	; 0x2872 <GPIO_writePin+0xe4>
    286e:	88 0f       	add	r24, r24
    2870:	99 1f       	adc	r25, r25
    2872:	0a 94       	dec	r0
    2874:	e2 f7       	brpl	.-8      	; 0x286e <GPIO_writePin+0xe0>
    2876:	84 2b       	or	r24, r20
    2878:	8c 93       	st	X, r24
    287a:	6c c0       	rjmp	.+216    	; 0x2954 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    287c:	a8 e3       	ldi	r26, 0x38	; 56
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	e8 e3       	ldi	r30, 0x38	; 56
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	48 2f       	mov	r20, r24
    2888:	8a 81       	ldd	r24, Y+2	; 0x02
    288a:	28 2f       	mov	r18, r24
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	02 2e       	mov	r0, r18
    2894:	02 c0       	rjmp	.+4      	; 0x289a <GPIO_writePin+0x10c>
    2896:	88 0f       	add	r24, r24
    2898:	99 1f       	adc	r25, r25
    289a:	0a 94       	dec	r0
    289c:	e2 f7       	brpl	.-8      	; 0x2896 <GPIO_writePin+0x108>
    289e:	80 95       	com	r24
    28a0:	84 23       	and	r24, r20
    28a2:	8c 93       	st	X, r24
    28a4:	57 c0       	rjmp	.+174    	; 0x2954 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    28a6:	8b 81       	ldd	r24, Y+3	; 0x03
    28a8:	81 30       	cpi	r24, 0x01	; 1
    28aa:	a1 f4       	brne	.+40     	; 0x28d4 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    28ac:	a5 e3       	ldi	r26, 0x35	; 53
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	e5 e3       	ldi	r30, 0x35	; 53
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	48 2f       	mov	r20, r24
    28b8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ba:	28 2f       	mov	r18, r24
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	02 2e       	mov	r0, r18
    28c4:	02 c0       	rjmp	.+4      	; 0x28ca <GPIO_writePin+0x13c>
    28c6:	88 0f       	add	r24, r24
    28c8:	99 1f       	adc	r25, r25
    28ca:	0a 94       	dec	r0
    28cc:	e2 f7       	brpl	.-8      	; 0x28c6 <GPIO_writePin+0x138>
    28ce:	84 2b       	or	r24, r20
    28d0:	8c 93       	st	X, r24
    28d2:	40 c0       	rjmp	.+128    	; 0x2954 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    28d4:	a5 e3       	ldi	r26, 0x35	; 53
    28d6:	b0 e0       	ldi	r27, 0x00	; 0
    28d8:	e5 e3       	ldi	r30, 0x35	; 53
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	80 81       	ld	r24, Z
    28de:	48 2f       	mov	r20, r24
    28e0:	8a 81       	ldd	r24, Y+2	; 0x02
    28e2:	28 2f       	mov	r18, r24
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	02 2e       	mov	r0, r18
    28ec:	02 c0       	rjmp	.+4      	; 0x28f2 <GPIO_writePin+0x164>
    28ee:	88 0f       	add	r24, r24
    28f0:	99 1f       	adc	r25, r25
    28f2:	0a 94       	dec	r0
    28f4:	e2 f7       	brpl	.-8      	; 0x28ee <GPIO_writePin+0x160>
    28f6:	80 95       	com	r24
    28f8:	84 23       	and	r24, r20
    28fa:	8c 93       	st	X, r24
    28fc:	2b c0       	rjmp	.+86     	; 0x2954 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    28fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2900:	81 30       	cpi	r24, 0x01	; 1
    2902:	a1 f4       	brne	.+40     	; 0x292c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2904:	a2 e3       	ldi	r26, 0x32	; 50
    2906:	b0 e0       	ldi	r27, 0x00	; 0
    2908:	e2 e3       	ldi	r30, 0x32	; 50
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	80 81       	ld	r24, Z
    290e:	48 2f       	mov	r20, r24
    2910:	8a 81       	ldd	r24, Y+2	; 0x02
    2912:	28 2f       	mov	r18, r24
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	02 2e       	mov	r0, r18
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <GPIO_writePin+0x194>
    291e:	88 0f       	add	r24, r24
    2920:	99 1f       	adc	r25, r25
    2922:	0a 94       	dec	r0
    2924:	e2 f7       	brpl	.-8      	; 0x291e <GPIO_writePin+0x190>
    2926:	84 2b       	or	r24, r20
    2928:	8c 93       	st	X, r24
    292a:	14 c0       	rjmp	.+40     	; 0x2954 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    292c:	a2 e3       	ldi	r26, 0x32	; 50
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	e2 e3       	ldi	r30, 0x32	; 50
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	80 81       	ld	r24, Z
    2936:	48 2f       	mov	r20, r24
    2938:	8a 81       	ldd	r24, Y+2	; 0x02
    293a:	28 2f       	mov	r18, r24
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	02 2e       	mov	r0, r18
    2944:	02 c0       	rjmp	.+4      	; 0x294a <GPIO_writePin+0x1bc>
    2946:	88 0f       	add	r24, r24
    2948:	99 1f       	adc	r25, r25
    294a:	0a 94       	dec	r0
    294c:	e2 f7       	brpl	.-8      	; 0x2946 <GPIO_writePin+0x1b8>
    294e:	80 95       	com	r24
    2950:	84 23       	and	r24, r20
    2952:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2954:	0f 90       	pop	r0
    2956:	0f 90       	pop	r0
    2958:	0f 90       	pop	r0
    295a:	0f 90       	pop	r0
    295c:	0f 90       	pop	r0
    295e:	cf 91       	pop	r28
    2960:	df 91       	pop	r29
    2962:	08 95       	ret

00002964 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2964:	df 93       	push	r29
    2966:	cf 93       	push	r28
    2968:	00 d0       	rcall	.+0      	; 0x296a <GPIO_readPin+0x6>
    296a:	00 d0       	rcall	.+0      	; 0x296c <GPIO_readPin+0x8>
    296c:	0f 92       	push	r0
    296e:	cd b7       	in	r28, 0x3d	; 61
    2970:	de b7       	in	r29, 0x3e	; 62
    2972:	8a 83       	std	Y+2, r24	; 0x02
    2974:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2976:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2978:	8b 81       	ldd	r24, Y+3	; 0x03
    297a:	88 30       	cpi	r24, 0x08	; 8
    297c:	08 f0       	brcs	.+2      	; 0x2980 <GPIO_readPin+0x1c>
    297e:	84 c0       	rjmp	.+264    	; 0x2a88 <GPIO_readPin+0x124>
    2980:	8a 81       	ldd	r24, Y+2	; 0x02
    2982:	84 30       	cpi	r24, 0x04	; 4
    2984:	08 f0       	brcs	.+2      	; 0x2988 <GPIO_readPin+0x24>
    2986:	80 c0       	rjmp	.+256    	; 0x2a88 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2988:	8a 81       	ldd	r24, Y+2	; 0x02
    298a:	28 2f       	mov	r18, r24
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	3d 83       	std	Y+5, r19	; 0x05
    2990:	2c 83       	std	Y+4, r18	; 0x04
    2992:	4c 81       	ldd	r20, Y+4	; 0x04
    2994:	5d 81       	ldd	r21, Y+5	; 0x05
    2996:	41 30       	cpi	r20, 0x01	; 1
    2998:	51 05       	cpc	r21, r1
    299a:	79 f1       	breq	.+94     	; 0x29fa <GPIO_readPin+0x96>
    299c:	8c 81       	ldd	r24, Y+4	; 0x04
    299e:	9d 81       	ldd	r25, Y+5	; 0x05
    29a0:	82 30       	cpi	r24, 0x02	; 2
    29a2:	91 05       	cpc	r25, r1
    29a4:	34 f4       	brge	.+12     	; 0x29b2 <GPIO_readPin+0x4e>
    29a6:	2c 81       	ldd	r18, Y+4	; 0x04
    29a8:	3d 81       	ldd	r19, Y+5	; 0x05
    29aa:	21 15       	cp	r18, r1
    29ac:	31 05       	cpc	r19, r1
    29ae:	69 f0       	breq	.+26     	; 0x29ca <GPIO_readPin+0x66>
    29b0:	6b c0       	rjmp	.+214    	; 0x2a88 <GPIO_readPin+0x124>
    29b2:	4c 81       	ldd	r20, Y+4	; 0x04
    29b4:	5d 81       	ldd	r21, Y+5	; 0x05
    29b6:	42 30       	cpi	r20, 0x02	; 2
    29b8:	51 05       	cpc	r21, r1
    29ba:	b9 f1       	breq	.+110    	; 0x2a2a <GPIO_readPin+0xc6>
    29bc:	8c 81       	ldd	r24, Y+4	; 0x04
    29be:	9d 81       	ldd	r25, Y+5	; 0x05
    29c0:	83 30       	cpi	r24, 0x03	; 3
    29c2:	91 05       	cpc	r25, r1
    29c4:	09 f4       	brne	.+2      	; 0x29c8 <GPIO_readPin+0x64>
    29c6:	49 c0       	rjmp	.+146    	; 0x2a5a <GPIO_readPin+0xf6>
    29c8:	5f c0       	rjmp	.+190    	; 0x2a88 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    29ca:	e9 e3       	ldi	r30, 0x39	; 57
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	80 81       	ld	r24, Z
    29d0:	28 2f       	mov	r18, r24
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	8b 81       	ldd	r24, Y+3	; 0x03
    29d6:	88 2f       	mov	r24, r24
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	a9 01       	movw	r20, r18
    29dc:	02 c0       	rjmp	.+4      	; 0x29e2 <GPIO_readPin+0x7e>
    29de:	55 95       	asr	r21
    29e0:	47 95       	ror	r20
    29e2:	8a 95       	dec	r24
    29e4:	e2 f7       	brpl	.-8      	; 0x29de <GPIO_readPin+0x7a>
    29e6:	ca 01       	movw	r24, r20
    29e8:	81 70       	andi	r24, 0x01	; 1
    29ea:	90 70       	andi	r25, 0x00	; 0
    29ec:	88 23       	and	r24, r24
    29ee:	19 f0       	breq	.+6      	; 0x29f6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	89 83       	std	Y+1, r24	; 0x01
    29f4:	49 c0       	rjmp	.+146    	; 0x2a88 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    29f6:	19 82       	std	Y+1, r1	; 0x01
    29f8:	47 c0       	rjmp	.+142    	; 0x2a88 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    29fa:	e6 e3       	ldi	r30, 0x36	; 54
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	28 2f       	mov	r18, r24
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	8b 81       	ldd	r24, Y+3	; 0x03
    2a06:	88 2f       	mov	r24, r24
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	a9 01       	movw	r20, r18
    2a0c:	02 c0       	rjmp	.+4      	; 0x2a12 <GPIO_readPin+0xae>
    2a0e:	55 95       	asr	r21
    2a10:	47 95       	ror	r20
    2a12:	8a 95       	dec	r24
    2a14:	e2 f7       	brpl	.-8      	; 0x2a0e <GPIO_readPin+0xaa>
    2a16:	ca 01       	movw	r24, r20
    2a18:	81 70       	andi	r24, 0x01	; 1
    2a1a:	90 70       	andi	r25, 0x00	; 0
    2a1c:	88 23       	and	r24, r24
    2a1e:	19 f0       	breq	.+6      	; 0x2a26 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	89 83       	std	Y+1, r24	; 0x01
    2a24:	31 c0       	rjmp	.+98     	; 0x2a88 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2a26:	19 82       	std	Y+1, r1	; 0x01
    2a28:	2f c0       	rjmp	.+94     	; 0x2a88 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2a2a:	e3 e3       	ldi	r30, 0x33	; 51
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	80 81       	ld	r24, Z
    2a30:	28 2f       	mov	r18, r24
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	8b 81       	ldd	r24, Y+3	; 0x03
    2a36:	88 2f       	mov	r24, r24
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	a9 01       	movw	r20, r18
    2a3c:	02 c0       	rjmp	.+4      	; 0x2a42 <GPIO_readPin+0xde>
    2a3e:	55 95       	asr	r21
    2a40:	47 95       	ror	r20
    2a42:	8a 95       	dec	r24
    2a44:	e2 f7       	brpl	.-8      	; 0x2a3e <GPIO_readPin+0xda>
    2a46:	ca 01       	movw	r24, r20
    2a48:	81 70       	andi	r24, 0x01	; 1
    2a4a:	90 70       	andi	r25, 0x00	; 0
    2a4c:	88 23       	and	r24, r24
    2a4e:	19 f0       	breq	.+6      	; 0x2a56 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	89 83       	std	Y+1, r24	; 0x01
    2a54:	19 c0       	rjmp	.+50     	; 0x2a88 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2a56:	19 82       	std	Y+1, r1	; 0x01
    2a58:	17 c0       	rjmp	.+46     	; 0x2a88 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2a5a:	e0 e3       	ldi	r30, 0x30	; 48
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	80 81       	ld	r24, Z
    2a60:	28 2f       	mov	r18, r24
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	8b 81       	ldd	r24, Y+3	; 0x03
    2a66:	88 2f       	mov	r24, r24
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	a9 01       	movw	r20, r18
    2a6c:	02 c0       	rjmp	.+4      	; 0x2a72 <GPIO_readPin+0x10e>
    2a6e:	55 95       	asr	r21
    2a70:	47 95       	ror	r20
    2a72:	8a 95       	dec	r24
    2a74:	e2 f7       	brpl	.-8      	; 0x2a6e <GPIO_readPin+0x10a>
    2a76:	ca 01       	movw	r24, r20
    2a78:	81 70       	andi	r24, 0x01	; 1
    2a7a:	90 70       	andi	r25, 0x00	; 0
    2a7c:	88 23       	and	r24, r24
    2a7e:	19 f0       	breq	.+6      	; 0x2a86 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	89 83       	std	Y+1, r24	; 0x01
    2a84:	01 c0       	rjmp	.+2      	; 0x2a88 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2a86:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a8a:	0f 90       	pop	r0
    2a8c:	0f 90       	pop	r0
    2a8e:	0f 90       	pop	r0
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	cf 91       	pop	r28
    2a96:	df 91       	pop	r29
    2a98:	08 95       	ret

00002a9a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2a9a:	df 93       	push	r29
    2a9c:	cf 93       	push	r28
    2a9e:	00 d0       	rcall	.+0      	; 0x2aa0 <GPIO_setupPortDirection+0x6>
    2aa0:	00 d0       	rcall	.+0      	; 0x2aa2 <GPIO_setupPortDirection+0x8>
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
    2aa6:	89 83       	std	Y+1, r24	; 0x01
    2aa8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
    2aac:	84 30       	cpi	r24, 0x04	; 4
    2aae:	90 f5       	brcc	.+100    	; 0x2b14 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2ab0:	89 81       	ldd	r24, Y+1	; 0x01
    2ab2:	28 2f       	mov	r18, r24
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	3c 83       	std	Y+4, r19	; 0x04
    2ab8:	2b 83       	std	Y+3, r18	; 0x03
    2aba:	8b 81       	ldd	r24, Y+3	; 0x03
    2abc:	9c 81       	ldd	r25, Y+4	; 0x04
    2abe:	81 30       	cpi	r24, 0x01	; 1
    2ac0:	91 05       	cpc	r25, r1
    2ac2:	d1 f0       	breq	.+52     	; 0x2af8 <GPIO_setupPortDirection+0x5e>
    2ac4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ac6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ac8:	22 30       	cpi	r18, 0x02	; 2
    2aca:	31 05       	cpc	r19, r1
    2acc:	2c f4       	brge	.+10     	; 0x2ad8 <GPIO_setupPortDirection+0x3e>
    2ace:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad2:	00 97       	sbiw	r24, 0x00	; 0
    2ad4:	61 f0       	breq	.+24     	; 0x2aee <GPIO_setupPortDirection+0x54>
    2ad6:	1e c0       	rjmp	.+60     	; 0x2b14 <GPIO_setupPortDirection+0x7a>
    2ad8:	2b 81       	ldd	r18, Y+3	; 0x03
    2ada:	3c 81       	ldd	r19, Y+4	; 0x04
    2adc:	22 30       	cpi	r18, 0x02	; 2
    2ade:	31 05       	cpc	r19, r1
    2ae0:	81 f0       	breq	.+32     	; 0x2b02 <GPIO_setupPortDirection+0x68>
    2ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae6:	83 30       	cpi	r24, 0x03	; 3
    2ae8:	91 05       	cpc	r25, r1
    2aea:	81 f0       	breq	.+32     	; 0x2b0c <GPIO_setupPortDirection+0x72>
    2aec:	13 c0       	rjmp	.+38     	; 0x2b14 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2aee:	ea e3       	ldi	r30, 0x3A	; 58
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	8a 81       	ldd	r24, Y+2	; 0x02
    2af4:	80 83       	st	Z, r24
    2af6:	0e c0       	rjmp	.+28     	; 0x2b14 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2af8:	e7 e3       	ldi	r30, 0x37	; 55
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	8a 81       	ldd	r24, Y+2	; 0x02
    2afe:	80 83       	st	Z, r24
    2b00:	09 c0       	rjmp	.+18     	; 0x2b14 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2b02:	e4 e3       	ldi	r30, 0x34	; 52
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	8a 81       	ldd	r24, Y+2	; 0x02
    2b08:	80 83       	st	Z, r24
    2b0a:	04 c0       	rjmp	.+8      	; 0x2b14 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2b0c:	e1 e3       	ldi	r30, 0x31	; 49
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	8a 81       	ldd	r24, Y+2	; 0x02
    2b12:	80 83       	st	Z, r24
			break;
		}
	}
}
    2b14:	0f 90       	pop	r0
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	cf 91       	pop	r28
    2b1e:	df 91       	pop	r29
    2b20:	08 95       	ret

00002b22 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2b22:	df 93       	push	r29
    2b24:	cf 93       	push	r28
    2b26:	00 d0       	rcall	.+0      	; 0x2b28 <GPIO_writePort+0x6>
    2b28:	00 d0       	rcall	.+0      	; 0x2b2a <GPIO_writePort+0x8>
    2b2a:	cd b7       	in	r28, 0x3d	; 61
    2b2c:	de b7       	in	r29, 0x3e	; 62
    2b2e:	89 83       	std	Y+1, r24	; 0x01
    2b30:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2b32:	89 81       	ldd	r24, Y+1	; 0x01
    2b34:	84 30       	cpi	r24, 0x04	; 4
    2b36:	90 f5       	brcc	.+100    	; 0x2b9c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2b38:	89 81       	ldd	r24, Y+1	; 0x01
    2b3a:	28 2f       	mov	r18, r24
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	3c 83       	std	Y+4, r19	; 0x04
    2b40:	2b 83       	std	Y+3, r18	; 0x03
    2b42:	8b 81       	ldd	r24, Y+3	; 0x03
    2b44:	9c 81       	ldd	r25, Y+4	; 0x04
    2b46:	81 30       	cpi	r24, 0x01	; 1
    2b48:	91 05       	cpc	r25, r1
    2b4a:	d1 f0       	breq	.+52     	; 0x2b80 <GPIO_writePort+0x5e>
    2b4c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b4e:	3c 81       	ldd	r19, Y+4	; 0x04
    2b50:	22 30       	cpi	r18, 0x02	; 2
    2b52:	31 05       	cpc	r19, r1
    2b54:	2c f4       	brge	.+10     	; 0x2b60 <GPIO_writePort+0x3e>
    2b56:	8b 81       	ldd	r24, Y+3	; 0x03
    2b58:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5a:	00 97       	sbiw	r24, 0x00	; 0
    2b5c:	61 f0       	breq	.+24     	; 0x2b76 <GPIO_writePort+0x54>
    2b5e:	1e c0       	rjmp	.+60     	; 0x2b9c <GPIO_writePort+0x7a>
    2b60:	2b 81       	ldd	r18, Y+3	; 0x03
    2b62:	3c 81       	ldd	r19, Y+4	; 0x04
    2b64:	22 30       	cpi	r18, 0x02	; 2
    2b66:	31 05       	cpc	r19, r1
    2b68:	81 f0       	breq	.+32     	; 0x2b8a <GPIO_writePort+0x68>
    2b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b6e:	83 30       	cpi	r24, 0x03	; 3
    2b70:	91 05       	cpc	r25, r1
    2b72:	81 f0       	breq	.+32     	; 0x2b94 <GPIO_writePort+0x72>
    2b74:	13 c0       	rjmp	.+38     	; 0x2b9c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2b76:	eb e3       	ldi	r30, 0x3B	; 59
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7c:	80 83       	st	Z, r24
    2b7e:	0e c0       	rjmp	.+28     	; 0x2b9c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2b80:	e8 e3       	ldi	r30, 0x38	; 56
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	8a 81       	ldd	r24, Y+2	; 0x02
    2b86:	80 83       	st	Z, r24
    2b88:	09 c0       	rjmp	.+18     	; 0x2b9c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2b8a:	e5 e3       	ldi	r30, 0x35	; 53
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b90:	80 83       	st	Z, r24
    2b92:	04 c0       	rjmp	.+8      	; 0x2b9c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2b94:	e2 e3       	ldi	r30, 0x32	; 50
    2b96:	f0 e0       	ldi	r31, 0x00	; 0
    2b98:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9a:	80 83       	st	Z, r24
			break;
		}
	}
}
    2b9c:	0f 90       	pop	r0
    2b9e:	0f 90       	pop	r0
    2ba0:	0f 90       	pop	r0
    2ba2:	0f 90       	pop	r0
    2ba4:	cf 91       	pop	r28
    2ba6:	df 91       	pop	r29
    2ba8:	08 95       	ret

00002baa <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2baa:	df 93       	push	r29
    2bac:	cf 93       	push	r28
    2bae:	00 d0       	rcall	.+0      	; 0x2bb0 <GPIO_readPort+0x6>
    2bb0:	00 d0       	rcall	.+0      	; 0x2bb2 <GPIO_readPort+0x8>
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
    2bb6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2bb8:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2bba:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbc:	84 30       	cpi	r24, 0x04	; 4
    2bbe:	90 f5       	brcc	.+100    	; 0x2c24 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc2:	28 2f       	mov	r18, r24
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	3c 83       	std	Y+4, r19	; 0x04
    2bc8:	2b 83       	std	Y+3, r18	; 0x03
    2bca:	8b 81       	ldd	r24, Y+3	; 0x03
    2bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bce:	81 30       	cpi	r24, 0x01	; 1
    2bd0:	91 05       	cpc	r25, r1
    2bd2:	d1 f0       	breq	.+52     	; 0x2c08 <GPIO_readPort+0x5e>
    2bd4:	2b 81       	ldd	r18, Y+3	; 0x03
    2bd6:	3c 81       	ldd	r19, Y+4	; 0x04
    2bd8:	22 30       	cpi	r18, 0x02	; 2
    2bda:	31 05       	cpc	r19, r1
    2bdc:	2c f4       	brge	.+10     	; 0x2be8 <GPIO_readPort+0x3e>
    2bde:	8b 81       	ldd	r24, Y+3	; 0x03
    2be0:	9c 81       	ldd	r25, Y+4	; 0x04
    2be2:	00 97       	sbiw	r24, 0x00	; 0
    2be4:	61 f0       	breq	.+24     	; 0x2bfe <GPIO_readPort+0x54>
    2be6:	1e c0       	rjmp	.+60     	; 0x2c24 <GPIO_readPort+0x7a>
    2be8:	2b 81       	ldd	r18, Y+3	; 0x03
    2bea:	3c 81       	ldd	r19, Y+4	; 0x04
    2bec:	22 30       	cpi	r18, 0x02	; 2
    2bee:	31 05       	cpc	r19, r1
    2bf0:	81 f0       	breq	.+32     	; 0x2c12 <GPIO_readPort+0x68>
    2bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf6:	83 30       	cpi	r24, 0x03	; 3
    2bf8:	91 05       	cpc	r25, r1
    2bfa:	81 f0       	breq	.+32     	; 0x2c1c <GPIO_readPort+0x72>
    2bfc:	13 c0       	rjmp	.+38     	; 0x2c24 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2bfe:	e9 e3       	ldi	r30, 0x39	; 57
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	80 81       	ld	r24, Z
    2c04:	89 83       	std	Y+1, r24	; 0x01
    2c06:	0e c0       	rjmp	.+28     	; 0x2c24 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2c08:	e6 e3       	ldi	r30, 0x36	; 54
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	80 81       	ld	r24, Z
    2c0e:	89 83       	std	Y+1, r24	; 0x01
    2c10:	09 c0       	rjmp	.+18     	; 0x2c24 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2c12:	e3 e3       	ldi	r30, 0x33	; 51
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 81       	ld	r24, Z
    2c18:	89 83       	std	Y+1, r24	; 0x01
    2c1a:	04 c0       	rjmp	.+8      	; 0x2c24 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2c1c:	e0 e3       	ldi	r30, 0x30	; 48
    2c1e:	f0 e0       	ldi	r31, 0x00	; 0
    2c20:	80 81       	ld	r24, Z
    2c22:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2c24:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c26:	0f 90       	pop	r0
    2c28:	0f 90       	pop	r0
    2c2a:	0f 90       	pop	r0
    2c2c:	0f 90       	pop	r0
    2c2e:	cf 91       	pop	r28
    2c30:	df 91       	pop	r29
    2c32:	08 95       	ret

00002c34 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2c34:	df 93       	push	r29
    2c36:	cf 93       	push	r28
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
    2c3c:	60 97       	sbiw	r28, 0x10	; 16
    2c3e:	0f b6       	in	r0, 0x3f	; 63
    2c40:	f8 94       	cli
    2c42:	de bf       	out	0x3e, r29	; 62
    2c44:	0f be       	out	0x3f, r0	; 63
    2c46:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	60 e0       	ldi	r22, 0x00	; 0
    2c4c:	40 e0       	ldi	r20, 0x00	; 0
    2c4e:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	61 e0       	ldi	r22, 0x01	; 1
    2c56:	40 e0       	ldi	r20, 0x00	; 0
    2c58:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2c5c:	80 e0       	ldi	r24, 0x00	; 0
    2c5e:	62 e0       	ldi	r22, 0x02	; 2
    2c60:	40 e0       	ldi	r20, 0x00	; 0
    2c62:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	63 e0       	ldi	r22, 0x03	; 3
    2c6a:	40 e0       	ldi	r20, 0x00	; 0
    2c6c:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	64 e0       	ldi	r22, 0x04	; 4
    2c74:	40 e0       	ldi	r20, 0x00	; 0
    2c76:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2c7a:	80 e0       	ldi	r24, 0x00	; 0
    2c7c:	65 e0       	ldi	r22, 0x05	; 5
    2c7e:	40 e0       	ldi	r20, 0x00	; 0
    2c80:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	66 e0       	ldi	r22, 0x06	; 6
    2c88:	40 e0       	ldi	r20, 0x00	; 0
    2c8a:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2c8e:	80 e0       	ldi	r24, 0x00	; 0
    2c90:	67 e0       	ldi	r22, 0x07	; 7
    2c92:	40 e0       	ldi	r20, 0x00	; 0
    2c94:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2c98:	1f 86       	std	Y+15, r1	; 0x0f
    2c9a:	ab c0       	rjmp	.+342    	; 0x2df2 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2ca0:	41 e0       	ldi	r20, 0x01	; 1
    2ca2:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	6f 85       	ldd	r22, Y+15	; 0x0f
    2caa:	40 e0       	ldi	r20, 0x00	; 0
    2cac:	0e 94 c7 13 	call	0x278e	; 0x278e <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2cb0:	18 8a       	std	Y+16, r1	; 0x10
    2cb2:	22 c0       	rjmp	.+68     	; 0x2cf8 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2cb4:	88 89       	ldd	r24, Y+16	; 0x10
    2cb6:	98 2f       	mov	r25, r24
    2cb8:	9c 5f       	subi	r25, 0xFC	; 252
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	69 2f       	mov	r22, r25
    2cbe:	0e 94 b2 14 	call	0x2964	; 0x2964 <GPIO_readPin>
    2cc2:	88 23       	and	r24, r24
    2cc4:	b1 f4       	brne	.+44     	; 0x2cf2 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifndef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2cc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cc8:	88 2f       	mov	r24, r24
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	88 0f       	add	r24, r24
    2cce:	99 1f       	adc	r25, r25
    2cd0:	88 0f       	add	r24, r24
    2cd2:	99 1f       	adc	r25, r25
    2cd4:	98 2f       	mov	r25, r24
    2cd6:	88 89       	ldd	r24, Y+16	; 0x10
    2cd8:	89 0f       	add	r24, r25
    2cda:	8f 5f       	subi	r24, 0xFF	; 255
    2cdc:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    2ce0:	60 96       	adiw	r28, 0x10	; 16
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	f8 94       	cli
    2ce6:	de bf       	out	0x3e, r29	; 62
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	cd bf       	out	0x3d, r28	; 61
    2cec:	cf 91       	pop	r28
    2cee:	df 91       	pop	r29
    2cf0:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2cf2:	88 89       	ldd	r24, Y+16	; 0x10
    2cf4:	8f 5f       	subi	r24, 0xFF	; 255
    2cf6:	88 8b       	std	Y+16, r24	; 0x10
    2cf8:	88 89       	ldd	r24, Y+16	; 0x10
    2cfa:	84 30       	cpi	r24, 0x04	; 4
    2cfc:	d8 f2       	brcs	.-74     	; 0x2cb4 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2cfe:	80 e0       	ldi	r24, 0x00	; 0
    2d00:	6f 85       	ldd	r22, Y+15	; 0x0f
    2d02:	40 e0       	ldi	r20, 0x00	; 0
    2d04:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <GPIO_setupPinDirection>
    2d08:	80 e0       	ldi	r24, 0x00	; 0
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	a0 ea       	ldi	r26, 0xA0	; 160
    2d0e:	b0 e4       	ldi	r27, 0x40	; 64
    2d10:	8b 87       	std	Y+11, r24	; 0x0b
    2d12:	9c 87       	std	Y+12, r25	; 0x0c
    2d14:	ad 87       	std	Y+13, r26	; 0x0d
    2d16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d18:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	4a ef       	ldi	r20, 0xFA	; 250
    2d26:	54 e4       	ldi	r21, 0x44	; 68
    2d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	8f 83       	std	Y+7, r24	; 0x07
    2d32:	98 87       	std	Y+8, r25	; 0x08
    2d34:	a9 87       	std	Y+9, r26	; 0x09
    2d36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d38:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3a:	78 85       	ldd	r23, Y+8	; 0x08
    2d3c:	89 85       	ldd	r24, Y+9	; 0x09
    2d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	40 e8       	ldi	r20, 0x80	; 128
    2d46:	5f e3       	ldi	r21, 0x3F	; 63
    2d48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d4c:	88 23       	and	r24, r24
    2d4e:	2c f4       	brge	.+10     	; 0x2d5a <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	9e 83       	std	Y+6, r25	; 0x06
    2d56:	8d 83       	std	Y+5, r24	; 0x05
    2d58:	3f c0       	rjmp	.+126    	; 0x2dd8 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    2d5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d5c:	78 85       	ldd	r23, Y+8	; 0x08
    2d5e:	89 85       	ldd	r24, Y+9	; 0x09
    2d60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	3f ef       	ldi	r19, 0xFF	; 255
    2d66:	4f e7       	ldi	r20, 0x7F	; 127
    2d68:	57 e4       	ldi	r21, 0x47	; 71
    2d6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d6e:	18 16       	cp	r1, r24
    2d70:	4c f5       	brge	.+82     	; 0x2dc4 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d72:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d74:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	40 e2       	ldi	r20, 0x20	; 32
    2d80:	51 e4       	ldi	r21, 0x41	; 65
    2d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	bc 01       	movw	r22, r24
    2d8c:	cd 01       	movw	r24, r26
    2d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	9e 83       	std	Y+6, r25	; 0x06
    2d98:	8d 83       	std	Y+5, r24	; 0x05
    2d9a:	0f c0       	rjmp	.+30     	; 0x2dba <KEYPAD_getPressedKey+0x186>
    2d9c:	88 ec       	ldi	r24, 0xC8	; 200
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	9c 83       	std	Y+4, r25	; 0x04
    2da2:	8b 83       	std	Y+3, r24	; 0x03
    2da4:	8b 81       	ldd	r24, Y+3	; 0x03
    2da6:	9c 81       	ldd	r25, Y+4	; 0x04
    2da8:	01 97       	sbiw	r24, 0x01	; 1
    2daa:	f1 f7       	brne	.-4      	; 0x2da8 <KEYPAD_getPressedKey+0x174>
    2dac:	9c 83       	std	Y+4, r25	; 0x04
    2dae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db0:	8d 81       	ldd	r24, Y+5	; 0x05
    2db2:	9e 81       	ldd	r25, Y+6	; 0x06
    2db4:	01 97       	sbiw	r24, 0x01	; 1
    2db6:	9e 83       	std	Y+6, r25	; 0x06
    2db8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dba:	8d 81       	ldd	r24, Y+5	; 0x05
    2dbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dbe:	00 97       	sbiw	r24, 0x00	; 0
    2dc0:	69 f7       	brne	.-38     	; 0x2d9c <KEYPAD_getPressedKey+0x168>
    2dc2:	14 c0       	rjmp	.+40     	; 0x2dec <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc4:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc6:	78 85       	ldd	r23, Y+8	; 0x08
    2dc8:	89 85       	ldd	r24, Y+9	; 0x09
    2dca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	9e 83       	std	Y+6, r25	; 0x06
    2dd6:	8d 83       	std	Y+5, r24	; 0x05
    2dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dda:	9e 81       	ldd	r25, Y+6	; 0x06
    2ddc:	9a 83       	std	Y+2, r25	; 0x02
    2dde:	89 83       	std	Y+1, r24	; 0x01
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	9a 81       	ldd	r25, Y+2	; 0x02
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	f1 f7       	brne	.-4      	; 0x2de4 <KEYPAD_getPressedKey+0x1b0>
    2de8:	9a 83       	std	Y+2, r25	; 0x02
    2dea:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2dec:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dee:	8f 5f       	subi	r24, 0xFF	; 255
    2df0:	8f 87       	std	Y+15, r24	; 0x0f
    2df2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2df4:	84 30       	cpi	r24, 0x04	; 4
    2df6:	08 f4       	brcc	.+2      	; 0x2dfa <KEYPAD_getPressedKey+0x1c6>
    2df8:	51 cf       	rjmp	.-350    	; 0x2c9c <KEYPAD_getPressedKey+0x68>
    2dfa:	4e cf       	rjmp	.-356    	; 0x2c98 <KEYPAD_getPressedKey+0x64>

00002dfc <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2dfc:	df 93       	push	r29
    2dfe:	cf 93       	push	r28
    2e00:	00 d0       	rcall	.+0      	; 0x2e02 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2e02:	00 d0       	rcall	.+0      	; 0x2e04 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2e04:	cd b7       	in	r28, 0x3d	; 61
    2e06:	de b7       	in	r29, 0x3e	; 62
    2e08:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2e0a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0e:	28 2f       	mov	r18, r24
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	3c 83       	std	Y+4, r19	; 0x04
    2e14:	2b 83       	std	Y+3, r18	; 0x03
    2e16:	8b 81       	ldd	r24, Y+3	; 0x03
    2e18:	9c 81       	ldd	r25, Y+4	; 0x04
    2e1a:	88 30       	cpi	r24, 0x08	; 8
    2e1c:	91 05       	cpc	r25, r1
    2e1e:	09 f4       	brne	.+2      	; 0x2e22 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2e20:	70 c0       	rjmp	.+224    	; 0x2f02 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2e22:	2b 81       	ldd	r18, Y+3	; 0x03
    2e24:	3c 81       	ldd	r19, Y+4	; 0x04
    2e26:	29 30       	cpi	r18, 0x09	; 9
    2e28:	31 05       	cpc	r19, r1
    2e2a:	5c f5       	brge	.+86     	; 0x2e82 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e30:	84 30       	cpi	r24, 0x04	; 4
    2e32:	91 05       	cpc	r25, r1
    2e34:	09 f4       	brne	.+2      	; 0x2e38 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2e36:	59 c0       	rjmp	.+178    	; 0x2eea <KEYPAD_4x4_adjustKeyNumber+0xee>
    2e38:	2b 81       	ldd	r18, Y+3	; 0x03
    2e3a:	3c 81       	ldd	r19, Y+4	; 0x04
    2e3c:	25 30       	cpi	r18, 0x05	; 5
    2e3e:	31 05       	cpc	r19, r1
    2e40:	9c f4       	brge	.+38     	; 0x2e68 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2e42:	8b 81       	ldd	r24, Y+3	; 0x03
    2e44:	9c 81       	ldd	r25, Y+4	; 0x04
    2e46:	82 30       	cpi	r24, 0x02	; 2
    2e48:	91 05       	cpc	r25, r1
    2e4a:	09 f4       	brne	.+2      	; 0x2e4e <KEYPAD_4x4_adjustKeyNumber+0x52>
    2e4c:	48 c0       	rjmp	.+144    	; 0x2ede <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2e4e:	2b 81       	ldd	r18, Y+3	; 0x03
    2e50:	3c 81       	ldd	r19, Y+4	; 0x04
    2e52:	23 30       	cpi	r18, 0x03	; 3
    2e54:	31 05       	cpc	r19, r1
    2e56:	0c f0       	brlt	.+2      	; 0x2e5a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2e58:	45 c0       	rjmp	.+138    	; 0x2ee4 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e5e:	81 30       	cpi	r24, 0x01	; 1
    2e60:	91 05       	cpc	r25, r1
    2e62:	09 f4       	brne	.+2      	; 0x2e66 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2e64:	39 c0       	rjmp	.+114    	; 0x2ed8 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2e66:	67 c0       	rjmp	.+206    	; 0x2f36 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2e68:	2b 81       	ldd	r18, Y+3	; 0x03
    2e6a:	3c 81       	ldd	r19, Y+4	; 0x04
    2e6c:	26 30       	cpi	r18, 0x06	; 6
    2e6e:	31 05       	cpc	r19, r1
    2e70:	09 f4       	brne	.+2      	; 0x2e74 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2e72:	41 c0       	rjmp	.+130    	; 0x2ef6 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2e74:	8b 81       	ldd	r24, Y+3	; 0x03
    2e76:	9c 81       	ldd	r25, Y+4	; 0x04
    2e78:	87 30       	cpi	r24, 0x07	; 7
    2e7a:	91 05       	cpc	r25, r1
    2e7c:	0c f0       	brlt	.+2      	; 0x2e80 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2e7e:	3e c0       	rjmp	.+124    	; 0x2efc <KEYPAD_4x4_adjustKeyNumber+0x100>
    2e80:	37 c0       	rjmp	.+110    	; 0x2ef0 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2e82:	2b 81       	ldd	r18, Y+3	; 0x03
    2e84:	3c 81       	ldd	r19, Y+4	; 0x04
    2e86:	2c 30       	cpi	r18, 0x0C	; 12
    2e88:	31 05       	cpc	r19, r1
    2e8a:	09 f4       	brne	.+2      	; 0x2e8e <KEYPAD_4x4_adjustKeyNumber+0x92>
    2e8c:	46 c0       	rjmp	.+140    	; 0x2f1a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e90:	9c 81       	ldd	r25, Y+4	; 0x04
    2e92:	8d 30       	cpi	r24, 0x0D	; 13
    2e94:	91 05       	cpc	r25, r1
    2e96:	5c f4       	brge	.+22     	; 0x2eae <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2e98:	2b 81       	ldd	r18, Y+3	; 0x03
    2e9a:	3c 81       	ldd	r19, Y+4	; 0x04
    2e9c:	2a 30       	cpi	r18, 0x0A	; 10
    2e9e:	31 05       	cpc	r19, r1
    2ea0:	b1 f1       	breq	.+108    	; 0x2f0e <KEYPAD_4x4_adjustKeyNumber+0x112>
    2ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea6:	8b 30       	cpi	r24, 0x0B	; 11
    2ea8:	91 05       	cpc	r25, r1
    2eaa:	a4 f5       	brge	.+104    	; 0x2f14 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2eac:	2d c0       	rjmp	.+90     	; 0x2f08 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2eae:	2b 81       	ldd	r18, Y+3	; 0x03
    2eb0:	3c 81       	ldd	r19, Y+4	; 0x04
    2eb2:	2e 30       	cpi	r18, 0x0E	; 14
    2eb4:	31 05       	cpc	r19, r1
    2eb6:	b9 f1       	breq	.+110    	; 0x2f26 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eba:	9c 81       	ldd	r25, Y+4	; 0x04
    2ebc:	8e 30       	cpi	r24, 0x0E	; 14
    2ebe:	91 05       	cpc	r25, r1
    2ec0:	7c f1       	brlt	.+94     	; 0x2f20 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2ec2:	2b 81       	ldd	r18, Y+3	; 0x03
    2ec4:	3c 81       	ldd	r19, Y+4	; 0x04
    2ec6:	2f 30       	cpi	r18, 0x0F	; 15
    2ec8:	31 05       	cpc	r19, r1
    2eca:	79 f1       	breq	.+94     	; 0x2f2a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ece:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed0:	80 31       	cpi	r24, 0x10	; 16
    2ed2:	91 05       	cpc	r25, r1
    2ed4:	69 f1       	breq	.+90     	; 0x2f30 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2ed6:	2f c0       	rjmp	.+94     	; 0x2f36 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2ed8:	87 e0       	ldi	r24, 0x07	; 7
    2eda:	89 83       	std	Y+1, r24	; 0x01
    2edc:	2e c0       	rjmp	.+92     	; 0x2f3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2ede:	88 e0       	ldi	r24, 0x08	; 8
    2ee0:	89 83       	std	Y+1, r24	; 0x01
    2ee2:	2b c0       	rjmp	.+86     	; 0x2f3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2ee4:	89 e0       	ldi	r24, 0x09	; 9
    2ee6:	89 83       	std	Y+1, r24	; 0x01
    2ee8:	28 c0       	rjmp	.+80     	; 0x2f3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2eea:	85 e2       	ldi	r24, 0x25	; 37
    2eec:	89 83       	std	Y+1, r24	; 0x01
    2eee:	25 c0       	rjmp	.+74     	; 0x2f3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2ef0:	84 e0       	ldi	r24, 0x04	; 4
    2ef2:	89 83       	std	Y+1, r24	; 0x01
    2ef4:	22 c0       	rjmp	.+68     	; 0x2f3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2ef6:	85 e0       	ldi	r24, 0x05	; 5
    2ef8:	89 83       	std	Y+1, r24	; 0x01
    2efa:	1f c0       	rjmp	.+62     	; 0x2f3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2efc:	86 e0       	ldi	r24, 0x06	; 6
    2efe:	89 83       	std	Y+1, r24	; 0x01
    2f00:	1c c0       	rjmp	.+56     	; 0x2f3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2f02:	8a e2       	ldi	r24, 0x2A	; 42
    2f04:	89 83       	std	Y+1, r24	; 0x01
    2f06:	19 c0       	rjmp	.+50     	; 0x2f3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	89 83       	std	Y+1, r24	; 0x01
    2f0c:	16 c0       	rjmp	.+44     	; 0x2f3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2f0e:	82 e0       	ldi	r24, 0x02	; 2
    2f10:	89 83       	std	Y+1, r24	; 0x01
    2f12:	13 c0       	rjmp	.+38     	; 0x2f3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2f14:	83 e0       	ldi	r24, 0x03	; 3
    2f16:	89 83       	std	Y+1, r24	; 0x01
    2f18:	10 c0       	rjmp	.+32     	; 0x2f3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '='; /* ASCII Code of '-' */
    2f1a:	8d e3       	ldi	r24, 0x3D	; 61
    2f1c:	89 83       	std	Y+1, r24	; 0x01
    2f1e:	0d c0       	rjmp	.+26     	; 0x2f3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2f20:	8d e0       	ldi	r24, 0x0D	; 13
    2f22:	89 83       	std	Y+1, r24	; 0x01
    2f24:	0a c0       	rjmp	.+20     	; 0x2f3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2f26:	19 82       	std	Y+1, r1	; 0x01
    2f28:	08 c0       	rjmp	.+16     	; 0x2f3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '-'; /* ASCII Code of '=' */
    2f2a:	8d e2       	ldi	r24, 0x2D	; 45
    2f2c:	89 83       	std	Y+1, r24	; 0x01
    2f2e:	05 c0       	rjmp	.+10     	; 0x2f3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2f30:	8b e2       	ldi	r24, 0x2B	; 43
    2f32:	89 83       	std	Y+1, r24	; 0x01
    2f34:	02 c0       	rjmp	.+4      	; 0x2f3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2f36:	8a 81       	ldd	r24, Y+2	; 0x02
    2f38:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2f3a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2f3c:	0f 90       	pop	r0
    2f3e:	0f 90       	pop	r0
    2f40:	0f 90       	pop	r0
    2f42:	0f 90       	pop	r0
    2f44:	cf 91       	pop	r28
    2f46:	df 91       	pop	r29
    2f48:	08 95       	ret

00002f4a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2f4a:	df 93       	push	r29
    2f4c:	cf 93       	push	r28
    2f4e:	cd b7       	in	r28, 0x3d	; 61
    2f50:	de b7       	in	r29, 0x3e	; 62
    2f52:	2e 97       	sbiw	r28, 0x0e	; 14
    2f54:	0f b6       	in	r0, 0x3f	; 63
    2f56:	f8 94       	cli
    2f58:	de bf       	out	0x3e, r29	; 62
    2f5a:	0f be       	out	0x3f, r0	; 63
    2f5c:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2f5e:	83 e0       	ldi	r24, 0x03	; 3
    2f60:	64 e0       	ldi	r22, 0x04	; 4
    2f62:	41 e0       	ldi	r20, 0x01	; 1
    2f64:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2f68:	83 e0       	ldi	r24, 0x03	; 3
    2f6a:	65 e0       	ldi	r22, 0x05	; 5
    2f6c:	41 e0       	ldi	r20, 0x01	; 1
    2f6e:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <GPIO_setupPinDirection>
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	a0 ea       	ldi	r26, 0xA0	; 160
    2f78:	b1 e4       	ldi	r27, 0x41	; 65
    2f7a:	8b 87       	std	Y+11, r24	; 0x0b
    2f7c:	9c 87       	std	Y+12, r25	; 0x0c
    2f7e:	ad 87       	std	Y+13, r26	; 0x0d
    2f80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	4a ef       	ldi	r20, 0xFA	; 250
    2f90:	54 e4       	ldi	r21, 0x44	; 68
    2f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f96:	dc 01       	movw	r26, r24
    2f98:	cb 01       	movw	r24, r22
    2f9a:	8f 83       	std	Y+7, r24	; 0x07
    2f9c:	98 87       	std	Y+8, r25	; 0x08
    2f9e:	a9 87       	std	Y+9, r26	; 0x09
    2fa0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fa2:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa4:	78 85       	ldd	r23, Y+8	; 0x08
    2fa6:	89 85       	ldd	r24, Y+9	; 0x09
    2fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	40 e8       	ldi	r20, 0x80	; 128
    2fb0:	5f e3       	ldi	r21, 0x3F	; 63
    2fb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fb6:	88 23       	and	r24, r24
    2fb8:	2c f4       	brge	.+10     	; 0x2fc4 <LCD_init+0x7a>
		__ticks = 1;
    2fba:	81 e0       	ldi	r24, 0x01	; 1
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	9e 83       	std	Y+6, r25	; 0x06
    2fc0:	8d 83       	std	Y+5, r24	; 0x05
    2fc2:	3f c0       	rjmp	.+126    	; 0x3042 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2fc4:	6f 81       	ldd	r22, Y+7	; 0x07
    2fc6:	78 85       	ldd	r23, Y+8	; 0x08
    2fc8:	89 85       	ldd	r24, Y+9	; 0x09
    2fca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fcc:	20 e0       	ldi	r18, 0x00	; 0
    2fce:	3f ef       	ldi	r19, 0xFF	; 255
    2fd0:	4f e7       	ldi	r20, 0x7F	; 127
    2fd2:	57 e4       	ldi	r21, 0x47	; 71
    2fd4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fd8:	18 16       	cp	r1, r24
    2fda:	4c f5       	brge	.+82     	; 0x302e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fde:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fe0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fe2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	40 e2       	ldi	r20, 0x20	; 32
    2fea:	51 e4       	ldi	r21, 0x41	; 65
    2fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff0:	dc 01       	movw	r26, r24
    2ff2:	cb 01       	movw	r24, r22
    2ff4:	bc 01       	movw	r22, r24
    2ff6:	cd 01       	movw	r24, r26
    2ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	9e 83       	std	Y+6, r25	; 0x06
    3002:	8d 83       	std	Y+5, r24	; 0x05
    3004:	0f c0       	rjmp	.+30     	; 0x3024 <LCD_init+0xda>
    3006:	88 ec       	ldi	r24, 0xC8	; 200
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	9c 83       	std	Y+4, r25	; 0x04
    300c:	8b 83       	std	Y+3, r24	; 0x03
    300e:	8b 81       	ldd	r24, Y+3	; 0x03
    3010:	9c 81       	ldd	r25, Y+4	; 0x04
    3012:	01 97       	sbiw	r24, 0x01	; 1
    3014:	f1 f7       	brne	.-4      	; 0x3012 <LCD_init+0xc8>
    3016:	9c 83       	std	Y+4, r25	; 0x04
    3018:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    301a:	8d 81       	ldd	r24, Y+5	; 0x05
    301c:	9e 81       	ldd	r25, Y+6	; 0x06
    301e:	01 97       	sbiw	r24, 0x01	; 1
    3020:	9e 83       	std	Y+6, r25	; 0x06
    3022:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3024:	8d 81       	ldd	r24, Y+5	; 0x05
    3026:	9e 81       	ldd	r25, Y+6	; 0x06
    3028:	00 97       	sbiw	r24, 0x00	; 0
    302a:	69 f7       	brne	.-38     	; 0x3006 <LCD_init+0xbc>
    302c:	14 c0       	rjmp	.+40     	; 0x3056 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    302e:	6f 81       	ldd	r22, Y+7	; 0x07
    3030:	78 85       	ldd	r23, Y+8	; 0x08
    3032:	89 85       	ldd	r24, Y+9	; 0x09
    3034:	9a 85       	ldd	r25, Y+10	; 0x0a
    3036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	9e 83       	std	Y+6, r25	; 0x06
    3040:	8d 83       	std	Y+5, r24	; 0x05
    3042:	8d 81       	ldd	r24, Y+5	; 0x05
    3044:	9e 81       	ldd	r25, Y+6	; 0x06
    3046:	9a 83       	std	Y+2, r25	; 0x02
    3048:	89 83       	std	Y+1, r24	; 0x01
    304a:	89 81       	ldd	r24, Y+1	; 0x01
    304c:	9a 81       	ldd	r25, Y+2	; 0x02
    304e:	01 97       	sbiw	r24, 0x01	; 1
    3050:	f1 f7       	brne	.-4      	; 0x304e <LCD_init+0x104>
    3052:	9a 83       	std	Y+2, r25	; 0x02
    3054:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    3056:	82 e0       	ldi	r24, 0x02	; 2
    3058:	6f ef       	ldi	r22, 0xFF	; 255
    305a:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    305e:	88 e3       	ldi	r24, 0x38	; 56
    3060:	0e 94 41 18 	call	0x3082	; 0x3082 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    3064:	8c e0       	ldi	r24, 0x0C	; 12
    3066:	0e 94 41 18 	call	0x3082	; 0x3082 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	0e 94 41 18 	call	0x3082	; 0x3082 <LCD_sendCommand>
}
    3070:	2e 96       	adiw	r28, 0x0e	; 14
    3072:	0f b6       	in	r0, 0x3f	; 63
    3074:	f8 94       	cli
    3076:	de bf       	out	0x3e, r29	; 62
    3078:	0f be       	out	0x3f, r0	; 63
    307a:	cd bf       	out	0x3d, r28	; 61
    307c:	cf 91       	pop	r28
    307e:	df 91       	pop	r29
    3080:	08 95       	ret

00003082 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    3082:	df 93       	push	r29
    3084:	cf 93       	push	r28
    3086:	cd b7       	in	r28, 0x3d	; 61
    3088:	de b7       	in	r29, 0x3e	; 62
    308a:	e9 97       	sbiw	r28, 0x39	; 57
    308c:	0f b6       	in	r0, 0x3f	; 63
    308e:	f8 94       	cli
    3090:	de bf       	out	0x3e, r29	; 62
    3092:	0f be       	out	0x3f, r0	; 63
    3094:	cd bf       	out	0x3d, r28	; 61
    3096:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    3098:	83 e0       	ldi	r24, 0x03	; 3
    309a:	64 e0       	ldi	r22, 0x04	; 4
    309c:	40 e0       	ldi	r20, 0x00	; 0
    309e:	0e 94 c7 13 	call	0x278e	; 0x278e <GPIO_writePin>
    30a2:	80 e0       	ldi	r24, 0x00	; 0
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	a0 e8       	ldi	r26, 0x80	; 128
    30a8:	bf e3       	ldi	r27, 0x3F	; 63
    30aa:	8d ab       	std	Y+53, r24	; 0x35
    30ac:	9e ab       	std	Y+54, r25	; 0x36
    30ae:	af ab       	std	Y+55, r26	; 0x37
    30b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30b2:	6d a9       	ldd	r22, Y+53	; 0x35
    30b4:	7e a9       	ldd	r23, Y+54	; 0x36
    30b6:	8f a9       	ldd	r24, Y+55	; 0x37
    30b8:	98 ad       	ldd	r25, Y+56	; 0x38
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	4a ef       	ldi	r20, 0xFA	; 250
    30c0:	54 e4       	ldi	r21, 0x44	; 68
    30c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c6:	dc 01       	movw	r26, r24
    30c8:	cb 01       	movw	r24, r22
    30ca:	89 ab       	std	Y+49, r24	; 0x31
    30cc:	9a ab       	std	Y+50, r25	; 0x32
    30ce:	ab ab       	std	Y+51, r26	; 0x33
    30d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    30d2:	69 a9       	ldd	r22, Y+49	; 0x31
    30d4:	7a a9       	ldd	r23, Y+50	; 0x32
    30d6:	8b a9       	ldd	r24, Y+51	; 0x33
    30d8:	9c a9       	ldd	r25, Y+52	; 0x34
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	40 e8       	ldi	r20, 0x80	; 128
    30e0:	5f e3       	ldi	r21, 0x3F	; 63
    30e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30e6:	88 23       	and	r24, r24
    30e8:	2c f4       	brge	.+10     	; 0x30f4 <LCD_sendCommand+0x72>
		__ticks = 1;
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	98 ab       	std	Y+48, r25	; 0x30
    30f0:	8f a7       	std	Y+47, r24	; 0x2f
    30f2:	3f c0       	rjmp	.+126    	; 0x3172 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    30f4:	69 a9       	ldd	r22, Y+49	; 0x31
    30f6:	7a a9       	ldd	r23, Y+50	; 0x32
    30f8:	8b a9       	ldd	r24, Y+51	; 0x33
    30fa:	9c a9       	ldd	r25, Y+52	; 0x34
    30fc:	20 e0       	ldi	r18, 0x00	; 0
    30fe:	3f ef       	ldi	r19, 0xFF	; 255
    3100:	4f e7       	ldi	r20, 0x7F	; 127
    3102:	57 e4       	ldi	r21, 0x47	; 71
    3104:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3108:	18 16       	cp	r1, r24
    310a:	4c f5       	brge	.+82     	; 0x315e <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    310c:	6d a9       	ldd	r22, Y+53	; 0x35
    310e:	7e a9       	ldd	r23, Y+54	; 0x36
    3110:	8f a9       	ldd	r24, Y+55	; 0x37
    3112:	98 ad       	ldd	r25, Y+56	; 0x38
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	40 e2       	ldi	r20, 0x20	; 32
    311a:	51 e4       	ldi	r21, 0x41	; 65
    311c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3120:	dc 01       	movw	r26, r24
    3122:	cb 01       	movw	r24, r22
    3124:	bc 01       	movw	r22, r24
    3126:	cd 01       	movw	r24, r26
    3128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312c:	dc 01       	movw	r26, r24
    312e:	cb 01       	movw	r24, r22
    3130:	98 ab       	std	Y+48, r25	; 0x30
    3132:	8f a7       	std	Y+47, r24	; 0x2f
    3134:	0f c0       	rjmp	.+30     	; 0x3154 <LCD_sendCommand+0xd2>
    3136:	88 ec       	ldi	r24, 0xC8	; 200
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	9e a7       	std	Y+46, r25	; 0x2e
    313c:	8d a7       	std	Y+45, r24	; 0x2d
    313e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3140:	9e a5       	ldd	r25, Y+46	; 0x2e
    3142:	01 97       	sbiw	r24, 0x01	; 1
    3144:	f1 f7       	brne	.-4      	; 0x3142 <LCD_sendCommand+0xc0>
    3146:	9e a7       	std	Y+46, r25	; 0x2e
    3148:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    314a:	8f a5       	ldd	r24, Y+47	; 0x2f
    314c:	98 a9       	ldd	r25, Y+48	; 0x30
    314e:	01 97       	sbiw	r24, 0x01	; 1
    3150:	98 ab       	std	Y+48, r25	; 0x30
    3152:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3154:	8f a5       	ldd	r24, Y+47	; 0x2f
    3156:	98 a9       	ldd	r25, Y+48	; 0x30
    3158:	00 97       	sbiw	r24, 0x00	; 0
    315a:	69 f7       	brne	.-38     	; 0x3136 <LCD_sendCommand+0xb4>
    315c:	14 c0       	rjmp	.+40     	; 0x3186 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    315e:	69 a9       	ldd	r22, Y+49	; 0x31
    3160:	7a a9       	ldd	r23, Y+50	; 0x32
    3162:	8b a9       	ldd	r24, Y+51	; 0x33
    3164:	9c a9       	ldd	r25, Y+52	; 0x34
    3166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    316a:	dc 01       	movw	r26, r24
    316c:	cb 01       	movw	r24, r22
    316e:	98 ab       	std	Y+48, r25	; 0x30
    3170:	8f a7       	std	Y+47, r24	; 0x2f
    3172:	8f a5       	ldd	r24, Y+47	; 0x2f
    3174:	98 a9       	ldd	r25, Y+48	; 0x30
    3176:	9c a7       	std	Y+44, r25	; 0x2c
    3178:	8b a7       	std	Y+43, r24	; 0x2b
    317a:	8b a5       	ldd	r24, Y+43	; 0x2b
    317c:	9c a5       	ldd	r25, Y+44	; 0x2c
    317e:	01 97       	sbiw	r24, 0x01	; 1
    3180:	f1 f7       	brne	.-4      	; 0x317e <LCD_sendCommand+0xfc>
    3182:	9c a7       	std	Y+44, r25	; 0x2c
    3184:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3186:	83 e0       	ldi	r24, 0x03	; 3
    3188:	65 e0       	ldi	r22, 0x05	; 5
    318a:	41 e0       	ldi	r20, 0x01	; 1
    318c:	0e 94 c7 13 	call	0x278e	; 0x278e <GPIO_writePin>
    3190:	80 e0       	ldi	r24, 0x00	; 0
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	a0 e8       	ldi	r26, 0x80	; 128
    3196:	bf e3       	ldi	r27, 0x3F	; 63
    3198:	8f a3       	std	Y+39, r24	; 0x27
    319a:	98 a7       	std	Y+40, r25	; 0x28
    319c:	a9 a7       	std	Y+41, r26	; 0x29
    319e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31a0:	6f a1       	ldd	r22, Y+39	; 0x27
    31a2:	78 a5       	ldd	r23, Y+40	; 0x28
    31a4:	89 a5       	ldd	r24, Y+41	; 0x29
    31a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    31a8:	20 e0       	ldi	r18, 0x00	; 0
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	4a ef       	ldi	r20, 0xFA	; 250
    31ae:	54 e4       	ldi	r21, 0x44	; 68
    31b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b4:	dc 01       	movw	r26, r24
    31b6:	cb 01       	movw	r24, r22
    31b8:	8b a3       	std	Y+35, r24	; 0x23
    31ba:	9c a3       	std	Y+36, r25	; 0x24
    31bc:	ad a3       	std	Y+37, r26	; 0x25
    31be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    31c0:	6b a1       	ldd	r22, Y+35	; 0x23
    31c2:	7c a1       	ldd	r23, Y+36	; 0x24
    31c4:	8d a1       	ldd	r24, Y+37	; 0x25
    31c6:	9e a1       	ldd	r25, Y+38	; 0x26
    31c8:	20 e0       	ldi	r18, 0x00	; 0
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	40 e8       	ldi	r20, 0x80	; 128
    31ce:	5f e3       	ldi	r21, 0x3F	; 63
    31d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31d4:	88 23       	and	r24, r24
    31d6:	2c f4       	brge	.+10     	; 0x31e2 <LCD_sendCommand+0x160>
		__ticks = 1;
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	9a a3       	std	Y+34, r25	; 0x22
    31de:	89 a3       	std	Y+33, r24	; 0x21
    31e0:	3f c0       	rjmp	.+126    	; 0x3260 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    31e2:	6b a1       	ldd	r22, Y+35	; 0x23
    31e4:	7c a1       	ldd	r23, Y+36	; 0x24
    31e6:	8d a1       	ldd	r24, Y+37	; 0x25
    31e8:	9e a1       	ldd	r25, Y+38	; 0x26
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	3f ef       	ldi	r19, 0xFF	; 255
    31ee:	4f e7       	ldi	r20, 0x7F	; 127
    31f0:	57 e4       	ldi	r21, 0x47	; 71
    31f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31f6:	18 16       	cp	r1, r24
    31f8:	4c f5       	brge	.+82     	; 0x324c <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31fa:	6f a1       	ldd	r22, Y+39	; 0x27
    31fc:	78 a5       	ldd	r23, Y+40	; 0x28
    31fe:	89 a5       	ldd	r24, Y+41	; 0x29
    3200:	9a a5       	ldd	r25, Y+42	; 0x2a
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	40 e2       	ldi	r20, 0x20	; 32
    3208:	51 e4       	ldi	r21, 0x41	; 65
    320a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	bc 01       	movw	r22, r24
    3214:	cd 01       	movw	r24, r26
    3216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	9a a3       	std	Y+34, r25	; 0x22
    3220:	89 a3       	std	Y+33, r24	; 0x21
    3222:	0f c0       	rjmp	.+30     	; 0x3242 <LCD_sendCommand+0x1c0>
    3224:	88 ec       	ldi	r24, 0xC8	; 200
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	98 a3       	std	Y+32, r25	; 0x20
    322a:	8f 8f       	std	Y+31, r24	; 0x1f
    322c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    322e:	98 a1       	ldd	r25, Y+32	; 0x20
    3230:	01 97       	sbiw	r24, 0x01	; 1
    3232:	f1 f7       	brne	.-4      	; 0x3230 <LCD_sendCommand+0x1ae>
    3234:	98 a3       	std	Y+32, r25	; 0x20
    3236:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3238:	89 a1       	ldd	r24, Y+33	; 0x21
    323a:	9a a1       	ldd	r25, Y+34	; 0x22
    323c:	01 97       	sbiw	r24, 0x01	; 1
    323e:	9a a3       	std	Y+34, r25	; 0x22
    3240:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3242:	89 a1       	ldd	r24, Y+33	; 0x21
    3244:	9a a1       	ldd	r25, Y+34	; 0x22
    3246:	00 97       	sbiw	r24, 0x00	; 0
    3248:	69 f7       	brne	.-38     	; 0x3224 <LCD_sendCommand+0x1a2>
    324a:	14 c0       	rjmp	.+40     	; 0x3274 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    324c:	6b a1       	ldd	r22, Y+35	; 0x23
    324e:	7c a1       	ldd	r23, Y+36	; 0x24
    3250:	8d a1       	ldd	r24, Y+37	; 0x25
    3252:	9e a1       	ldd	r25, Y+38	; 0x26
    3254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3258:	dc 01       	movw	r26, r24
    325a:	cb 01       	movw	r24, r22
    325c:	9a a3       	std	Y+34, r25	; 0x22
    325e:	89 a3       	std	Y+33, r24	; 0x21
    3260:	89 a1       	ldd	r24, Y+33	; 0x21
    3262:	9a a1       	ldd	r25, Y+34	; 0x22
    3264:	9e 8f       	std	Y+30, r25	; 0x1e
    3266:	8d 8f       	std	Y+29, r24	; 0x1d
    3268:	8d 8d       	ldd	r24, Y+29	; 0x1d
    326a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    326c:	01 97       	sbiw	r24, 0x01	; 1
    326e:	f1 f7       	brne	.-4      	; 0x326c <LCD_sendCommand+0x1ea>
    3270:	9e 8f       	std	Y+30, r25	; 0x1e
    3272:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    3274:	82 e0       	ldi	r24, 0x02	; 2
    3276:	69 ad       	ldd	r22, Y+57	; 0x39
    3278:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_writePort>
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	a0 e8       	ldi	r26, 0x80	; 128
    3282:	bf e3       	ldi	r27, 0x3F	; 63
    3284:	89 8f       	std	Y+25, r24	; 0x19
    3286:	9a 8f       	std	Y+26, r25	; 0x1a
    3288:	ab 8f       	std	Y+27, r26	; 0x1b
    328a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    328c:	69 8d       	ldd	r22, Y+25	; 0x19
    328e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3290:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3292:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	4a ef       	ldi	r20, 0xFA	; 250
    329a:	54 e4       	ldi	r21, 0x44	; 68
    329c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a0:	dc 01       	movw	r26, r24
    32a2:	cb 01       	movw	r24, r22
    32a4:	8d 8b       	std	Y+21, r24	; 0x15
    32a6:	9e 8b       	std	Y+22, r25	; 0x16
    32a8:	af 8b       	std	Y+23, r26	; 0x17
    32aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32ac:	6d 89       	ldd	r22, Y+21	; 0x15
    32ae:	7e 89       	ldd	r23, Y+22	; 0x16
    32b0:	8f 89       	ldd	r24, Y+23	; 0x17
    32b2:	98 8d       	ldd	r25, Y+24	; 0x18
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	40 e8       	ldi	r20, 0x80	; 128
    32ba:	5f e3       	ldi	r21, 0x3F	; 63
    32bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32c0:	88 23       	and	r24, r24
    32c2:	2c f4       	brge	.+10     	; 0x32ce <LCD_sendCommand+0x24c>
		__ticks = 1;
    32c4:	81 e0       	ldi	r24, 0x01	; 1
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	9c 8b       	std	Y+20, r25	; 0x14
    32ca:	8b 8b       	std	Y+19, r24	; 0x13
    32cc:	3f c0       	rjmp	.+126    	; 0x334c <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    32ce:	6d 89       	ldd	r22, Y+21	; 0x15
    32d0:	7e 89       	ldd	r23, Y+22	; 0x16
    32d2:	8f 89       	ldd	r24, Y+23	; 0x17
    32d4:	98 8d       	ldd	r25, Y+24	; 0x18
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	3f ef       	ldi	r19, 0xFF	; 255
    32da:	4f e7       	ldi	r20, 0x7F	; 127
    32dc:	57 e4       	ldi	r21, 0x47	; 71
    32de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32e2:	18 16       	cp	r1, r24
    32e4:	4c f5       	brge	.+82     	; 0x3338 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32e6:	69 8d       	ldd	r22, Y+25	; 0x19
    32e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	40 e2       	ldi	r20, 0x20	; 32
    32f4:	51 e4       	ldi	r21, 0x41	; 65
    32f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32fa:	dc 01       	movw	r26, r24
    32fc:	cb 01       	movw	r24, r22
    32fe:	bc 01       	movw	r22, r24
    3300:	cd 01       	movw	r24, r26
    3302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3306:	dc 01       	movw	r26, r24
    3308:	cb 01       	movw	r24, r22
    330a:	9c 8b       	std	Y+20, r25	; 0x14
    330c:	8b 8b       	std	Y+19, r24	; 0x13
    330e:	0f c0       	rjmp	.+30     	; 0x332e <LCD_sendCommand+0x2ac>
    3310:	88 ec       	ldi	r24, 0xC8	; 200
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	9a 8b       	std	Y+18, r25	; 0x12
    3316:	89 8b       	std	Y+17, r24	; 0x11
    3318:	89 89       	ldd	r24, Y+17	; 0x11
    331a:	9a 89       	ldd	r25, Y+18	; 0x12
    331c:	01 97       	sbiw	r24, 0x01	; 1
    331e:	f1 f7       	brne	.-4      	; 0x331c <LCD_sendCommand+0x29a>
    3320:	9a 8b       	std	Y+18, r25	; 0x12
    3322:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3324:	8b 89       	ldd	r24, Y+19	; 0x13
    3326:	9c 89       	ldd	r25, Y+20	; 0x14
    3328:	01 97       	sbiw	r24, 0x01	; 1
    332a:	9c 8b       	std	Y+20, r25	; 0x14
    332c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    332e:	8b 89       	ldd	r24, Y+19	; 0x13
    3330:	9c 89       	ldd	r25, Y+20	; 0x14
    3332:	00 97       	sbiw	r24, 0x00	; 0
    3334:	69 f7       	brne	.-38     	; 0x3310 <LCD_sendCommand+0x28e>
    3336:	14 c0       	rjmp	.+40     	; 0x3360 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3338:	6d 89       	ldd	r22, Y+21	; 0x15
    333a:	7e 89       	ldd	r23, Y+22	; 0x16
    333c:	8f 89       	ldd	r24, Y+23	; 0x17
    333e:	98 8d       	ldd	r25, Y+24	; 0x18
    3340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3344:	dc 01       	movw	r26, r24
    3346:	cb 01       	movw	r24, r22
    3348:	9c 8b       	std	Y+20, r25	; 0x14
    334a:	8b 8b       	std	Y+19, r24	; 0x13
    334c:	8b 89       	ldd	r24, Y+19	; 0x13
    334e:	9c 89       	ldd	r25, Y+20	; 0x14
    3350:	98 8b       	std	Y+16, r25	; 0x10
    3352:	8f 87       	std	Y+15, r24	; 0x0f
    3354:	8f 85       	ldd	r24, Y+15	; 0x0f
    3356:	98 89       	ldd	r25, Y+16	; 0x10
    3358:	01 97       	sbiw	r24, 0x01	; 1
    335a:	f1 f7       	brne	.-4      	; 0x3358 <LCD_sendCommand+0x2d6>
    335c:	98 8b       	std	Y+16, r25	; 0x10
    335e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3360:	83 e0       	ldi	r24, 0x03	; 3
    3362:	65 e0       	ldi	r22, 0x05	; 5
    3364:	40 e0       	ldi	r20, 0x00	; 0
    3366:	0e 94 c7 13 	call	0x278e	; 0x278e <GPIO_writePin>
    336a:	80 e0       	ldi	r24, 0x00	; 0
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	a0 e8       	ldi	r26, 0x80	; 128
    3370:	bf e3       	ldi	r27, 0x3F	; 63
    3372:	8b 87       	std	Y+11, r24	; 0x0b
    3374:	9c 87       	std	Y+12, r25	; 0x0c
    3376:	ad 87       	std	Y+13, r26	; 0x0d
    3378:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    337a:	6b 85       	ldd	r22, Y+11	; 0x0b
    337c:	7c 85       	ldd	r23, Y+12	; 0x0c
    337e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3380:	9e 85       	ldd	r25, Y+14	; 0x0e
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	4a ef       	ldi	r20, 0xFA	; 250
    3388:	54 e4       	ldi	r21, 0x44	; 68
    338a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338e:	dc 01       	movw	r26, r24
    3390:	cb 01       	movw	r24, r22
    3392:	8f 83       	std	Y+7, r24	; 0x07
    3394:	98 87       	std	Y+8, r25	; 0x08
    3396:	a9 87       	std	Y+9, r26	; 0x09
    3398:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    339a:	6f 81       	ldd	r22, Y+7	; 0x07
    339c:	78 85       	ldd	r23, Y+8	; 0x08
    339e:	89 85       	ldd	r24, Y+9	; 0x09
    33a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	40 e8       	ldi	r20, 0x80	; 128
    33a8:	5f e3       	ldi	r21, 0x3F	; 63
    33aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33ae:	88 23       	and	r24, r24
    33b0:	2c f4       	brge	.+10     	; 0x33bc <LCD_sendCommand+0x33a>
		__ticks = 1;
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	9e 83       	std	Y+6, r25	; 0x06
    33b8:	8d 83       	std	Y+5, r24	; 0x05
    33ba:	3f c0       	rjmp	.+126    	; 0x343a <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    33bc:	6f 81       	ldd	r22, Y+7	; 0x07
    33be:	78 85       	ldd	r23, Y+8	; 0x08
    33c0:	89 85       	ldd	r24, Y+9	; 0x09
    33c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	3f ef       	ldi	r19, 0xFF	; 255
    33c8:	4f e7       	ldi	r20, 0x7F	; 127
    33ca:	57 e4       	ldi	r21, 0x47	; 71
    33cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33d0:	18 16       	cp	r1, r24
    33d2:	4c f5       	brge	.+82     	; 0x3426 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    33d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    33d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    33da:	9e 85       	ldd	r25, Y+14	; 0x0e
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	40 e2       	ldi	r20, 0x20	; 32
    33e2:	51 e4       	ldi	r21, 0x41	; 65
    33e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	bc 01       	movw	r22, r24
    33ee:	cd 01       	movw	r24, r26
    33f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f4:	dc 01       	movw	r26, r24
    33f6:	cb 01       	movw	r24, r22
    33f8:	9e 83       	std	Y+6, r25	; 0x06
    33fa:	8d 83       	std	Y+5, r24	; 0x05
    33fc:	0f c0       	rjmp	.+30     	; 0x341c <LCD_sendCommand+0x39a>
    33fe:	88 ec       	ldi	r24, 0xC8	; 200
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	9c 83       	std	Y+4, r25	; 0x04
    3404:	8b 83       	std	Y+3, r24	; 0x03
    3406:	8b 81       	ldd	r24, Y+3	; 0x03
    3408:	9c 81       	ldd	r25, Y+4	; 0x04
    340a:	01 97       	sbiw	r24, 0x01	; 1
    340c:	f1 f7       	brne	.-4      	; 0x340a <LCD_sendCommand+0x388>
    340e:	9c 83       	std	Y+4, r25	; 0x04
    3410:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3412:	8d 81       	ldd	r24, Y+5	; 0x05
    3414:	9e 81       	ldd	r25, Y+6	; 0x06
    3416:	01 97       	sbiw	r24, 0x01	; 1
    3418:	9e 83       	std	Y+6, r25	; 0x06
    341a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    341c:	8d 81       	ldd	r24, Y+5	; 0x05
    341e:	9e 81       	ldd	r25, Y+6	; 0x06
    3420:	00 97       	sbiw	r24, 0x00	; 0
    3422:	69 f7       	brne	.-38     	; 0x33fe <LCD_sendCommand+0x37c>
    3424:	14 c0       	rjmp	.+40     	; 0x344e <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3426:	6f 81       	ldd	r22, Y+7	; 0x07
    3428:	78 85       	ldd	r23, Y+8	; 0x08
    342a:	89 85       	ldd	r24, Y+9	; 0x09
    342c:	9a 85       	ldd	r25, Y+10	; 0x0a
    342e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3432:	dc 01       	movw	r26, r24
    3434:	cb 01       	movw	r24, r22
    3436:	9e 83       	std	Y+6, r25	; 0x06
    3438:	8d 83       	std	Y+5, r24	; 0x05
    343a:	8d 81       	ldd	r24, Y+5	; 0x05
    343c:	9e 81       	ldd	r25, Y+6	; 0x06
    343e:	9a 83       	std	Y+2, r25	; 0x02
    3440:	89 83       	std	Y+1, r24	; 0x01
    3442:	89 81       	ldd	r24, Y+1	; 0x01
    3444:	9a 81       	ldd	r25, Y+2	; 0x02
    3446:	01 97       	sbiw	r24, 0x01	; 1
    3448:	f1 f7       	brne	.-4      	; 0x3446 <LCD_sendCommand+0x3c4>
    344a:	9a 83       	std	Y+2, r25	; 0x02
    344c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    344e:	e9 96       	adiw	r28, 0x39	; 57
    3450:	0f b6       	in	r0, 0x3f	; 63
    3452:	f8 94       	cli
    3454:	de bf       	out	0x3e, r29	; 62
    3456:	0f be       	out	0x3f, r0	; 63
    3458:	cd bf       	out	0x3d, r28	; 61
    345a:	cf 91       	pop	r28
    345c:	df 91       	pop	r29
    345e:	08 95       	ret

00003460 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    3460:	df 93       	push	r29
    3462:	cf 93       	push	r28
    3464:	cd b7       	in	r28, 0x3d	; 61
    3466:	de b7       	in	r29, 0x3e	; 62
    3468:	e9 97       	sbiw	r28, 0x39	; 57
    346a:	0f b6       	in	r0, 0x3f	; 63
    346c:	f8 94       	cli
    346e:	de bf       	out	0x3e, r29	; 62
    3470:	0f be       	out	0x3f, r0	; 63
    3472:	cd bf       	out	0x3d, r28	; 61
    3474:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    3476:	83 e0       	ldi	r24, 0x03	; 3
    3478:	64 e0       	ldi	r22, 0x04	; 4
    347a:	41 e0       	ldi	r20, 0x01	; 1
    347c:	0e 94 c7 13 	call	0x278e	; 0x278e <GPIO_writePin>
    3480:	80 e0       	ldi	r24, 0x00	; 0
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	a0 e8       	ldi	r26, 0x80	; 128
    3486:	bf e3       	ldi	r27, 0x3F	; 63
    3488:	8d ab       	std	Y+53, r24	; 0x35
    348a:	9e ab       	std	Y+54, r25	; 0x36
    348c:	af ab       	std	Y+55, r26	; 0x37
    348e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3490:	6d a9       	ldd	r22, Y+53	; 0x35
    3492:	7e a9       	ldd	r23, Y+54	; 0x36
    3494:	8f a9       	ldd	r24, Y+55	; 0x37
    3496:	98 ad       	ldd	r25, Y+56	; 0x38
    3498:	20 e0       	ldi	r18, 0x00	; 0
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	4a ef       	ldi	r20, 0xFA	; 250
    349e:	54 e4       	ldi	r21, 0x44	; 68
    34a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	89 ab       	std	Y+49, r24	; 0x31
    34aa:	9a ab       	std	Y+50, r25	; 0x32
    34ac:	ab ab       	std	Y+51, r26	; 0x33
    34ae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    34b0:	69 a9       	ldd	r22, Y+49	; 0x31
    34b2:	7a a9       	ldd	r23, Y+50	; 0x32
    34b4:	8b a9       	ldd	r24, Y+51	; 0x33
    34b6:	9c a9       	ldd	r25, Y+52	; 0x34
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	40 e8       	ldi	r20, 0x80	; 128
    34be:	5f e3       	ldi	r21, 0x3F	; 63
    34c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34c4:	88 23       	and	r24, r24
    34c6:	2c f4       	brge	.+10     	; 0x34d2 <LCD_displayCharacter+0x72>
		__ticks = 1;
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	98 ab       	std	Y+48, r25	; 0x30
    34ce:	8f a7       	std	Y+47, r24	; 0x2f
    34d0:	3f c0       	rjmp	.+126    	; 0x3550 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    34d2:	69 a9       	ldd	r22, Y+49	; 0x31
    34d4:	7a a9       	ldd	r23, Y+50	; 0x32
    34d6:	8b a9       	ldd	r24, Y+51	; 0x33
    34d8:	9c a9       	ldd	r25, Y+52	; 0x34
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	3f ef       	ldi	r19, 0xFF	; 255
    34de:	4f e7       	ldi	r20, 0x7F	; 127
    34e0:	57 e4       	ldi	r21, 0x47	; 71
    34e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34e6:	18 16       	cp	r1, r24
    34e8:	4c f5       	brge	.+82     	; 0x353c <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ea:	6d a9       	ldd	r22, Y+53	; 0x35
    34ec:	7e a9       	ldd	r23, Y+54	; 0x36
    34ee:	8f a9       	ldd	r24, Y+55	; 0x37
    34f0:	98 ad       	ldd	r25, Y+56	; 0x38
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	40 e2       	ldi	r20, 0x20	; 32
    34f8:	51 e4       	ldi	r21, 0x41	; 65
    34fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fe:	dc 01       	movw	r26, r24
    3500:	cb 01       	movw	r24, r22
    3502:	bc 01       	movw	r22, r24
    3504:	cd 01       	movw	r24, r26
    3506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350a:	dc 01       	movw	r26, r24
    350c:	cb 01       	movw	r24, r22
    350e:	98 ab       	std	Y+48, r25	; 0x30
    3510:	8f a7       	std	Y+47, r24	; 0x2f
    3512:	0f c0       	rjmp	.+30     	; 0x3532 <LCD_displayCharacter+0xd2>
    3514:	88 ec       	ldi	r24, 0xC8	; 200
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	9e a7       	std	Y+46, r25	; 0x2e
    351a:	8d a7       	std	Y+45, r24	; 0x2d
    351c:	8d a5       	ldd	r24, Y+45	; 0x2d
    351e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3520:	01 97       	sbiw	r24, 0x01	; 1
    3522:	f1 f7       	brne	.-4      	; 0x3520 <LCD_displayCharacter+0xc0>
    3524:	9e a7       	std	Y+46, r25	; 0x2e
    3526:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3528:	8f a5       	ldd	r24, Y+47	; 0x2f
    352a:	98 a9       	ldd	r25, Y+48	; 0x30
    352c:	01 97       	sbiw	r24, 0x01	; 1
    352e:	98 ab       	std	Y+48, r25	; 0x30
    3530:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3532:	8f a5       	ldd	r24, Y+47	; 0x2f
    3534:	98 a9       	ldd	r25, Y+48	; 0x30
    3536:	00 97       	sbiw	r24, 0x00	; 0
    3538:	69 f7       	brne	.-38     	; 0x3514 <LCD_displayCharacter+0xb4>
    353a:	14 c0       	rjmp	.+40     	; 0x3564 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    353c:	69 a9       	ldd	r22, Y+49	; 0x31
    353e:	7a a9       	ldd	r23, Y+50	; 0x32
    3540:	8b a9       	ldd	r24, Y+51	; 0x33
    3542:	9c a9       	ldd	r25, Y+52	; 0x34
    3544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3548:	dc 01       	movw	r26, r24
    354a:	cb 01       	movw	r24, r22
    354c:	98 ab       	std	Y+48, r25	; 0x30
    354e:	8f a7       	std	Y+47, r24	; 0x2f
    3550:	8f a5       	ldd	r24, Y+47	; 0x2f
    3552:	98 a9       	ldd	r25, Y+48	; 0x30
    3554:	9c a7       	std	Y+44, r25	; 0x2c
    3556:	8b a7       	std	Y+43, r24	; 0x2b
    3558:	8b a5       	ldd	r24, Y+43	; 0x2b
    355a:	9c a5       	ldd	r25, Y+44	; 0x2c
    355c:	01 97       	sbiw	r24, 0x01	; 1
    355e:	f1 f7       	brne	.-4      	; 0x355c <LCD_displayCharacter+0xfc>
    3560:	9c a7       	std	Y+44, r25	; 0x2c
    3562:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3564:	83 e0       	ldi	r24, 0x03	; 3
    3566:	65 e0       	ldi	r22, 0x05	; 5
    3568:	41 e0       	ldi	r20, 0x01	; 1
    356a:	0e 94 c7 13 	call	0x278e	; 0x278e <GPIO_writePin>
    356e:	80 e0       	ldi	r24, 0x00	; 0
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	a0 e8       	ldi	r26, 0x80	; 128
    3574:	bf e3       	ldi	r27, 0x3F	; 63
    3576:	8f a3       	std	Y+39, r24	; 0x27
    3578:	98 a7       	std	Y+40, r25	; 0x28
    357a:	a9 a7       	std	Y+41, r26	; 0x29
    357c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    357e:	6f a1       	ldd	r22, Y+39	; 0x27
    3580:	78 a5       	ldd	r23, Y+40	; 0x28
    3582:	89 a5       	ldd	r24, Y+41	; 0x29
    3584:	9a a5       	ldd	r25, Y+42	; 0x2a
    3586:	20 e0       	ldi	r18, 0x00	; 0
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	4a ef       	ldi	r20, 0xFA	; 250
    358c:	54 e4       	ldi	r21, 0x44	; 68
    358e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3592:	dc 01       	movw	r26, r24
    3594:	cb 01       	movw	r24, r22
    3596:	8b a3       	std	Y+35, r24	; 0x23
    3598:	9c a3       	std	Y+36, r25	; 0x24
    359a:	ad a3       	std	Y+37, r26	; 0x25
    359c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    359e:	6b a1       	ldd	r22, Y+35	; 0x23
    35a0:	7c a1       	ldd	r23, Y+36	; 0x24
    35a2:	8d a1       	ldd	r24, Y+37	; 0x25
    35a4:	9e a1       	ldd	r25, Y+38	; 0x26
    35a6:	20 e0       	ldi	r18, 0x00	; 0
    35a8:	30 e0       	ldi	r19, 0x00	; 0
    35aa:	40 e8       	ldi	r20, 0x80	; 128
    35ac:	5f e3       	ldi	r21, 0x3F	; 63
    35ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35b2:	88 23       	and	r24, r24
    35b4:	2c f4       	brge	.+10     	; 0x35c0 <LCD_displayCharacter+0x160>
		__ticks = 1;
    35b6:	81 e0       	ldi	r24, 0x01	; 1
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	9a a3       	std	Y+34, r25	; 0x22
    35bc:	89 a3       	std	Y+33, r24	; 0x21
    35be:	3f c0       	rjmp	.+126    	; 0x363e <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    35c0:	6b a1       	ldd	r22, Y+35	; 0x23
    35c2:	7c a1       	ldd	r23, Y+36	; 0x24
    35c4:	8d a1       	ldd	r24, Y+37	; 0x25
    35c6:	9e a1       	ldd	r25, Y+38	; 0x26
    35c8:	20 e0       	ldi	r18, 0x00	; 0
    35ca:	3f ef       	ldi	r19, 0xFF	; 255
    35cc:	4f e7       	ldi	r20, 0x7F	; 127
    35ce:	57 e4       	ldi	r21, 0x47	; 71
    35d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35d4:	18 16       	cp	r1, r24
    35d6:	4c f5       	brge	.+82     	; 0x362a <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35d8:	6f a1       	ldd	r22, Y+39	; 0x27
    35da:	78 a5       	ldd	r23, Y+40	; 0x28
    35dc:	89 a5       	ldd	r24, Y+41	; 0x29
    35de:	9a a5       	ldd	r25, Y+42	; 0x2a
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	40 e2       	ldi	r20, 0x20	; 32
    35e6:	51 e4       	ldi	r21, 0x41	; 65
    35e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	bc 01       	movw	r22, r24
    35f2:	cd 01       	movw	r24, r26
    35f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	9a a3       	std	Y+34, r25	; 0x22
    35fe:	89 a3       	std	Y+33, r24	; 0x21
    3600:	0f c0       	rjmp	.+30     	; 0x3620 <LCD_displayCharacter+0x1c0>
    3602:	88 ec       	ldi	r24, 0xC8	; 200
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	98 a3       	std	Y+32, r25	; 0x20
    3608:	8f 8f       	std	Y+31, r24	; 0x1f
    360a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    360c:	98 a1       	ldd	r25, Y+32	; 0x20
    360e:	01 97       	sbiw	r24, 0x01	; 1
    3610:	f1 f7       	brne	.-4      	; 0x360e <LCD_displayCharacter+0x1ae>
    3612:	98 a3       	std	Y+32, r25	; 0x20
    3614:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3616:	89 a1       	ldd	r24, Y+33	; 0x21
    3618:	9a a1       	ldd	r25, Y+34	; 0x22
    361a:	01 97       	sbiw	r24, 0x01	; 1
    361c:	9a a3       	std	Y+34, r25	; 0x22
    361e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3620:	89 a1       	ldd	r24, Y+33	; 0x21
    3622:	9a a1       	ldd	r25, Y+34	; 0x22
    3624:	00 97       	sbiw	r24, 0x00	; 0
    3626:	69 f7       	brne	.-38     	; 0x3602 <LCD_displayCharacter+0x1a2>
    3628:	14 c0       	rjmp	.+40     	; 0x3652 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    362a:	6b a1       	ldd	r22, Y+35	; 0x23
    362c:	7c a1       	ldd	r23, Y+36	; 0x24
    362e:	8d a1       	ldd	r24, Y+37	; 0x25
    3630:	9e a1       	ldd	r25, Y+38	; 0x26
    3632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3636:	dc 01       	movw	r26, r24
    3638:	cb 01       	movw	r24, r22
    363a:	9a a3       	std	Y+34, r25	; 0x22
    363c:	89 a3       	std	Y+33, r24	; 0x21
    363e:	89 a1       	ldd	r24, Y+33	; 0x21
    3640:	9a a1       	ldd	r25, Y+34	; 0x22
    3642:	9e 8f       	std	Y+30, r25	; 0x1e
    3644:	8d 8f       	std	Y+29, r24	; 0x1d
    3646:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3648:	9e 8d       	ldd	r25, Y+30	; 0x1e
    364a:	01 97       	sbiw	r24, 0x01	; 1
    364c:	f1 f7       	brne	.-4      	; 0x364a <LCD_displayCharacter+0x1ea>
    364e:	9e 8f       	std	Y+30, r25	; 0x1e
    3650:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    3652:	82 e0       	ldi	r24, 0x02	; 2
    3654:	69 ad       	ldd	r22, Y+57	; 0x39
    3656:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_writePort>
    365a:	80 e0       	ldi	r24, 0x00	; 0
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	a0 e8       	ldi	r26, 0x80	; 128
    3660:	bf e3       	ldi	r27, 0x3F	; 63
    3662:	89 8f       	std	Y+25, r24	; 0x19
    3664:	9a 8f       	std	Y+26, r25	; 0x1a
    3666:	ab 8f       	std	Y+27, r26	; 0x1b
    3668:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    366a:	69 8d       	ldd	r22, Y+25	; 0x19
    366c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    366e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3670:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3672:	20 e0       	ldi	r18, 0x00	; 0
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	4a ef       	ldi	r20, 0xFA	; 250
    3678:	54 e4       	ldi	r21, 0x44	; 68
    367a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    367e:	dc 01       	movw	r26, r24
    3680:	cb 01       	movw	r24, r22
    3682:	8d 8b       	std	Y+21, r24	; 0x15
    3684:	9e 8b       	std	Y+22, r25	; 0x16
    3686:	af 8b       	std	Y+23, r26	; 0x17
    3688:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    368a:	6d 89       	ldd	r22, Y+21	; 0x15
    368c:	7e 89       	ldd	r23, Y+22	; 0x16
    368e:	8f 89       	ldd	r24, Y+23	; 0x17
    3690:	98 8d       	ldd	r25, Y+24	; 0x18
    3692:	20 e0       	ldi	r18, 0x00	; 0
    3694:	30 e0       	ldi	r19, 0x00	; 0
    3696:	40 e8       	ldi	r20, 0x80	; 128
    3698:	5f e3       	ldi	r21, 0x3F	; 63
    369a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    369e:	88 23       	and	r24, r24
    36a0:	2c f4       	brge	.+10     	; 0x36ac <LCD_displayCharacter+0x24c>
		__ticks = 1;
    36a2:	81 e0       	ldi	r24, 0x01	; 1
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	9c 8b       	std	Y+20, r25	; 0x14
    36a8:	8b 8b       	std	Y+19, r24	; 0x13
    36aa:	3f c0       	rjmp	.+126    	; 0x372a <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    36ac:	6d 89       	ldd	r22, Y+21	; 0x15
    36ae:	7e 89       	ldd	r23, Y+22	; 0x16
    36b0:	8f 89       	ldd	r24, Y+23	; 0x17
    36b2:	98 8d       	ldd	r25, Y+24	; 0x18
    36b4:	20 e0       	ldi	r18, 0x00	; 0
    36b6:	3f ef       	ldi	r19, 0xFF	; 255
    36b8:	4f e7       	ldi	r20, 0x7F	; 127
    36ba:	57 e4       	ldi	r21, 0x47	; 71
    36bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36c0:	18 16       	cp	r1, r24
    36c2:	4c f5       	brge	.+82     	; 0x3716 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36c4:	69 8d       	ldd	r22, Y+25	; 0x19
    36c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	40 e2       	ldi	r20, 0x20	; 32
    36d2:	51 e4       	ldi	r21, 0x41	; 65
    36d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d8:	dc 01       	movw	r26, r24
    36da:	cb 01       	movw	r24, r22
    36dc:	bc 01       	movw	r22, r24
    36de:	cd 01       	movw	r24, r26
    36e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	9c 8b       	std	Y+20, r25	; 0x14
    36ea:	8b 8b       	std	Y+19, r24	; 0x13
    36ec:	0f c0       	rjmp	.+30     	; 0x370c <LCD_displayCharacter+0x2ac>
    36ee:	88 ec       	ldi	r24, 0xC8	; 200
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	9a 8b       	std	Y+18, r25	; 0x12
    36f4:	89 8b       	std	Y+17, r24	; 0x11
    36f6:	89 89       	ldd	r24, Y+17	; 0x11
    36f8:	9a 89       	ldd	r25, Y+18	; 0x12
    36fa:	01 97       	sbiw	r24, 0x01	; 1
    36fc:	f1 f7       	brne	.-4      	; 0x36fa <LCD_displayCharacter+0x29a>
    36fe:	9a 8b       	std	Y+18, r25	; 0x12
    3700:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3702:	8b 89       	ldd	r24, Y+19	; 0x13
    3704:	9c 89       	ldd	r25, Y+20	; 0x14
    3706:	01 97       	sbiw	r24, 0x01	; 1
    3708:	9c 8b       	std	Y+20, r25	; 0x14
    370a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    370c:	8b 89       	ldd	r24, Y+19	; 0x13
    370e:	9c 89       	ldd	r25, Y+20	; 0x14
    3710:	00 97       	sbiw	r24, 0x00	; 0
    3712:	69 f7       	brne	.-38     	; 0x36ee <LCD_displayCharacter+0x28e>
    3714:	14 c0       	rjmp	.+40     	; 0x373e <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3716:	6d 89       	ldd	r22, Y+21	; 0x15
    3718:	7e 89       	ldd	r23, Y+22	; 0x16
    371a:	8f 89       	ldd	r24, Y+23	; 0x17
    371c:	98 8d       	ldd	r25, Y+24	; 0x18
    371e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3722:	dc 01       	movw	r26, r24
    3724:	cb 01       	movw	r24, r22
    3726:	9c 8b       	std	Y+20, r25	; 0x14
    3728:	8b 8b       	std	Y+19, r24	; 0x13
    372a:	8b 89       	ldd	r24, Y+19	; 0x13
    372c:	9c 89       	ldd	r25, Y+20	; 0x14
    372e:	98 8b       	std	Y+16, r25	; 0x10
    3730:	8f 87       	std	Y+15, r24	; 0x0f
    3732:	8f 85       	ldd	r24, Y+15	; 0x0f
    3734:	98 89       	ldd	r25, Y+16	; 0x10
    3736:	01 97       	sbiw	r24, 0x01	; 1
    3738:	f1 f7       	brne	.-4      	; 0x3736 <LCD_displayCharacter+0x2d6>
    373a:	98 8b       	std	Y+16, r25	; 0x10
    373c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    373e:	83 e0       	ldi	r24, 0x03	; 3
    3740:	65 e0       	ldi	r22, 0x05	; 5
    3742:	40 e0       	ldi	r20, 0x00	; 0
    3744:	0e 94 c7 13 	call	0x278e	; 0x278e <GPIO_writePin>
    3748:	80 e0       	ldi	r24, 0x00	; 0
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	a0 e8       	ldi	r26, 0x80	; 128
    374e:	bf e3       	ldi	r27, 0x3F	; 63
    3750:	8b 87       	std	Y+11, r24	; 0x0b
    3752:	9c 87       	std	Y+12, r25	; 0x0c
    3754:	ad 87       	std	Y+13, r26	; 0x0d
    3756:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3758:	6b 85       	ldd	r22, Y+11	; 0x0b
    375a:	7c 85       	ldd	r23, Y+12	; 0x0c
    375c:	8d 85       	ldd	r24, Y+13	; 0x0d
    375e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3760:	20 e0       	ldi	r18, 0x00	; 0
    3762:	30 e0       	ldi	r19, 0x00	; 0
    3764:	4a ef       	ldi	r20, 0xFA	; 250
    3766:	54 e4       	ldi	r21, 0x44	; 68
    3768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    376c:	dc 01       	movw	r26, r24
    376e:	cb 01       	movw	r24, r22
    3770:	8f 83       	std	Y+7, r24	; 0x07
    3772:	98 87       	std	Y+8, r25	; 0x08
    3774:	a9 87       	std	Y+9, r26	; 0x09
    3776:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3778:	6f 81       	ldd	r22, Y+7	; 0x07
    377a:	78 85       	ldd	r23, Y+8	; 0x08
    377c:	89 85       	ldd	r24, Y+9	; 0x09
    377e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3780:	20 e0       	ldi	r18, 0x00	; 0
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	40 e8       	ldi	r20, 0x80	; 128
    3786:	5f e3       	ldi	r21, 0x3F	; 63
    3788:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    378c:	88 23       	and	r24, r24
    378e:	2c f4       	brge	.+10     	; 0x379a <LCD_displayCharacter+0x33a>
		__ticks = 1;
    3790:	81 e0       	ldi	r24, 0x01	; 1
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	9e 83       	std	Y+6, r25	; 0x06
    3796:	8d 83       	std	Y+5, r24	; 0x05
    3798:	3f c0       	rjmp	.+126    	; 0x3818 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    379a:	6f 81       	ldd	r22, Y+7	; 0x07
    379c:	78 85       	ldd	r23, Y+8	; 0x08
    379e:	89 85       	ldd	r24, Y+9	; 0x09
    37a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37a2:	20 e0       	ldi	r18, 0x00	; 0
    37a4:	3f ef       	ldi	r19, 0xFF	; 255
    37a6:	4f e7       	ldi	r20, 0x7F	; 127
    37a8:	57 e4       	ldi	r21, 0x47	; 71
    37aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37ae:	18 16       	cp	r1, r24
    37b0:	4c f5       	brge	.+82     	; 0x3804 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    37b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    37b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    37b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    37ba:	20 e0       	ldi	r18, 0x00	; 0
    37bc:	30 e0       	ldi	r19, 0x00	; 0
    37be:	40 e2       	ldi	r20, 0x20	; 32
    37c0:	51 e4       	ldi	r21, 0x41	; 65
    37c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c6:	dc 01       	movw	r26, r24
    37c8:	cb 01       	movw	r24, r22
    37ca:	bc 01       	movw	r22, r24
    37cc:	cd 01       	movw	r24, r26
    37ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37d2:	dc 01       	movw	r26, r24
    37d4:	cb 01       	movw	r24, r22
    37d6:	9e 83       	std	Y+6, r25	; 0x06
    37d8:	8d 83       	std	Y+5, r24	; 0x05
    37da:	0f c0       	rjmp	.+30     	; 0x37fa <LCD_displayCharacter+0x39a>
    37dc:	88 ec       	ldi	r24, 0xC8	; 200
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	9c 83       	std	Y+4, r25	; 0x04
    37e2:	8b 83       	std	Y+3, r24	; 0x03
    37e4:	8b 81       	ldd	r24, Y+3	; 0x03
    37e6:	9c 81       	ldd	r25, Y+4	; 0x04
    37e8:	01 97       	sbiw	r24, 0x01	; 1
    37ea:	f1 f7       	brne	.-4      	; 0x37e8 <LCD_displayCharacter+0x388>
    37ec:	9c 83       	std	Y+4, r25	; 0x04
    37ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37f0:	8d 81       	ldd	r24, Y+5	; 0x05
    37f2:	9e 81       	ldd	r25, Y+6	; 0x06
    37f4:	01 97       	sbiw	r24, 0x01	; 1
    37f6:	9e 83       	std	Y+6, r25	; 0x06
    37f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37fa:	8d 81       	ldd	r24, Y+5	; 0x05
    37fc:	9e 81       	ldd	r25, Y+6	; 0x06
    37fe:	00 97       	sbiw	r24, 0x00	; 0
    3800:	69 f7       	brne	.-38     	; 0x37dc <LCD_displayCharacter+0x37c>
    3802:	14 c0       	rjmp	.+40     	; 0x382c <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3804:	6f 81       	ldd	r22, Y+7	; 0x07
    3806:	78 85       	ldd	r23, Y+8	; 0x08
    3808:	89 85       	ldd	r24, Y+9	; 0x09
    380a:	9a 85       	ldd	r25, Y+10	; 0x0a
    380c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3810:	dc 01       	movw	r26, r24
    3812:	cb 01       	movw	r24, r22
    3814:	9e 83       	std	Y+6, r25	; 0x06
    3816:	8d 83       	std	Y+5, r24	; 0x05
    3818:	8d 81       	ldd	r24, Y+5	; 0x05
    381a:	9e 81       	ldd	r25, Y+6	; 0x06
    381c:	9a 83       	std	Y+2, r25	; 0x02
    381e:	89 83       	std	Y+1, r24	; 0x01
    3820:	89 81       	ldd	r24, Y+1	; 0x01
    3822:	9a 81       	ldd	r25, Y+2	; 0x02
    3824:	01 97       	sbiw	r24, 0x01	; 1
    3826:	f1 f7       	brne	.-4      	; 0x3824 <LCD_displayCharacter+0x3c4>
    3828:	9a 83       	std	Y+2, r25	; 0x02
    382a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    382c:	e9 96       	adiw	r28, 0x39	; 57
    382e:	0f b6       	in	r0, 0x3f	; 63
    3830:	f8 94       	cli
    3832:	de bf       	out	0x3e, r29	; 62
    3834:	0f be       	out	0x3f, r0	; 63
    3836:	cd bf       	out	0x3d, r28	; 61
    3838:	cf 91       	pop	r28
    383a:	df 91       	pop	r29
    383c:	08 95       	ret

0000383e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    383e:	df 93       	push	r29
    3840:	cf 93       	push	r28
    3842:	00 d0       	rcall	.+0      	; 0x3844 <LCD_displayString+0x6>
    3844:	0f 92       	push	r0
    3846:	cd b7       	in	r28, 0x3d	; 61
    3848:	de b7       	in	r29, 0x3e	; 62
    384a:	9b 83       	std	Y+3, r25	; 0x03
    384c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    384e:	19 82       	std	Y+1, r1	; 0x01
    3850:	0e c0       	rjmp	.+28     	; 0x386e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3852:	89 81       	ldd	r24, Y+1	; 0x01
    3854:	28 2f       	mov	r18, r24
    3856:	30 e0       	ldi	r19, 0x00	; 0
    3858:	8a 81       	ldd	r24, Y+2	; 0x02
    385a:	9b 81       	ldd	r25, Y+3	; 0x03
    385c:	fc 01       	movw	r30, r24
    385e:	e2 0f       	add	r30, r18
    3860:	f3 1f       	adc	r31, r19
    3862:	80 81       	ld	r24, Z
    3864:	0e 94 30 1a 	call	0x3460	; 0x3460 <LCD_displayCharacter>
		i++;
    3868:	89 81       	ldd	r24, Y+1	; 0x01
    386a:	8f 5f       	subi	r24, 0xFF	; 255
    386c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    386e:	89 81       	ldd	r24, Y+1	; 0x01
    3870:	28 2f       	mov	r18, r24
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	8a 81       	ldd	r24, Y+2	; 0x02
    3876:	9b 81       	ldd	r25, Y+3	; 0x03
    3878:	fc 01       	movw	r30, r24
    387a:	e2 0f       	add	r30, r18
    387c:	f3 1f       	adc	r31, r19
    387e:	80 81       	ld	r24, Z
    3880:	88 23       	and	r24, r24
    3882:	39 f7       	brne	.-50     	; 0x3852 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3884:	0f 90       	pop	r0
    3886:	0f 90       	pop	r0
    3888:	0f 90       	pop	r0
    388a:	cf 91       	pop	r28
    388c:	df 91       	pop	r29
    388e:	08 95       	ret

00003890 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3890:	df 93       	push	r29
    3892:	cf 93       	push	r28
    3894:	00 d0       	rcall	.+0      	; 0x3896 <LCD_moveCursor+0x6>
    3896:	00 d0       	rcall	.+0      	; 0x3898 <LCD_moveCursor+0x8>
    3898:	0f 92       	push	r0
    389a:	cd b7       	in	r28, 0x3d	; 61
    389c:	de b7       	in	r29, 0x3e	; 62
    389e:	8a 83       	std	Y+2, r24	; 0x02
    38a0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    38a2:	8a 81       	ldd	r24, Y+2	; 0x02
    38a4:	28 2f       	mov	r18, r24
    38a6:	30 e0       	ldi	r19, 0x00	; 0
    38a8:	3d 83       	std	Y+5, r19	; 0x05
    38aa:	2c 83       	std	Y+4, r18	; 0x04
    38ac:	8c 81       	ldd	r24, Y+4	; 0x04
    38ae:	9d 81       	ldd	r25, Y+5	; 0x05
    38b0:	81 30       	cpi	r24, 0x01	; 1
    38b2:	91 05       	cpc	r25, r1
    38b4:	c1 f0       	breq	.+48     	; 0x38e6 <LCD_moveCursor+0x56>
    38b6:	2c 81       	ldd	r18, Y+4	; 0x04
    38b8:	3d 81       	ldd	r19, Y+5	; 0x05
    38ba:	22 30       	cpi	r18, 0x02	; 2
    38bc:	31 05       	cpc	r19, r1
    38be:	2c f4       	brge	.+10     	; 0x38ca <LCD_moveCursor+0x3a>
    38c0:	8c 81       	ldd	r24, Y+4	; 0x04
    38c2:	9d 81       	ldd	r25, Y+5	; 0x05
    38c4:	00 97       	sbiw	r24, 0x00	; 0
    38c6:	61 f0       	breq	.+24     	; 0x38e0 <LCD_moveCursor+0x50>
    38c8:	19 c0       	rjmp	.+50     	; 0x38fc <LCD_moveCursor+0x6c>
    38ca:	2c 81       	ldd	r18, Y+4	; 0x04
    38cc:	3d 81       	ldd	r19, Y+5	; 0x05
    38ce:	22 30       	cpi	r18, 0x02	; 2
    38d0:	31 05       	cpc	r19, r1
    38d2:	69 f0       	breq	.+26     	; 0x38ee <LCD_moveCursor+0x5e>
    38d4:	8c 81       	ldd	r24, Y+4	; 0x04
    38d6:	9d 81       	ldd	r25, Y+5	; 0x05
    38d8:	83 30       	cpi	r24, 0x03	; 3
    38da:	91 05       	cpc	r25, r1
    38dc:	61 f0       	breq	.+24     	; 0x38f6 <LCD_moveCursor+0x66>
    38de:	0e c0       	rjmp	.+28     	; 0x38fc <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    38e0:	8b 81       	ldd	r24, Y+3	; 0x03
    38e2:	89 83       	std	Y+1, r24	; 0x01
    38e4:	0b c0       	rjmp	.+22     	; 0x38fc <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    38e6:	8b 81       	ldd	r24, Y+3	; 0x03
    38e8:	80 5c       	subi	r24, 0xC0	; 192
    38ea:	89 83       	std	Y+1, r24	; 0x01
    38ec:	07 c0       	rjmp	.+14     	; 0x38fc <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    38ee:	8b 81       	ldd	r24, Y+3	; 0x03
    38f0:	80 5f       	subi	r24, 0xF0	; 240
    38f2:	89 83       	std	Y+1, r24	; 0x01
    38f4:	03 c0       	rjmp	.+6      	; 0x38fc <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    38f6:	8b 81       	ldd	r24, Y+3	; 0x03
    38f8:	80 5b       	subi	r24, 0xB0	; 176
    38fa:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    38fc:	89 81       	ldd	r24, Y+1	; 0x01
    38fe:	80 68       	ori	r24, 0x80	; 128
    3900:	0e 94 41 18 	call	0x3082	; 0x3082 <LCD_sendCommand>
}
    3904:	0f 90       	pop	r0
    3906:	0f 90       	pop	r0
    3908:	0f 90       	pop	r0
    390a:	0f 90       	pop	r0
    390c:	0f 90       	pop	r0
    390e:	cf 91       	pop	r28
    3910:	df 91       	pop	r29
    3912:	08 95       	ret

00003914 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3914:	df 93       	push	r29
    3916:	cf 93       	push	r28
    3918:	00 d0       	rcall	.+0      	; 0x391a <LCD_displayStringRowColumn+0x6>
    391a:	00 d0       	rcall	.+0      	; 0x391c <LCD_displayStringRowColumn+0x8>
    391c:	cd b7       	in	r28, 0x3d	; 61
    391e:	de b7       	in	r29, 0x3e	; 62
    3920:	89 83       	std	Y+1, r24	; 0x01
    3922:	6a 83       	std	Y+2, r22	; 0x02
    3924:	5c 83       	std	Y+4, r21	; 0x04
    3926:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3928:	89 81       	ldd	r24, Y+1	; 0x01
    392a:	6a 81       	ldd	r22, Y+2	; 0x02
    392c:	0e 94 48 1c 	call	0x3890	; 0x3890 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3930:	8b 81       	ldd	r24, Y+3	; 0x03
    3932:	9c 81       	ldd	r25, Y+4	; 0x04
    3934:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_displayString>
}
    3938:	0f 90       	pop	r0
    393a:	0f 90       	pop	r0
    393c:	0f 90       	pop	r0
    393e:	0f 90       	pop	r0
    3940:	cf 91       	pop	r28
    3942:	df 91       	pop	r29
    3944:	08 95       	ret

00003946 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3946:	df 93       	push	r29
    3948:	cf 93       	push	r28
    394a:	cd b7       	in	r28, 0x3d	; 61
    394c:	de b7       	in	r29, 0x3e	; 62
    394e:	62 97       	sbiw	r28, 0x12	; 18
    3950:	0f b6       	in	r0, 0x3f	; 63
    3952:	f8 94       	cli
    3954:	de bf       	out	0x3e, r29	; 62
    3956:	0f be       	out	0x3f, r0	; 63
    3958:	cd bf       	out	0x3d, r28	; 61
    395a:	9a 8b       	std	Y+18, r25	; 0x12
    395c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    395e:	89 89       	ldd	r24, Y+17	; 0x11
    3960:	9a 89       	ldd	r25, Y+18	; 0x12
    3962:	9e 01       	movw	r18, r28
    3964:	2f 5f       	subi	r18, 0xFF	; 255
    3966:	3f 4f       	sbci	r19, 0xFF	; 255
    3968:	b9 01       	movw	r22, r18
    396a:	4a e0       	ldi	r20, 0x0A	; 10
    396c:	50 e0       	ldi	r21, 0x00	; 0
    396e:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <itoa>
   LCD_displayString(buff); /* Display the string */
    3972:	ce 01       	movw	r24, r28
    3974:	01 96       	adiw	r24, 0x01	; 1
    3976:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_displayString>
}
    397a:	62 96       	adiw	r28, 0x12	; 18
    397c:	0f b6       	in	r0, 0x3f	; 63
    397e:	f8 94       	cli
    3980:	de bf       	out	0x3e, r29	; 62
    3982:	0f be       	out	0x3f, r0	; 63
    3984:	cd bf       	out	0x3d, r28	; 61
    3986:	cf 91       	pop	r28
    3988:	df 91       	pop	r29
    398a:	08 95       	ret

0000398c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    398c:	df 93       	push	r29
    398e:	cf 93       	push	r28
    3990:	cd b7       	in	r28, 0x3d	; 61
    3992:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	0e 94 41 18 	call	0x3082	; 0x3082 <LCD_sendCommand>
}
    399a:	cf 91       	pop	r28
    399c:	df 91       	pop	r29
    399e:	08 95       	ret

000039a0 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    39a0:	df 93       	push	r29
    39a2:	cf 93       	push	r28
    39a4:	00 d0       	rcall	.+0      	; 0x39a6 <UART_init+0x6>
    39a6:	00 d0       	rcall	.+0      	; 0x39a8 <UART_init+0x8>
    39a8:	cd b7       	in	r28, 0x3d	; 61
    39aa:	de b7       	in	r29, 0x3e	; 62
    39ac:	9c 83       	std	Y+4, r25	; 0x04
    39ae:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    39b0:	1a 82       	std	Y+2, r1	; 0x02
    39b2:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    39b4:	eb e2       	ldi	r30, 0x2B	; 43
    39b6:	f0 e0       	ldi	r31, 0x00	; 0
    39b8:	82 e0       	ldi	r24, 0x02	; 2
    39ba:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    39bc:	ea e2       	ldi	r30, 0x2A	; 42
    39be:	f0 e0       	ldi	r31, 0x00	; 0
    39c0:	88 e1       	ldi	r24, 0x18	; 24
    39c2:	80 83       	st	Z, r24
	UCSRB=(UCSRB & 0xFB)|(Config_Ptr->bit_data & 0x04);
    39c4:	aa e2       	ldi	r26, 0x2A	; 42
    39c6:	b0 e0       	ldi	r27, 0x00	; 0
    39c8:	ea e2       	ldi	r30, 0x2A	; 42
    39ca:	f0 e0       	ldi	r31, 0x00	; 0
    39cc:	80 81       	ld	r24, Z
    39ce:	98 2f       	mov	r25, r24
    39d0:	9b 7f       	andi	r25, 0xFB	; 251
    39d2:	eb 81       	ldd	r30, Y+3	; 0x03
    39d4:	fc 81       	ldd	r31, Y+4	; 0x04
    39d6:	80 81       	ld	r24, Z
    39d8:	84 70       	andi	r24, 0x04	; 4
    39da:	89 2b       	or	r24, r25
    39dc:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    39de:	e0 e4       	ldi	r30, 0x40	; 64
    39e0:	f0 e0       	ldi	r31, 0x00	; 0
    39e2:	86 e8       	ldi	r24, 0x86	; 134
    39e4:	80 83       	st	Z, r24
	UCSRC=(UCSRC & 0xCF)|((Config_Ptr->parity & 0x03)<<4);
    39e6:	a0 e4       	ldi	r26, 0x40	; 64
    39e8:	b0 e0       	ldi	r27, 0x00	; 0
    39ea:	e0 e4       	ldi	r30, 0x40	; 64
    39ec:	f0 e0       	ldi	r31, 0x00	; 0
    39ee:	80 81       	ld	r24, Z
    39f0:	28 2f       	mov	r18, r24
    39f2:	2f 7c       	andi	r18, 0xCF	; 207
    39f4:	eb 81       	ldd	r30, Y+3	; 0x03
    39f6:	fc 81       	ldd	r31, Y+4	; 0x04
    39f8:	81 81       	ldd	r24, Z+1	; 0x01
    39fa:	88 2f       	mov	r24, r24
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	83 70       	andi	r24, 0x03	; 3
    3a00:	90 70       	andi	r25, 0x00	; 0
    3a02:	82 95       	swap	r24
    3a04:	92 95       	swap	r25
    3a06:	90 7f       	andi	r25, 0xF0	; 240
    3a08:	98 27       	eor	r25, r24
    3a0a:	80 7f       	andi	r24, 0xF0	; 240
    3a0c:	98 27       	eor	r25, r24
    3a0e:	82 2b       	or	r24, r18
    3a10:	8c 93       	st	X, r24
	UCSRC=(UCSRC & 0xF7)|((Config_Ptr->stop_bit & 0x01)<<3);
    3a12:	a0 e4       	ldi	r26, 0x40	; 64
    3a14:	b0 e0       	ldi	r27, 0x00	; 0
    3a16:	e0 e4       	ldi	r30, 0x40	; 64
    3a18:	f0 e0       	ldi	r31, 0x00	; 0
    3a1a:	80 81       	ld	r24, Z
    3a1c:	28 2f       	mov	r18, r24
    3a1e:	27 7f       	andi	r18, 0xF7	; 247
    3a20:	eb 81       	ldd	r30, Y+3	; 0x03
    3a22:	fc 81       	ldd	r31, Y+4	; 0x04
    3a24:	82 81       	ldd	r24, Z+2	; 0x02
    3a26:	88 2f       	mov	r24, r24
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	81 70       	andi	r24, 0x01	; 1
    3a2c:	90 70       	andi	r25, 0x00	; 0
    3a2e:	88 0f       	add	r24, r24
    3a30:	99 1f       	adc	r25, r25
    3a32:	88 0f       	add	r24, r24
    3a34:	99 1f       	adc	r25, r25
    3a36:	88 0f       	add	r24, r24
    3a38:	99 1f       	adc	r25, r25
    3a3a:	82 2b       	or	r24, r18
    3a3c:	8c 93       	st	X, r24
	UCSRC=(UCSRC & 0xF9)|((Config_Ptr->bit_data & 0x03)<<1);
    3a3e:	a0 e4       	ldi	r26, 0x40	; 64
    3a40:	b0 e0       	ldi	r27, 0x00	; 0
    3a42:	e0 e4       	ldi	r30, 0x40	; 64
    3a44:	f0 e0       	ldi	r31, 0x00	; 0
    3a46:	80 81       	ld	r24, Z
    3a48:	28 2f       	mov	r18, r24
    3a4a:	29 7f       	andi	r18, 0xF9	; 249
    3a4c:	eb 81       	ldd	r30, Y+3	; 0x03
    3a4e:	fc 81       	ldd	r31, Y+4	; 0x04
    3a50:	80 81       	ld	r24, Z
    3a52:	88 2f       	mov	r24, r24
    3a54:	90 e0       	ldi	r25, 0x00	; 0
    3a56:	83 70       	andi	r24, 0x03	; 3
    3a58:	90 70       	andi	r25, 0x00	; 0
    3a5a:	88 0f       	add	r24, r24
    3a5c:	99 1f       	adc	r25, r25
    3a5e:	82 2b       	or	r24, r18
    3a60:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    3a62:	eb 81       	ldd	r30, Y+3	; 0x03
    3a64:	fc 81       	ldd	r31, Y+4	; 0x04
    3a66:	83 81       	ldd	r24, Z+3	; 0x03
    3a68:	94 81       	ldd	r25, Z+4	; 0x04
    3a6a:	a5 81       	ldd	r26, Z+5	; 0x05
    3a6c:	b6 81       	ldd	r27, Z+6	; 0x06
    3a6e:	88 0f       	add	r24, r24
    3a70:	99 1f       	adc	r25, r25
    3a72:	aa 1f       	adc	r26, r26
    3a74:	bb 1f       	adc	r27, r27
    3a76:	88 0f       	add	r24, r24
    3a78:	99 1f       	adc	r25, r25
    3a7a:	aa 1f       	adc	r26, r26
    3a7c:	bb 1f       	adc	r27, r27
    3a7e:	88 0f       	add	r24, r24
    3a80:	99 1f       	adc	r25, r25
    3a82:	aa 1f       	adc	r26, r26
    3a84:	bb 1f       	adc	r27, r27
    3a86:	9c 01       	movw	r18, r24
    3a88:	ad 01       	movw	r20, r26
    3a8a:	80 e0       	ldi	r24, 0x00	; 0
    3a8c:	92 e1       	ldi	r25, 0x12	; 18
    3a8e:	aa e7       	ldi	r26, 0x7A	; 122
    3a90:	b0 e0       	ldi	r27, 0x00	; 0
    3a92:	bc 01       	movw	r22, r24
    3a94:	cd 01       	movw	r24, r26
    3a96:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
    3a9a:	da 01       	movw	r26, r20
    3a9c:	c9 01       	movw	r24, r18
    3a9e:	01 97       	sbiw	r24, 0x01	; 1
    3aa0:	9a 83       	std	Y+2, r25	; 0x02
    3aa2:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3aa4:	e0 e4       	ldi	r30, 0x40	; 64
    3aa6:	f0 e0       	ldi	r31, 0x00	; 0
    3aa8:	89 81       	ldd	r24, Y+1	; 0x01
    3aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    3aac:	89 2f       	mov	r24, r25
    3aae:	99 27       	eor	r25, r25
    3ab0:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3ab2:	e9 e2       	ldi	r30, 0x29	; 41
    3ab4:	f0 e0       	ldi	r31, 0x00	; 0
    3ab6:	89 81       	ldd	r24, Y+1	; 0x01
    3ab8:	80 83       	st	Z, r24
}
    3aba:	0f 90       	pop	r0
    3abc:	0f 90       	pop	r0
    3abe:	0f 90       	pop	r0
    3ac0:	0f 90       	pop	r0
    3ac2:	cf 91       	pop	r28
    3ac4:	df 91       	pop	r29
    3ac6:	08 95       	ret

00003ac8 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3ac8:	df 93       	push	r29
    3aca:	cf 93       	push	r28
    3acc:	0f 92       	push	r0
    3ace:	cd b7       	in	r28, 0x3d	; 61
    3ad0:	de b7       	in	r29, 0x3e	; 62
    3ad2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3ad4:	eb e2       	ldi	r30, 0x2B	; 43
    3ad6:	f0 e0       	ldi	r31, 0x00	; 0
    3ad8:	80 81       	ld	r24, Z
    3ada:	88 2f       	mov	r24, r24
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	80 72       	andi	r24, 0x20	; 32
    3ae0:	90 70       	andi	r25, 0x00	; 0
    3ae2:	00 97       	sbiw	r24, 0x00	; 0
    3ae4:	b9 f3       	breq	.-18     	; 0x3ad4 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3ae6:	ec e2       	ldi	r30, 0x2C	; 44
    3ae8:	f0 e0       	ldi	r31, 0x00	; 0
    3aea:	89 81       	ldd	r24, Y+1	; 0x01
    3aec:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3aee:	0f 90       	pop	r0
    3af0:	cf 91       	pop	r28
    3af2:	df 91       	pop	r29
    3af4:	08 95       	ret

00003af6 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3af6:	df 93       	push	r29
    3af8:	cf 93       	push	r28
    3afa:	cd b7       	in	r28, 0x3d	; 61
    3afc:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3afe:	eb e2       	ldi	r30, 0x2B	; 43
    3b00:	f0 e0       	ldi	r31, 0x00	; 0
    3b02:	80 81       	ld	r24, Z
    3b04:	88 23       	and	r24, r24
    3b06:	dc f7       	brge	.-10     	; 0x3afe <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3b08:	ec e2       	ldi	r30, 0x2C	; 44
    3b0a:	f0 e0       	ldi	r31, 0x00	; 0
    3b0c:	80 81       	ld	r24, Z
}
    3b0e:	cf 91       	pop	r28
    3b10:	df 91       	pop	r29
    3b12:	08 95       	ret

00003b14 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3b14:	df 93       	push	r29
    3b16:	cf 93       	push	r28
    3b18:	00 d0       	rcall	.+0      	; 0x3b1a <UART_sendString+0x6>
    3b1a:	0f 92       	push	r0
    3b1c:	cd b7       	in	r28, 0x3d	; 61
    3b1e:	de b7       	in	r29, 0x3e	; 62
    3b20:	9b 83       	std	Y+3, r25	; 0x03
    3b22:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3b24:	19 82       	std	Y+1, r1	; 0x01
    3b26:	0e c0       	rjmp	.+28     	; 0x3b44 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3b28:	89 81       	ldd	r24, Y+1	; 0x01
    3b2a:	28 2f       	mov	r18, r24
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
    3b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b30:	9b 81       	ldd	r25, Y+3	; 0x03
    3b32:	fc 01       	movw	r30, r24
    3b34:	e2 0f       	add	r30, r18
    3b36:	f3 1f       	adc	r31, r19
    3b38:	80 81       	ld	r24, Z
    3b3a:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <UART_sendByte>
		i++;
    3b3e:	89 81       	ldd	r24, Y+1	; 0x01
    3b40:	8f 5f       	subi	r24, 0xFF	; 255
    3b42:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3b44:	89 81       	ldd	r24, Y+1	; 0x01
    3b46:	28 2f       	mov	r18, r24
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b4c:	9b 81       	ldd	r25, Y+3	; 0x03
    3b4e:	fc 01       	movw	r30, r24
    3b50:	e2 0f       	add	r30, r18
    3b52:	f3 1f       	adc	r31, r19
    3b54:	80 81       	ld	r24, Z
    3b56:	88 23       	and	r24, r24
    3b58:	39 f7       	brne	.-50     	; 0x3b28 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3b5a:	0f 90       	pop	r0
    3b5c:	0f 90       	pop	r0
    3b5e:	0f 90       	pop	r0
    3b60:	cf 91       	pop	r28
    3b62:	df 91       	pop	r29
    3b64:	08 95       	ret

00003b66 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3b66:	0f 93       	push	r16
    3b68:	1f 93       	push	r17
    3b6a:	df 93       	push	r29
    3b6c:	cf 93       	push	r28
    3b6e:	00 d0       	rcall	.+0      	; 0x3b70 <UART_receiveString+0xa>
    3b70:	0f 92       	push	r0
    3b72:	cd b7       	in	r28, 0x3d	; 61
    3b74:	de b7       	in	r29, 0x3e	; 62
    3b76:	9b 83       	std	Y+3, r25	; 0x03
    3b78:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3b7a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3b7c:	89 81       	ldd	r24, Y+1	; 0x01
    3b7e:	28 2f       	mov	r18, r24
    3b80:	30 e0       	ldi	r19, 0x00	; 0
    3b82:	8a 81       	ldd	r24, Y+2	; 0x02
    3b84:	9b 81       	ldd	r25, Y+3	; 0x03
    3b86:	8c 01       	movw	r16, r24
    3b88:	02 0f       	add	r16, r18
    3b8a:	13 1f       	adc	r17, r19
    3b8c:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <UART_recieveByte>
    3b90:	f8 01       	movw	r30, r16
    3b92:	80 83       	st	Z, r24
    3b94:	0f c0       	rjmp	.+30     	; 0x3bb4 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3b96:	89 81       	ldd	r24, Y+1	; 0x01
    3b98:	8f 5f       	subi	r24, 0xFF	; 255
    3b9a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3b9c:	89 81       	ldd	r24, Y+1	; 0x01
    3b9e:	28 2f       	mov	r18, r24
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ba6:	8c 01       	movw	r16, r24
    3ba8:	02 0f       	add	r16, r18
    3baa:	13 1f       	adc	r17, r19
    3bac:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <UART_recieveByte>
    3bb0:	f8 01       	movw	r30, r16
    3bb2:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3bb4:	89 81       	ldd	r24, Y+1	; 0x01
    3bb6:	28 2f       	mov	r18, r24
    3bb8:	30 e0       	ldi	r19, 0x00	; 0
    3bba:	8a 81       	ldd	r24, Y+2	; 0x02
    3bbc:	9b 81       	ldd	r25, Y+3	; 0x03
    3bbe:	fc 01       	movw	r30, r24
    3bc0:	e2 0f       	add	r30, r18
    3bc2:	f3 1f       	adc	r31, r19
    3bc4:	80 81       	ld	r24, Z
    3bc6:	83 32       	cpi	r24, 0x23	; 35
    3bc8:	31 f7       	brne	.-52     	; 0x3b96 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3bca:	89 81       	ldd	r24, Y+1	; 0x01
    3bcc:	28 2f       	mov	r18, r24
    3bce:	30 e0       	ldi	r19, 0x00	; 0
    3bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd2:	9b 81       	ldd	r25, Y+3	; 0x03
    3bd4:	fc 01       	movw	r30, r24
    3bd6:	e2 0f       	add	r30, r18
    3bd8:	f3 1f       	adc	r31, r19
    3bda:	10 82       	st	Z, r1
}
    3bdc:	0f 90       	pop	r0
    3bde:	0f 90       	pop	r0
    3be0:	0f 90       	pop	r0
    3be2:	cf 91       	pop	r28
    3be4:	df 91       	pop	r29
    3be6:	1f 91       	pop	r17
    3be8:	0f 91       	pop	r16
    3bea:	08 95       	ret

00003bec <__udivmodsi4>:
    3bec:	a1 e2       	ldi	r26, 0x21	; 33
    3bee:	1a 2e       	mov	r1, r26
    3bf0:	aa 1b       	sub	r26, r26
    3bf2:	bb 1b       	sub	r27, r27
    3bf4:	fd 01       	movw	r30, r26
    3bf6:	0d c0       	rjmp	.+26     	; 0x3c12 <__udivmodsi4_ep>

00003bf8 <__udivmodsi4_loop>:
    3bf8:	aa 1f       	adc	r26, r26
    3bfa:	bb 1f       	adc	r27, r27
    3bfc:	ee 1f       	adc	r30, r30
    3bfe:	ff 1f       	adc	r31, r31
    3c00:	a2 17       	cp	r26, r18
    3c02:	b3 07       	cpc	r27, r19
    3c04:	e4 07       	cpc	r30, r20
    3c06:	f5 07       	cpc	r31, r21
    3c08:	20 f0       	brcs	.+8      	; 0x3c12 <__udivmodsi4_ep>
    3c0a:	a2 1b       	sub	r26, r18
    3c0c:	b3 0b       	sbc	r27, r19
    3c0e:	e4 0b       	sbc	r30, r20
    3c10:	f5 0b       	sbc	r31, r21

00003c12 <__udivmodsi4_ep>:
    3c12:	66 1f       	adc	r22, r22
    3c14:	77 1f       	adc	r23, r23
    3c16:	88 1f       	adc	r24, r24
    3c18:	99 1f       	adc	r25, r25
    3c1a:	1a 94       	dec	r1
    3c1c:	69 f7       	brne	.-38     	; 0x3bf8 <__udivmodsi4_loop>
    3c1e:	60 95       	com	r22
    3c20:	70 95       	com	r23
    3c22:	80 95       	com	r24
    3c24:	90 95       	com	r25
    3c26:	9b 01       	movw	r18, r22
    3c28:	ac 01       	movw	r20, r24
    3c2a:	bd 01       	movw	r22, r26
    3c2c:	cf 01       	movw	r24, r30
    3c2e:	08 95       	ret

00003c30 <__prologue_saves__>:
    3c30:	2f 92       	push	r2
    3c32:	3f 92       	push	r3
    3c34:	4f 92       	push	r4
    3c36:	5f 92       	push	r5
    3c38:	6f 92       	push	r6
    3c3a:	7f 92       	push	r7
    3c3c:	8f 92       	push	r8
    3c3e:	9f 92       	push	r9
    3c40:	af 92       	push	r10
    3c42:	bf 92       	push	r11
    3c44:	cf 92       	push	r12
    3c46:	df 92       	push	r13
    3c48:	ef 92       	push	r14
    3c4a:	ff 92       	push	r15
    3c4c:	0f 93       	push	r16
    3c4e:	1f 93       	push	r17
    3c50:	cf 93       	push	r28
    3c52:	df 93       	push	r29
    3c54:	cd b7       	in	r28, 0x3d	; 61
    3c56:	de b7       	in	r29, 0x3e	; 62
    3c58:	ca 1b       	sub	r28, r26
    3c5a:	db 0b       	sbc	r29, r27
    3c5c:	0f b6       	in	r0, 0x3f	; 63
    3c5e:	f8 94       	cli
    3c60:	de bf       	out	0x3e, r29	; 62
    3c62:	0f be       	out	0x3f, r0	; 63
    3c64:	cd bf       	out	0x3d, r28	; 61
    3c66:	09 94       	ijmp

00003c68 <__epilogue_restores__>:
    3c68:	2a 88       	ldd	r2, Y+18	; 0x12
    3c6a:	39 88       	ldd	r3, Y+17	; 0x11
    3c6c:	48 88       	ldd	r4, Y+16	; 0x10
    3c6e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c70:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c72:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c74:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c76:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c78:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c7a:	b9 84       	ldd	r11, Y+9	; 0x09
    3c7c:	c8 84       	ldd	r12, Y+8	; 0x08
    3c7e:	df 80       	ldd	r13, Y+7	; 0x07
    3c80:	ee 80       	ldd	r14, Y+6	; 0x06
    3c82:	fd 80       	ldd	r15, Y+5	; 0x05
    3c84:	0c 81       	ldd	r16, Y+4	; 0x04
    3c86:	1b 81       	ldd	r17, Y+3	; 0x03
    3c88:	aa 81       	ldd	r26, Y+2	; 0x02
    3c8a:	b9 81       	ldd	r27, Y+1	; 0x01
    3c8c:	ce 0f       	add	r28, r30
    3c8e:	d1 1d       	adc	r29, r1
    3c90:	0f b6       	in	r0, 0x3f	; 63
    3c92:	f8 94       	cli
    3c94:	de bf       	out	0x3e, r29	; 62
    3c96:	0f be       	out	0x3f, r0	; 63
    3c98:	cd bf       	out	0x3d, r28	; 61
    3c9a:	ed 01       	movw	r28, r26
    3c9c:	08 95       	ret

00003c9e <itoa>:
    3c9e:	fb 01       	movw	r30, r22
    3ca0:	9f 01       	movw	r18, r30
    3ca2:	e8 94       	clt
    3ca4:	42 30       	cpi	r20, 0x02	; 2
    3ca6:	c4 f0       	brlt	.+48     	; 0x3cd8 <itoa+0x3a>
    3ca8:	45 32       	cpi	r20, 0x25	; 37
    3caa:	b4 f4       	brge	.+44     	; 0x3cd8 <itoa+0x3a>
    3cac:	4a 30       	cpi	r20, 0x0A	; 10
    3cae:	29 f4       	brne	.+10     	; 0x3cba <itoa+0x1c>
    3cb0:	97 fb       	bst	r25, 7
    3cb2:	1e f4       	brtc	.+6      	; 0x3cba <itoa+0x1c>
    3cb4:	90 95       	com	r25
    3cb6:	81 95       	neg	r24
    3cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    3cba:	64 2f       	mov	r22, r20
    3cbc:	77 27       	eor	r23, r23
    3cbe:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <__udivmodhi4>
    3cc2:	80 5d       	subi	r24, 0xD0	; 208
    3cc4:	8a 33       	cpi	r24, 0x3A	; 58
    3cc6:	0c f0       	brlt	.+2      	; 0x3cca <itoa+0x2c>
    3cc8:	89 5d       	subi	r24, 0xD9	; 217
    3cca:	81 93       	st	Z+, r24
    3ccc:	cb 01       	movw	r24, r22
    3cce:	00 97       	sbiw	r24, 0x00	; 0
    3cd0:	a1 f7       	brne	.-24     	; 0x3cba <itoa+0x1c>
    3cd2:	16 f4       	brtc	.+4      	; 0x3cd8 <itoa+0x3a>
    3cd4:	5d e2       	ldi	r21, 0x2D	; 45
    3cd6:	51 93       	st	Z+, r21
    3cd8:	10 82       	st	Z, r1
    3cda:	c9 01       	movw	r24, r18
    3cdc:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <strrev>

00003ce0 <strrev>:
    3ce0:	dc 01       	movw	r26, r24
    3ce2:	fc 01       	movw	r30, r24
    3ce4:	67 2f       	mov	r22, r23
    3ce6:	71 91       	ld	r23, Z+
    3ce8:	77 23       	and	r23, r23
    3cea:	e1 f7       	brne	.-8      	; 0x3ce4 <strrev+0x4>
    3cec:	32 97       	sbiw	r30, 0x02	; 2
    3cee:	04 c0       	rjmp	.+8      	; 0x3cf8 <strrev+0x18>
    3cf0:	7c 91       	ld	r23, X
    3cf2:	6d 93       	st	X+, r22
    3cf4:	70 83       	st	Z, r23
    3cf6:	62 91       	ld	r22, -Z
    3cf8:	ae 17       	cp	r26, r30
    3cfa:	bf 07       	cpc	r27, r31
    3cfc:	c8 f3       	brcs	.-14     	; 0x3cf0 <strrev+0x10>
    3cfe:	08 95       	ret

00003d00 <__udivmodhi4>:
    3d00:	aa 1b       	sub	r26, r26
    3d02:	bb 1b       	sub	r27, r27
    3d04:	51 e1       	ldi	r21, 0x11	; 17
    3d06:	07 c0       	rjmp	.+14     	; 0x3d16 <__udivmodhi4_ep>

00003d08 <__udivmodhi4_loop>:
    3d08:	aa 1f       	adc	r26, r26
    3d0a:	bb 1f       	adc	r27, r27
    3d0c:	a6 17       	cp	r26, r22
    3d0e:	b7 07       	cpc	r27, r23
    3d10:	10 f0       	brcs	.+4      	; 0x3d16 <__udivmodhi4_ep>
    3d12:	a6 1b       	sub	r26, r22
    3d14:	b7 0b       	sbc	r27, r23

00003d16 <__udivmodhi4_ep>:
    3d16:	88 1f       	adc	r24, r24
    3d18:	99 1f       	adc	r25, r25
    3d1a:	5a 95       	dec	r21
    3d1c:	a9 f7       	brne	.-22     	; 0x3d08 <__udivmodhi4_loop>
    3d1e:	80 95       	com	r24
    3d20:	90 95       	com	r25
    3d22:	bc 01       	movw	r22, r24
    3d24:	cd 01       	movw	r24, r26
    3d26:	08 95       	ret

00003d28 <_exit>:
    3d28:	f8 94       	cli

00003d2a <__stop_program>:
    3d2a:	ff cf       	rjmp	.-2      	; 0x3d2a <__stop_program>
